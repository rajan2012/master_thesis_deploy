{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "#reading from csv file\n",
        "creating df"
      ],
      "metadata": {
        "id": "kPAgdLJvpcNg"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "tQghPqjwpYxB"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Assuming the file is named \"your_file.csv\" and is located in the current directory\n",
        "#file_path = \"dataset_modify.csv\"\n",
        "\n",
        "#https://github.com/rajan2012/master_thesis_deploy/main/removedlongsym.csv\n",
        "\n",
        "file_path = \"removedlongsym.csv\"\n",
        "\n",
        "\n",
        "\n",
        "#https://github.com/rajan2012/german2english/blob/main/german_english_dictionary.csv\n",
        "# Read the CSV file into a DataFrame   ,nrows=10\n",
        "df = pd.read_csv(file_path)\n",
        "\n",
        "#df = pd.read_csv(file_path, sep='\\t', compression='gzip')\n",
        "\n",
        "# Display the DataFrame\n",
        "#print(df)\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "rabies_cases = df[df['Disease'] == 'rabies']"
      ],
      "metadata": {
        "id": "22-YNyxXqgCc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "rabies_cases"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 244
        },
        "id": "Ep8PWt8rqk3E",
        "outputId": "4a7e3177-b63d-4f44-ce7d-1ad9c8f71744"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Disease                                           Symptoms\n",
              "0     rabies  fever, headache, fatigue, anxiety, confusion, ...\n",
              "1     rabies  fever, headache, fatigue, anxiety, confusion, ...\n",
              "2     rabies  fever, headache, fatigue, anxiety, confusion, ...\n",
              "3     rabies  fever, headache, fatigue, confusion, hallucina...\n",
              "1144  rabies  fever, headache, fatigue, anxiety, confusion, ..."
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-95bef095-8c58-433c-9c10-14808525a651\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Disease</th>\n",
              "      <th>Symptoms</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>rabies</td>\n",
              "      <td>fever, headache, fatigue, anxiety, confusion, ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>rabies</td>\n",
              "      <td>fever, headache, fatigue, anxiety, confusion, ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>rabies</td>\n",
              "      <td>fever, headache, fatigue, anxiety, confusion, ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>rabies</td>\n",
              "      <td>fever, headache, fatigue, confusion, hallucina...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1144</th>\n",
              "      <td>rabies</td>\n",
              "      <td>fever, headache, fatigue, anxiety, confusion, ...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-95bef095-8c58-433c-9c10-14808525a651')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-95bef095-8c58-433c-9c10-14808525a651 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-95bef095-8c58-433c-9c10-14808525a651');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-1c61c6d5-7eeb-4061-9e1d-fba827e87e8b\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1c61c6d5-7eeb-4061-9e1d-fba827e87e8b')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-1c61c6d5-7eeb-4061-9e1d-fba827e87e8b button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_c70648b5-fffd-4acd-abb4-f3625a7fb685\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('rabies_cases')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_c70648b5-fffd-4acd-abb4-f3625a7fb685 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('rabies_cases');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "rabies_cases",
              "summary": "{\n  \"name\": \"rabies_cases\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Disease\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"rabies\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Symptoms\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"fever, headache, fatigue, anxiety, confusion, hallucinations, difficulty swallowing\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#data description"
      ],
      "metadata": {
        "id": "DMCfmdgKMkRt"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#preprocessing"
      ],
      "metadata": {
        "id": "fXKppD5OquON"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Strip leading and trailing whitespaces from the disease and symptoms columns\n",
        "# Strip leading and trailing whitespaces from the 'Disease' and 'Symptoms' columns\n",
        "df.loc[:, 'Disease'] = df['Disease'].str.strip()\n",
        "df.loc[:, 'Symptoms'] = df['Symptoms'].str.strip()\n",
        "\n",
        "# Modify 'Disease' column to lowercase\n",
        "df.loc[:, 'Disease'] = df['Disease'].str.lower()\n",
        "df.loc[:, 'Symptoms'] = df['Symptoms'].str.replace('_', ' ')"
      ],
      "metadata": {
        "id": "tFk8n--yqv_o"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import re\n",
        "import nltk\n",
        "from nltk.corpus import stopwords\n",
        "from nltk.stem import PorterStemmer\n",
        "from nltk.stem import WordNetLemmatizer\n",
        "from nltk.tokenize import word_tokenize\n",
        "from nltk.tag import pos_tag\n",
        "\n",
        "# Download NLTK resources if not already downloaded\n",
        "# Download NLTK resources if not already downloaded\n",
        "nltk.download('punkt')\n",
        "nltk.download('averaged_perceptron_tagger')\n",
        "nltk.download('stopwords')\n",
        "nltk.download('wordnet')\n",
        "\n",
        "# Initialize stopwords, stemmer, and lemmatizer\n",
        "stop_words = set(stopwords.words('english'))\n",
        "stemmer = PorterStemmer()\n",
        "lemmatizer = WordNetLemmatizer()\n",
        "\n",
        "def preprocess_text(text):\n",
        "    # Convert text to lowercase\n",
        "    text = text.lower()\n",
        "\n",
        "    # Remove punctuation and special characters\n",
        "    text = re.sub(r'[^\\w\\s,]', '', text)\n",
        "\n",
        "    # Tokenize text\n",
        "    tokens = text.split(',')\n",
        "\n",
        "    # Define a list of prepositions POS tags\n",
        "    preposition_tags = [\"IN\", \"TO\", \"RB\", \"CC\", \"DT\"]\n",
        "\n",
        "    # Remove stopwords and prepositions based on POS tags\n",
        "    filtered_tokens = []\n",
        "    for token in tokens:\n",
        "        # Tokenize each word in the token\n",
        "        words = word_tokenize(token)\n",
        "        # Perform part-of-speech tagging for each word\n",
        "        tagged_words = pos_tag(words)\n",
        "        # Remove stopwords and prepositions\n",
        "        filtered_words = [word for word, pos in tagged_words if word.lower() not in stop_words and pos not in preposition_tags]\n",
        "        # Join the remaining words into a token\n",
        "        filtered_token = ' '.join(filtered_words)\n",
        "        filtered_tokens.append(filtered_token)\n",
        "\n",
        "    # Perform lemmatization\n",
        "    lemmatized_tokens = [lemmatizer.lemmatize(token) for token in filtered_tokens]\n",
        "\n",
        "\n",
        "    # Perform stemming\n",
        "    #stemmed_tokens = [stemmer.stem(token) for token in lemmatized_tokens]\n",
        "\n",
        "    # Join tokens back into a string\n",
        "    processed_text2 = ', '.join(lemmatized_tokens)\n",
        "\n",
        "    #print(processed_text2)\n",
        "\n",
        "    # Split the input string by commas\n",
        "    parts = processed_text2.split(', ')\n",
        "\n",
        "    # Process each part\n",
        "    processed_parts = []\n",
        "    for part in parts:\n",
        "        # Split each part by space and remove 'ing' from words\n",
        "        processed_words = [word[:-3] if word.endswith(\"ing\") else word for word in part.split()]\n",
        "        processed_words = [word[:-3] if word.endswith(\"ish\") else word for word in processed_words]\n",
        "        # Join the words back together\n",
        "        processed_parts.append(' '.join(processed_words))\n",
        "\n",
        "    # Join the processed parts back together with commas\n",
        "    processed_text3 = \", \".join(processed_parts)\n",
        "\n",
        "    #print(processed_text3)\n",
        "    processed_text = output_text = \", \".join([word.replace(\" \", \"_\") for word in processed_text3.split(\", \")])\n",
        "\n",
        "\n",
        "\n",
        "    return processed_text\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rApR3zUGrM47",
        "outputId": "9a6544b4-686e-4b93-e61b-c4da4e19437e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[nltk_data] Downloading package punkt to /root/nltk_data...\n",
            "[nltk_data]   Package punkt is already up-to-date!\n",
            "[nltk_data] Downloading package averaged_perceptron_tagger to\n",
            "[nltk_data]     /root/nltk_data...\n",
            "[nltk_data]   Package averaged_perceptron_tagger is already up-to-\n",
            "[nltk_data]       date!\n",
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Package stopwords is already up-to-date!\n",
            "[nltk_data] Downloading package wordnet to /root/nltk_data...\n",
            "[nltk_data]   Package wordnet is already up-to-date!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.loc[:, 'Symptoms'] = df['Symptoms'].apply(preprocess_text)"
      ],
      "metadata": {
        "id": "0YhjZ-nXrQbO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#post processing symptoms"
      ],
      "metadata": {
        "id": "vU3zKX3Dra0K"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "rabies_cases2 = df[df['Disease'] == 'rabies']"
      ],
      "metadata": {
        "id": "O5370M9qrYs8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "rabies_cases2"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 244
        },
        "id": "uGF89bQRrepj",
        "outputId": "f5f560e1-ac19-4d16-85f1-0c35347e5f49"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Disease                                           Symptoms\n",
              "0     rabies  fever, headache, fatigue, anxiety, confusion, ...\n",
              "1     rabies  fever, headache, fatigue, anxiety, confusion, ...\n",
              "2     rabies  fever, headache, fatigue, anxiety, confusion, ...\n",
              "3     rabies  fever, headache, fatigue, confusion, hallucina...\n",
              "1144  rabies  fever, headache, fatigue, anxiety, confusion, ..."
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b38d7744-2e3b-4e4f-8ace-a502fcbcce04\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Disease</th>\n",
              "      <th>Symptoms</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>rabies</td>\n",
              "      <td>fever, headache, fatigue, anxiety, confusion, ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>rabies</td>\n",
              "      <td>fever, headache, fatigue, anxiety, confusion, ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>rabies</td>\n",
              "      <td>fever, headache, fatigue, anxiety, confusion, ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>rabies</td>\n",
              "      <td>fever, headache, fatigue, confusion, hallucina...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1144</th>\n",
              "      <td>rabies</td>\n",
              "      <td>fever, headache, fatigue, anxiety, confusion, ...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b38d7744-2e3b-4e4f-8ace-a502fcbcce04')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b38d7744-2e3b-4e4f-8ace-a502fcbcce04 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b38d7744-2e3b-4e4f-8ace-a502fcbcce04');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c3808038-3366-4fd1-8963-557e964d6051\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c3808038-3366-4fd1-8963-557e964d6051')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c3808038-3366-4fd1-8963-557e964d6051 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_95889ab7-a7fd-4923-b334-d1fea2ab8a6b\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('rabies_cases2')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_95889ab7-a7fd-4923-b334-d1fea2ab8a6b button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('rabies_cases2');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "rabies_cases2",
              "summary": "{\n  \"name\": \"rabies_cases2\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Disease\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"rabies\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Symptoms\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"fever, headache, fatigue, anxiety, confusion, hallucination, difficulty_swallow\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#model training\n"
      ],
      "metadata": {
        "id": "3_fopVCOrtnW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.datasets import make_classification\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import accuracy_score\n",
        "from sklearn.feature_extraction.text import CountVectorizer\n",
        "from sklearn.decomposition import TruncatedSVD\n",
        "from sklearn.pipeline import Pipeline\n",
        "import joblib\n",
        "\n",
        "import pandas as pd\n",
        "import joblib\n",
        "from sklearn.feature_extraction.text import CountVectorizer\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.naive_bayes import MultinomialNB\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.metrics import accuracy_score\n",
        "\n",
        "from sklearn.naive_bayes import MultinomialNB, GaussianNB\n",
        "from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "import xgboost as xgb\n",
        "from sklearn.metrics import confusion_matrix\n",
        "\n"
      ],
      "metadata": {
        "id": "OG3kb8Pwrh0y"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import warnings\n",
        "from sklearn.exceptions import UndefinedMetricWarning\n",
        "\n",
        "# Ignore UndefinedMetricWarning\n",
        "warnings.filterwarnings(\"ignore\", category=UndefinedMetricWarning)"
      ],
      "metadata": {
        "id": "b6F12G6G1fXm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#normal training with colmns without smote or dimension reduction"
      ],
      "metadata": {
        "id": "FheVTwZprxQe"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.naive_bayes import MultinomialNB, GaussianNB\n",
        "from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.metrics import roc_curve, precision_recall_curve, f1_score, accuracy_score, roc_auc_score\n",
        "from sklearn.metrics import precision_score, recall_score, classification_report\n",
        "import xgboost as xgb\n",
        "\n",
        "import joblib\n",
        "\n",
        "#print(\"without pca\")\n",
        "# Assuming you have already defined your DataFrame 'df' containing 'Symptoms' and 'Disease' columns\n",
        "\n",
        "#df5=df.iloc[1000:1500]\n",
        "# Split data into X (symptoms) and y (disease)\n",
        "X = df['Symptoms']\n",
        "y = df['Disease']\n",
        "\n",
        "#X = final_subset['Symptoms']\n",
        "#y = final_subset['Disease']\n",
        "\n",
        "# Split data into train and test sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "\n",
        "# Ensure X_train and X_test are lists of strings\n",
        "X_train = [str(text).lower() for text in X_train]\n",
        "X_test = [str(text).lower() for text in X_test]\n",
        "\n",
        "# Define the custom tokenizer function\n",
        "#def custom_tokenizer(text):\n",
        "  #  return text.split(', ')\n",
        "\n",
        "# Define a pipeline with different classifiers\n",
        "classifiers = {\n",
        "    'Random Forest': RandomForestClassifier(random_state=42),\n",
        "    'Support Vector Machine (SVM)': SVC(random_state=42),\n",
        "    'Decision Tree': DecisionTreeClassifier(random_state=42),\n",
        "    'K-Nearest Neighbors (KNN)': KNeighborsClassifier(n_neighbors=15),\n",
        "    'Logistic Regression': LogisticRegression()\n",
        "}\n",
        "\n",
        "\n",
        "# Initialize dictionaries to store metrics\n",
        "accuracy_dict = {}\n",
        "sensitivity_dict = {}\n",
        "precision_dict = {}\n",
        "f1_dict = {}\n",
        "recall_dict = {}\n",
        "\n",
        "# Initialize an empty DataFrame\n",
        "metrics_df = pd.DataFrame()\n",
        "\n",
        "# Test accuracy for each classifier\n",
        "for clf_name, clf in classifiers.items():\n",
        "    # Define the pipeline with CountVectorizer and current classifier\n",
        "    pipeline = Pipeline([\n",
        "        ('vectorizer', CountVectorizer(binary=True)),\n",
        "        ('classifier', clf)  # Classifier to use\n",
        "    ])\n",
        "\n",
        "    pipeline.fit(X_train, y_train)\n",
        "\n",
        "    # Predict on test data\n",
        "    y_pred = pipeline.predict(X_test)\n",
        "\n",
        "    # Classification report\n",
        "    report = classification_report(y_test, y_pred, output_dict=True, zero_division='warn')\n",
        "\n",
        "    # Extract metrics\n",
        "    accuracy_dict[clf_name] = report['accuracy']\n",
        "    sensitivity_dict[clf_name] = report['weighted avg']['recall']\n",
        "    precision_dict[clf_name] = report['weighted avg']['precision']\n",
        "    f1_dict[clf_name] = report['weighted avg']['f1-score']\n",
        "    recall_dict[clf_name] = report['weighted avg']['recall']\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "metrics_df = pd.DataFrame({\n",
        "    'Accuracy': accuracy_dict,\n",
        "    'Sensitivity': sensitivity_dict,\n",
        "    'Precision': precision_dict,\n",
        "    'F1-score': f1_dict,\n",
        "    'Recall': recall_dict\n",
        "})\n",
        "\n",
        "# Transpose the DataFrame to have algorithms as rows\n",
        "metrics_df = metrics_df.reset_index().rename(columns={'index': 'Model'})"
      ],
      "metadata": {
        "id": "Au0flp75rmaT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#metrics_df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "bcxF6wIg1K0F",
        "outputId": "1b63b8e0-899e-4031-c75c-0042224486c9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                          Model  Accuracy  Sensitivity  Precision  F1-score  \\\n",
              "0                 Random Forest  0.677019     0.677019   0.693841  0.675704   \n",
              "1  Support Vector Machine (SVM)  0.680124     0.680124   0.721300  0.690498   \n",
              "2                 Decision Tree  0.655280     0.655280   0.679775  0.654151   \n",
              "3     K-Nearest Neighbors (KNN)  0.602484     0.602484   0.582966  0.575722   \n",
              "4           Logistic Regression  0.686335     0.686335   0.648706  0.652351   \n",
              "\n",
              "     Recall  \n",
              "0  0.677019  \n",
              "1  0.680124  \n",
              "2  0.655280  \n",
              "3  0.602484  \n",
              "4  0.686335  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-410a6728-7d89-4222-8f92-5293fe64734d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Model</th>\n",
              "      <th>Accuracy</th>\n",
              "      <th>Sensitivity</th>\n",
              "      <th>Precision</th>\n",
              "      <th>F1-score</th>\n",
              "      <th>Recall</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Random Forest</td>\n",
              "      <td>0.677019</td>\n",
              "      <td>0.677019</td>\n",
              "      <td>0.693841</td>\n",
              "      <td>0.675704</td>\n",
              "      <td>0.677019</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Support Vector Machine (SVM)</td>\n",
              "      <td>0.680124</td>\n",
              "      <td>0.680124</td>\n",
              "      <td>0.721300</td>\n",
              "      <td>0.690498</td>\n",
              "      <td>0.680124</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Decision Tree</td>\n",
              "      <td>0.655280</td>\n",
              "      <td>0.655280</td>\n",
              "      <td>0.679775</td>\n",
              "      <td>0.654151</td>\n",
              "      <td>0.655280</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>K-Nearest Neighbors (KNN)</td>\n",
              "      <td>0.602484</td>\n",
              "      <td>0.602484</td>\n",
              "      <td>0.582966</td>\n",
              "      <td>0.575722</td>\n",
              "      <td>0.602484</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Logistic Regression</td>\n",
              "      <td>0.686335</td>\n",
              "      <td>0.686335</td>\n",
              "      <td>0.648706</td>\n",
              "      <td>0.652351</td>\n",
              "      <td>0.686335</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-410a6728-7d89-4222-8f92-5293fe64734d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-410a6728-7d89-4222-8f92-5293fe64734d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-410a6728-7d89-4222-8f92-5293fe64734d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a99c34b2-8f6a-4f1c-a4e0-258b60bb11c7\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a99c34b2-8f6a-4f1c-a4e0-258b60bb11c7')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a99c34b2-8f6a-4f1c-a4e0-258b60bb11c7 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_5a3ec570-9d3c-4254-b347-bfd1470b1f53\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('metrics_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_5a3ec570-9d3c-4254-b347-bfd1470b1f53 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('metrics_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "metrics_df",
              "summary": "{\n  \"name\": \"metrics_df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Model\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Support Vector Machine (SVM)\",\n          \"Logistic Regression\",\n          \"Decision Tree\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Accuracy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.03434451254894223,\n        \"min\": 0.6024844720496895,\n        \"max\": 0.6863354037267081,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.6801242236024845,\n          0.6863354037267081,\n          0.65527950310559\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sensitivity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.03434451254894223,\n        \"min\": 0.6024844720496895,\n        \"max\": 0.6863354037267081,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.6801242236024845,\n          0.6863354037267081,\n          0.65527950310559\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Precision\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0529489678975405,\n        \"min\": 0.582966197018992,\n        \"max\": 0.7213004042196588,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.7213004042196588,\n          0.6487057141697258,\n          0.6797754609090012\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"F1-score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.044272396055071855,\n        \"min\": 0.5757222849614154,\n        \"max\": 0.6904977202845574,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.6904977202845574,\n          0.6523506559547749,\n          0.6541513645298523\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Recall\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.03434451254894223,\n        \"min\": 0.6024844720496895,\n        \"max\": 0.6863354037267081,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.6801242236024845,\n          0.6863354037267081,\n          0.65527950310559\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#gaussian naive bayes"
      ],
      "metadata": {
        "id": "QHFszJnR2fxF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.naive_bayes import MultinomialNB, GaussianNB\n",
        "from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.metrics import roc_curve, precision_recall_curve, f1_score, accuracy_score, roc_auc_score\n",
        "from sklearn.metrics import precision_score, recall_score, classification_report\n",
        "import xgboost as xgb\n",
        "\n",
        "import joblib\n",
        "\n",
        "#print(\"without pca\")\n",
        "# Assuming you have already defined your DataFrame 'df' containing 'Symptoms' and 'Disease' columns\n",
        "\n",
        "#df5=df.iloc[1000:1500]\n",
        "# Split data into X (symptoms) and y (disease)\n",
        "X = df['Symptoms']\n",
        "y = df['Disease']\n",
        "\n",
        "#X = final_subset['Symptoms']\n",
        "#y = final_subset['Disease']\n",
        "\n",
        "# Split data into train and test sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "\n",
        "# Ensure X_train and X_test are lists of strings\n",
        "X_train = [str(text).lower() for text in X_train]\n",
        "X_test = [str(text).lower() for text in X_test]\n",
        "\n",
        "\n",
        "#Convert text data to sparse matrix using CountVectorizer\n",
        "vectorizer = CountVectorizer()\n",
        "X_train_vect = vectorizer.fit_transform(X_train)  # This will be a sparse matrix\n",
        "X_test_vect = vectorizer.transform(X_test)\n",
        "\n",
        "# Convert sparse matrix to dense for GaussianNB\n",
        "X_train_dense = X_train_vect.toarray()  # Now it's dense\n",
        "X_test_dense = X_test_vect.toarray()\n",
        "\n",
        "# Define the custom tokenizer function\n",
        "#def custom_tokenizer(text):\n",
        "  #  return text.split(', ')\n",
        "\n",
        "# Define a pipeline with different classifiers\n",
        "classifiers = {\n",
        "    'Multinomial Naive Bayes': MultinomialNB(),\n",
        "    #don't work with sparse matrix\n",
        "    'Gaussian Naive Bayes': GaussianNB(),\n",
        "}\n",
        "\n",
        "\n",
        "# Initialize dictionaries to store metrics\n",
        "accuracy_dict = {}\n",
        "sensitivity_dict = {}\n",
        "precision_dict = {}\n",
        "f1_dict = {}\n",
        "recall_dict = {}\n",
        "\n",
        "# Initialize an empty DataFrame\n",
        "metrics_df2 = pd.DataFrame()\n",
        "\n",
        "# Test accuracy for each classifier\n",
        "for clf_name, clf in classifiers.items():\n",
        "    # Define the pipeline with CountVectorizer and current classifier\n",
        "    pipeline = Pipeline([\n",
        "        ('classifier', clf)  # Classifier to use\n",
        "    ])\n",
        "\n",
        "    pipeline.fit(X_train_dense, y_train)\n",
        "\n",
        "    # Predict on test data\n",
        "    y_pred = pipeline.predict(X_test_dense)\n",
        "\n",
        "    # Classification report\n",
        "    report = classification_report(y_test, y_pred, output_dict=True, zero_division='warn')\n",
        "\n",
        "    # Extract metrics\n",
        "    accuracy_dict[clf_name] = report['accuracy']\n",
        "    sensitivity_dict[clf_name] = report['weighted avg']['recall']\n",
        "    precision_dict[clf_name] = report['weighted avg']['precision']\n",
        "    f1_dict[clf_name] = report['weighted avg']['f1-score']\n",
        "    recall_dict[clf_name] = report['weighted avg']['recall']\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "metrics_df2 = pd.DataFrame({\n",
        "    'Accuracy': accuracy_dict,\n",
        "    'Sensitivity': sensitivity_dict,\n",
        "    'Precision': precision_dict,\n",
        "    'F1-score': f1_dict,\n",
        "    'Recall': recall_dict\n",
        "})\n",
        "\n",
        "# Transpose the DataFrame to have algorithms as rows\n",
        "metrics_df2 = metrics_df2.reset_index().rename(columns={'index': 'Model'})\n",
        "#metrics_df2"
      ],
      "metadata": {
        "id": "kxr2QqoO2ibR",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6bc3ecc1-eefc-423a-e4c0-2741b6966c26"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1531: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1531: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1531: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1531: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1531: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1531: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1531: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1531: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1531: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1531: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1531: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1531: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#concatenate df\n",
        "result = pd.concat([metrics_df, metrics_df2], axis=0, ignore_index=True)"
      ],
      "metadata": {
        "id": "D2QFpZ_N5Nkz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "result"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 269
        },
        "id": "-cYjkpK35Yvr",
        "outputId": "49376532-5aaf-42d9-ea04-47d64d7160e8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                          Model  Accuracy  Sensitivity  Precision  F1-score  \\\n",
              "0                 Random Forest  0.677019     0.677019   0.693841  0.675704   \n",
              "1  Support Vector Machine (SVM)  0.680124     0.680124   0.721300  0.690498   \n",
              "2                 Decision Tree  0.655280     0.655280   0.679775  0.654151   \n",
              "3     K-Nearest Neighbors (KNN)  0.602484     0.602484   0.582966  0.575722   \n",
              "4           Logistic Regression  0.686335     0.686335   0.648706  0.652351   \n",
              "5       Multinomial Naive Bayes  0.624224     0.624224   0.573013  0.569808   \n",
              "6          Gaussian Naive Bayes  0.686335     0.686335   0.668682  0.668062   \n",
              "\n",
              "     Recall  \n",
              "0  0.677019  \n",
              "1  0.680124  \n",
              "2  0.655280  \n",
              "3  0.602484  \n",
              "4  0.686335  \n",
              "5  0.624224  \n",
              "6  0.686335  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1b9f8066-0285-4499-855f-c3dd88c7964c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Model</th>\n",
              "      <th>Accuracy</th>\n",
              "      <th>Sensitivity</th>\n",
              "      <th>Precision</th>\n",
              "      <th>F1-score</th>\n",
              "      <th>Recall</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Random Forest</td>\n",
              "      <td>0.677019</td>\n",
              "      <td>0.677019</td>\n",
              "      <td>0.693841</td>\n",
              "      <td>0.675704</td>\n",
              "      <td>0.677019</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Support Vector Machine (SVM)</td>\n",
              "      <td>0.680124</td>\n",
              "      <td>0.680124</td>\n",
              "      <td>0.721300</td>\n",
              "      <td>0.690498</td>\n",
              "      <td>0.680124</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Decision Tree</td>\n",
              "      <td>0.655280</td>\n",
              "      <td>0.655280</td>\n",
              "      <td>0.679775</td>\n",
              "      <td>0.654151</td>\n",
              "      <td>0.655280</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>K-Nearest Neighbors (KNN)</td>\n",
              "      <td>0.602484</td>\n",
              "      <td>0.602484</td>\n",
              "      <td>0.582966</td>\n",
              "      <td>0.575722</td>\n",
              "      <td>0.602484</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Logistic Regression</td>\n",
              "      <td>0.686335</td>\n",
              "      <td>0.686335</td>\n",
              "      <td>0.648706</td>\n",
              "      <td>0.652351</td>\n",
              "      <td>0.686335</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Multinomial Naive Bayes</td>\n",
              "      <td>0.624224</td>\n",
              "      <td>0.624224</td>\n",
              "      <td>0.573013</td>\n",
              "      <td>0.569808</td>\n",
              "      <td>0.624224</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Gaussian Naive Bayes</td>\n",
              "      <td>0.686335</td>\n",
              "      <td>0.686335</td>\n",
              "      <td>0.668682</td>\n",
              "      <td>0.668062</td>\n",
              "      <td>0.686335</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1b9f8066-0285-4499-855f-c3dd88c7964c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1b9f8066-0285-4499-855f-c3dd88c7964c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1b9f8066-0285-4499-855f-c3dd88c7964c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-17e6cfce-4152-40e2-9f1d-234cb6309671\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-17e6cfce-4152-40e2-9f1d-234cb6309671')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-17e6cfce-4152-40e2-9f1d-234cb6309671 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_d014ca2b-e983-44a5-abfd-fe7a5abc64e5\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('result')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_d014ca2b-e983-44a5-abfd-fe7a5abc64e5 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('result');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "result",
              "summary": "{\n  \"name\": \"result\",\n  \"rows\": 7,\n  \"fields\": [\n    {\n      \"column\": \"Model\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"Random Forest\",\n          \"Support Vector Machine (SVM)\",\n          \"Multinomial Naive Bayes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Accuracy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.03337262376928943,\n        \"min\": 0.6024844720496895,\n        \"max\": 0.6863354037267081,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.6770186335403726,\n          0.6801242236024845,\n          0.6242236024844721\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sensitivity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.03337262376928943,\n        \"min\": 0.6024844720496895,\n        \"max\": 0.6863354037267081,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.6770186335403726,\n          0.6801242236024845,\n          0.6242236024844721\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Precision\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0557013528064341,\n        \"min\": 0.5730125723983049,\n        \"max\": 0.7213004042196588,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0.6938405797101449,\n          0.7213004042196588,\n          0.5730125723983049\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"F1-score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.04833548461166786,\n        \"min\": 0.5698078716913578,\n        \"max\": 0.6904977202845574,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0.6757035457550331,\n          0.6904977202845574,\n          0.5698078716913578\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Recall\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.03337262376928943,\n        \"min\": 0.6024844720496895,\n        \"max\": 0.6863354037267081,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.6770186335403726,\n          0.6801242236024845,\n          0.6242236024844721\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 48
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "43Qz9k8M5fqV"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#with smote"
      ],
      "metadata": {
        "id": "8IKm8wyX4cb3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#for smote\n",
        "# Count the occurrences of each disease\n",
        "disease_counts = df['Disease'].value_counts()\n",
        "\n",
        "# Filter the DataFrame to include only diseases that occur more than once\n",
        "df_filtered = df[df['Disease'].isin(disease_counts[disease_counts > 3].index)]\n",
        "\n",
        "# Display the filtered DataFrame\n",
        "#print(df_filtered)\n",
        "\n"
      ],
      "metadata": {
        "id": "evjeaaHg5rJu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Calculate the length of distinct diseases\n",
        "distinct_diseases = df_filtered['Disease'].unique()\n",
        "num_distinct_diseases = len(distinct_diseases)\n",
        "\n",
        "# Print the length of distinct diseases\n",
        "print(\"Number of distinct diseases:\", num_distinct_diseases)\n",
        "\n",
        "#more than 1 -83 , 2-60 ,3-50"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "c7Qos_qM5upA",
        "outputId": "c98ac14e-d947-43fb-ce2f-b662de0ed8c7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of distinct diseases: 92\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.naive_bayes import MultinomialNB, GaussianNB\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.svm import SVC\n",
        "import xgboost as xgb\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import accuracy_score\n",
        "from sklearn.feature_extraction.text import CountVectorizer\n",
        "from sklearn.decomposition import TruncatedSVD\n",
        "from sklearn.pipeline import Pipeline\n",
        "from imblearn.over_sampling import SMOTE\n",
        "import joblib\n",
        "\n",
        "# Split data into X (symptoms) and y (disease)\n",
        "X = df_filtered['Symptoms']\n",
        "y = df_filtered['Disease']\n",
        "\n",
        "# Ensure X_train and X_test are lists of strings\n",
        "X = [str(text).lower() for text in X]\n",
        "y = [str(text).lower() for text in y]\n",
        "\n",
        "# Define a CountVectorizer\n",
        "vectorizer = CountVectorizer(binary=True)\n",
        "\n",
        "# Transform the text data into vectors\n",
        "X_train_vectors = vectorizer.fit_transform(X)\n",
        "\n",
        "# Apply SMOTE to balance the class distribution\n",
        "smote = SMOTE(random_state=42)\n",
        "X_resampled, y_resampled = SMOTE(k_neighbors=3).fit_resample(X_train_vectors, y)\n",
        "\n",
        "# Split resampled data into train and test sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)\n",
        "\n",
        "#GaussianNB()\n",
        "# Define classifiers\n",
        "classifiers = {\n",
        "    'Random Forest': RandomForestClassifier(random_state=42),\n",
        "    'Support Vector Machine (SVM)': SVC(random_state=42),\n",
        "    'Decision Tree': DecisionTreeClassifier(random_state=42),\n",
        "    'K-Nearest Neighbors (KNN)': KNeighborsClassifier(n_neighbors=15),\n",
        "    'Logistic Regression': LogisticRegression(),\n",
        "}\n",
        "\n",
        "# Initialize dictionaries to store metrics\n",
        "accuracy_dict = {}\n",
        "sensitivity_dict = {}\n",
        "precision_dict = {}\n",
        "f1_dict = {}\n",
        "recall_dict = {}\n",
        "\n",
        "# Initialize an empty DataFrame\n",
        "metrics_df = pd.DataFrame()\n",
        "metrics_df2 = pd.DataFrame()\n",
        "# Initialize an empty DataFrame\n",
        "result = pd.DataFrame()\n",
        "\n",
        "# Loop through each classifier\n",
        "for clf_name, clf in classifiers.items():\n",
        "    #print(clf_name)\n",
        "    # Define a pipeline with the current classifier\n",
        "    pipeline = Pipeline([\n",
        "        #('svd', TruncatedSVD(n_components=150)),  # Reduce dimensions using TruncatedSVD\n",
        "        ('classifier', clf)  # Classifier\n",
        "    ])\n",
        "\n",
        "    # Train the model\n",
        "    pipeline.fit(X_train, y_train)\n",
        "\n",
        "    # Predict on test data\n",
        "    y_pred = pipeline.predict(X_test)\n",
        "\n",
        "    # Classification report\n",
        "    report = classification_report(y_test, y_pred, output_dict=True, zero_division='warn')\n",
        "\n",
        "    # Extract metrics\n",
        "    accuracy_dict[clf_name] = report['accuracy']\n",
        "    sensitivity_dict[clf_name] = report['weighted avg']['recall']\n",
        "    precision_dict[clf_name] = report['weighted avg']['precision']\n",
        "    f1_dict[clf_name] = report['weighted avg']['f1-score']\n",
        "    recall_dict[clf_name] = report['weighted avg']['recall']\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "metrics_df = pd.DataFrame({\n",
        "    'Accuracy': accuracy_dict,\n",
        "    'Sensitivity': sensitivity_dict,\n",
        "    'Precision': precision_dict,\n",
        "    'F1-score': f1_dict,\n",
        "    'Recall': recall_dict\n",
        "})\n",
        "\n",
        "# Transpose the DataFrame to have algorithms as rows\n",
        "metrics_df = metrics_df.reset_index().rename(columns={'index': 'Model'})\n",
        "#metrics_df2\n"
      ],
      "metadata": {
        "id": "81-CJAR85wa-",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "096bf63b-ab4d-4478-d1b4-bfbb619421e3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1531: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1531: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1531: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1531: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1531: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1531: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.naive_bayes import MultinomialNB, GaussianNB\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.svm import SVC\n",
        "import xgboost as xgb\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import accuracy_score, classification_report\n",
        "from sklearn.feature_extraction.text import CountVectorizer\n",
        "from sklearn.decomposition import TruncatedSVD\n",
        "from sklearn.pipeline import Pipeline\n",
        "from imblearn.over_sampling import SMOTE\n",
        "import pandas as pd\n",
        "import joblib\n",
        "\n",
        "# Split data into X (symptoms) and y (disease)\n",
        "X = df_filtered['Symptoms']\n",
        "y = df_filtered['Disease']\n",
        "\n",
        "# Ensure X_train and X_test are lists of strings since it was giving error to convert to lower case\n",
        "X = [str(text).lower() for text in X]\n",
        "y = [str(text).lower() for text in y]\n",
        "\n",
        "\n",
        "# Convert text data to sparse matrix using CountVectorizer\n",
        "vectorizer = CountVectorizer()\n",
        "X_train_vectors = vectorizer.fit_transform(X)\n",
        "\n",
        "# Apply SMOTE to balance the class distribution\n",
        "smote = SMOTE(random_state=42)\n",
        "X_resampled, y_resampled = SMOTE(k_neighbors=3).fit_resample(X_train_vectors, y)\n",
        "\n",
        "# Split data into train and test sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)\n",
        "\n",
        "\n",
        "# Convert sparse matrix to dense for GaussianNB\n",
        "X_train_dense = X_train.toarray()  # Now it's dense\n",
        "X_test_dense = X_test.toarray()  # Dense test set\n",
        "\n",
        "# Define a pipeline with different classifiers\n",
        "classifiers = {\n",
        "    'Multinomial Naive Bayes': MultinomialNB(),\n",
        "    'Gaussian Naive Bayes': GaussianNB(),\n",
        "}\n",
        "\n",
        "# Initialize dictionaries to store metrics\n",
        "accuracy_dict = {}\n",
        "sensitivity_dict = {}\n",
        "precision_dict = {}\n",
        "f1_dict = {}\n",
        "recall_dict = {}\n",
        "\n",
        "# Initialize an empty DataFrame\n",
        "metrics_df2 = pd.DataFrame()\n",
        "\n",
        "# Test accuracy for each classifier\n",
        "for clf_name, clf in classifiers.items():\n",
        "    # Define the pipeline with classifier\n",
        "    pipeline = Pipeline([\n",
        "        ('classifier', clf)  # Classifier to use\n",
        "    ])\n",
        "\n",
        "    # Fit the model\n",
        "    pipeline.fit(X_train_dense, y_train)\n",
        "\n",
        "    # Predict on test data\n",
        "    y_pred = pipeline.predict(X_test_dense)\n",
        "\n",
        "    # Classification report\n",
        "    report = classification_report(y_test, y_pred, output_dict=True, zero_division='warn')\n",
        "\n",
        "    # Extract metrics\n",
        "    accuracy_dict[clf_name] = report['accuracy']\n",
        "    sensitivity_dict[clf_name] = report['weighted avg']['recall']\n",
        "    precision_dict[clf_name] = report['weighted avg']['precision']\n",
        "    f1_dict[clf_name] = report['weighted avg']['f1-score']\n",
        "    recall_dict[clf_name] = report['weighted avg']['recall']\n",
        "\n",
        "# Creating a DataFrame for the metrics\n",
        "metrics_df2 = pd.DataFrame({\n",
        "    'Accuracy': accuracy_dict,\n",
        "    'Sensitivity': sensitivity_dict,\n",
        "    'Precision': precision_dict,\n",
        "    'F1-score': f1_dict,\n",
        "    'Recall': recall_dict\n",
        "})\n",
        "\n",
        "# Transpose the DataFrame to have algorithms as rows\n",
        "metrics_df2 = metrics_df2.reset_index().rename(columns={'index': 'Model'})\n"
      ],
      "metadata": {
        "id": "r4-Bywpl5jSo"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#concatenate df\n",
        "result = pd.concat([metrics_df, metrics_df2], axis=0, ignore_index=True)"
      ],
      "metadata": {
        "id": "TrtirNy57tIC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "result"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 269
        },
        "id": "ZSXYAkpO7cZi",
        "outputId": "d5dae0ff-9a2b-47fd-e363-54562af8f2d2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                          Model  Accuracy  Sensitivity  Precision  F1-score  \\\n",
              "0                 Random Forest  0.922173     0.922173   0.948269  0.926543   \n",
              "1  Support Vector Machine (SVM)  0.920705     0.920705   0.956315  0.928890   \n",
              "2                 Decision Tree  0.920705     0.920705   0.949971  0.925783   \n",
              "3     K-Nearest Neighbors (KNN)  0.910426     0.910426   0.943451  0.919294   \n",
              "4           Logistic Regression  0.922173     0.922173   0.955213  0.929704   \n",
              "5       Multinomial Naive Bayes  0.878120     0.878120   0.921055  0.880392   \n",
              "6          Gaussian Naive Bayes  0.886931     0.886931   0.925244  0.884835   \n",
              "\n",
              "     Recall  \n",
              "0  0.922173  \n",
              "1  0.920705  \n",
              "2  0.920705  \n",
              "3  0.910426  \n",
              "4  0.922173  \n",
              "5  0.878120  \n",
              "6  0.886931  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-615e6de1-f7b5-470c-a0c0-fa84339b5c70\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Model</th>\n",
              "      <th>Accuracy</th>\n",
              "      <th>Sensitivity</th>\n",
              "      <th>Precision</th>\n",
              "      <th>F1-score</th>\n",
              "      <th>Recall</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Random Forest</td>\n",
              "      <td>0.922173</td>\n",
              "      <td>0.922173</td>\n",
              "      <td>0.948269</td>\n",
              "      <td>0.926543</td>\n",
              "      <td>0.922173</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Support Vector Machine (SVM)</td>\n",
              "      <td>0.920705</td>\n",
              "      <td>0.920705</td>\n",
              "      <td>0.956315</td>\n",
              "      <td>0.928890</td>\n",
              "      <td>0.920705</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Decision Tree</td>\n",
              "      <td>0.920705</td>\n",
              "      <td>0.920705</td>\n",
              "      <td>0.949971</td>\n",
              "      <td>0.925783</td>\n",
              "      <td>0.920705</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>K-Nearest Neighbors (KNN)</td>\n",
              "      <td>0.910426</td>\n",
              "      <td>0.910426</td>\n",
              "      <td>0.943451</td>\n",
              "      <td>0.919294</td>\n",
              "      <td>0.910426</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Logistic Regression</td>\n",
              "      <td>0.922173</td>\n",
              "      <td>0.922173</td>\n",
              "      <td>0.955213</td>\n",
              "      <td>0.929704</td>\n",
              "      <td>0.922173</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Multinomial Naive Bayes</td>\n",
              "      <td>0.878120</td>\n",
              "      <td>0.878120</td>\n",
              "      <td>0.921055</td>\n",
              "      <td>0.880392</td>\n",
              "      <td>0.878120</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Gaussian Naive Bayes</td>\n",
              "      <td>0.886931</td>\n",
              "      <td>0.886931</td>\n",
              "      <td>0.925244</td>\n",
              "      <td>0.884835</td>\n",
              "      <td>0.886931</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-615e6de1-f7b5-470c-a0c0-fa84339b5c70')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-615e6de1-f7b5-470c-a0c0-fa84339b5c70 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-615e6de1-f7b5-470c-a0c0-fa84339b5c70');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-7c7a7cd1-5b33-4087-90e4-14e94ff497b7\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7c7a7cd1-5b33-4087-90e4-14e94ff497b7')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-7c7a7cd1-5b33-4087-90e4-14e94ff497b7 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_e4d89e7d-a501-4456-bccf-e042da353088\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('result')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_e4d89e7d-a501-4456-bccf-e042da353088 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('result');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "result",
              "summary": "{\n  \"name\": \"result\",\n  \"rows\": 7,\n  \"fields\": [\n    {\n      \"column\": \"Model\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"Random Forest\",\n          \"Support Vector Machine (SVM)\",\n          \"Multinomial Naive Bayes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Accuracy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.018543888806255723,\n        \"min\": 0.8781204111600588,\n        \"max\": 0.922173274596182,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.920704845814978,\n          0.8869309838472834,\n          0.9104258443465492\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sensitivity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.018543888806255723,\n        \"min\": 0.8781204111600588,\n        \"max\": 0.922173274596182,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.920704845814978,\n          0.8869309838472834,\n          0.9104258443465492\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Precision\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.014139383750090696,\n        \"min\": 0.9210554001476794,\n        \"max\": 0.9563146666623011,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0.9482687690837471,\n          0.9563146666623011,\n          0.9210554001476794\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"F1-score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.021492828662208956,\n        \"min\": 0.8803924256679868,\n        \"max\": 0.9297042749750706,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0.9265429384844013,\n          0.9288901630765038,\n          0.8803924256679868\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Recall\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.018543888806255723,\n        \"min\": 0.8781204111600588,\n        \"max\": 0.922173274596182,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.920704845814978,\n          0.8869309838472834,\n          0.9104258443465492\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 65
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#dimesnion reduction TruncatedSVD"
      ],
      "metadata": {
        "id": "Rtsq2pU-_uFN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.naive_bayes import MultinomialNB, GaussianNB\n",
        "from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.metrics import roc_curve, precision_recall_curve, f1_score, accuracy_score, roc_auc_score\n",
        "from sklearn.metrics import precision_score, recall_score, classification_report\n",
        "import xgboost as xgb\n",
        "\n",
        "import joblib\n",
        "\n",
        "#print(\"without pca\")\n",
        "# Assuming you have already defined your DataFrame 'df' containing 'Symptoms' and 'Disease' columns\n",
        "\n",
        "#df5=df.iloc[1000:1500]\n",
        "# Split data into X (symptoms) and y (disease)\n",
        "X = df['Symptoms']\n",
        "y = df['Disease']\n",
        "\n",
        "#X = final_subset['Symptoms']\n",
        "#y = final_subset['Disease']\n",
        "\n",
        "# Split data into train and test sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "\n",
        "# Ensure X_train and X_test are lists of strings\n",
        "X_train = [str(text).lower() for text in X_train]\n",
        "X_test = [str(text).lower() for text in X_test]\n",
        "\n",
        "# Define the custom tokenizer function\n",
        "#def custom_tokenizer(text):\n",
        "  #  return text.split(', ')\n",
        "\n",
        "# Define a pipeline with different classifiers\n",
        "classifiers = {\n",
        "    'Random Forest': RandomForestClassifier(random_state=42),\n",
        "    'Support Vector Machine (SVM)': SVC(random_state=42),\n",
        "    'Decision Tree': DecisionTreeClassifier(random_state=42),\n",
        "    'K-Nearest Neighbors (KNN)': KNeighborsClassifier(n_neighbors=15),\n",
        "    'Logistic Regression': LogisticRegression()\n",
        "}\n",
        "\n",
        "\n",
        "# Initialize dictionaries to store metrics\n",
        "accuracy_dict = {}\n",
        "sensitivity_dict = {}\n",
        "precision_dict = {}\n",
        "f1_dict = {}\n",
        "recall_dict = {}\n",
        "\n",
        "# Initialize an empty DataFrame\n",
        "metrics_df = pd.DataFrame()\n",
        "# Initialize an empty DataFrame\n",
        "result = pd.DataFrame()\n",
        "\n",
        "# Test accuracy for each classifier\n",
        "for clf_name, clf in classifiers.items():\n",
        "    # Define the pipeline with CountVectorizer and current classifier\n",
        "    pipeline = Pipeline([\n",
        "        ('vectorizer', CountVectorizer(binary=True)),\n",
        "        ('svd', TruncatedSVD(n_components=150)),\n",
        "        ('classifier', clf)  # Classifier to use\n",
        "    ])\n",
        "\n",
        "    pipeline.fit(X_train, y_train)\n",
        "\n",
        "    # Predict on test data\n",
        "    y_pred = pipeline.predict(X_test)\n",
        "\n",
        "    # Classification report\n",
        "    report = classification_report(y_test, y_pred, output_dict=True, zero_division='warn')\n",
        "\n",
        "    # Extract metrics\n",
        "    accuracy_dict[clf_name] = report['accuracy']\n",
        "    sensitivity_dict[clf_name] = report['weighted avg']['recall']\n",
        "    precision_dict[clf_name] = report['weighted avg']['precision']\n",
        "    f1_dict[clf_name] = report['weighted avg']['f1-score']\n",
        "    recall_dict[clf_name] = report['weighted avg']['recall']\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "metrics_df = pd.DataFrame({\n",
        "    'Accuracy': accuracy_dict,\n",
        "    'Sensitivity': sensitivity_dict,\n",
        "    'Precision': precision_dict,\n",
        "    'F1-score': f1_dict,\n",
        "    'Recall': recall_dict\n",
        "})\n",
        "\n",
        "# Transpose the DataFrame to have algorithms as rows\n",
        "metrics_df = metrics_df.reset_index().rename(columns={'index': 'Model'})"
      ],
      "metadata": {
        "id": "KAP6c2qM_wiq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.naive_bayes import MultinomialNB, GaussianNB\n",
        "from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.metrics import roc_curve, precision_recall_curve, f1_score, accuracy_score, roc_auc_score\n",
        "from sklearn.metrics import precision_score, recall_score, classification_report\n",
        "import xgboost as xgb\n",
        "\n",
        "import joblib\n",
        "\n",
        "#print(\"without pca\")\n",
        "# Assuming you have already defined your DataFrame 'df' containing 'Symptoms' and 'Disease' columns\n",
        "\n",
        "#df5=df.iloc[1000:1500]\n",
        "# Split data into X (symptoms) and y (disease)\n",
        "X = df['Symptoms']\n",
        "y = df['Disease']\n",
        "\n",
        "#X = final_subset['Symptoms']\n",
        "#y = final_subset['Disease']\n",
        "\n",
        "# Split data into train and test sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "\n",
        "# Ensure X_train and X_test are lists of strings\n",
        "X_train = [str(text).lower() for text in X_train]\n",
        "X_test = [str(text).lower() for text in X_test]\n",
        "\n",
        "\n",
        "#Convert text data to sparse matrix using CountVectorizer\n",
        "vectorizer = CountVectorizer()\n",
        "X_train_vect = vectorizer.fit_transform(X_train)  # This will be a sparse matrix\n",
        "X_test_vect = vectorizer.transform(X_test)\n",
        "\n",
        "# Convert sparse matrix to dense for GaussianNB\n",
        "X_train_dense = X_train_vect.toarray()  # Now it's dense\n",
        "X_test_dense = X_test_vect.toarray()\n",
        "\n",
        "# Define the custom tokenizer function\n",
        "#def custom_tokenizer(text):\n",
        "  #  return text.split(', ')\n",
        "\n",
        "# Define a pipeline with different classifiers\n",
        "classifiers = {\n",
        "    #not wokring in this case because of -ve value in\n",
        "    #data\n",
        "    #'Multinomial Naive Bayes': MultinomialNB(),\n",
        "    #don't work with sparse matrix\n",
        "    'Gaussian Naive Bayes': GaussianNB(),\n",
        "}\n",
        "\n",
        "\n",
        "# Initialize dictionaries to store metrics\n",
        "accuracy_dict = {}\n",
        "sensitivity_dict = {}\n",
        "precision_dict = {}\n",
        "f1_dict = {}\n",
        "recall_dict = {}\n",
        "\n",
        "# Initialize an empty DataFrame\n",
        "metrics_df2 = pd.DataFrame()\n",
        "\n",
        "# Test accuracy for each classifier\n",
        "for clf_name, clf in classifiers.items():\n",
        "    # Define the pipeline with CountVectorizer and current classifier\n",
        "    pipeline = Pipeline([\n",
        "        ('svd', TruncatedSVD(n_components=150)),\n",
        "        ('classifier', clf)  # Classifier to use\n",
        "    ])\n",
        "\n",
        "    pipeline.fit(X_train_dense, y_train)\n",
        "\n",
        "    # Predict on test data\n",
        "    y_pred = pipeline.predict(X_test_dense)\n",
        "\n",
        "    # Classification report\n",
        "    report = classification_report(y_test, y_pred, output_dict=True, zero_division='warn')\n",
        "\n",
        "    # Extract metrics\n",
        "    accuracy_dict[clf_name] = report['accuracy']\n",
        "    sensitivity_dict[clf_name] = report['weighted avg']['recall']\n",
        "    precision_dict[clf_name] = report['weighted avg']['precision']\n",
        "    f1_dict[clf_name] = report['weighted avg']['f1-score']\n",
        "    recall_dict[clf_name] = report['weighted avg']['recall']\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "metrics_df2 = pd.DataFrame({\n",
        "    'Accuracy': accuracy_dict,\n",
        "    'Sensitivity': sensitivity_dict,\n",
        "    'Precision': precision_dict,\n",
        "    'F1-score': f1_dict,\n",
        "    'Recall': recall_dict\n",
        "})\n",
        "\n",
        "# Transpose the DataFrame to have algorithms as rows\n",
        "metrics_df2 = metrics_df2.reset_index().rename(columns={'index': 'Model'})\n",
        "#metrics_df2"
      ],
      "metadata": {
        "id": "1xil_mWcBuxd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#concatenate df\n",
        "result = pd.concat([metrics_df, metrics_df2], axis=0, ignore_index=True)"
      ],
      "metadata": {
        "id": "EPbA5oUnAgsJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "result"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 237
        },
        "id": "PEVKhm8aChNj",
        "outputId": "2e4aba72-e2fb-410b-9498-b6e2bd366f08"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                          Model  Accuracy  Sensitivity  Precision  F1-score  \\\n",
              "0                 Random Forest  0.673913     0.673913   0.664043  0.657444   \n",
              "1  Support Vector Machine (SVM)  0.677019     0.677019   0.722186  0.689102   \n",
              "2                 Decision Tree  0.627329     0.627329   0.644948  0.626182   \n",
              "3     K-Nearest Neighbors (KNN)  0.633540     0.633540   0.646389  0.625283   \n",
              "4           Logistic Regression  0.683230     0.683230   0.647256  0.650986   \n",
              "5          Gaussian Naive Bayes  0.630435     0.630435   0.651467  0.626054   \n",
              "\n",
              "     Recall  \n",
              "0  0.673913  \n",
              "1  0.677019  \n",
              "2  0.627329  \n",
              "3  0.633540  \n",
              "4  0.683230  \n",
              "5  0.630435  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-98457b92-1364-4835-a602-31832462dfb4\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Model</th>\n",
              "      <th>Accuracy</th>\n",
              "      <th>Sensitivity</th>\n",
              "      <th>Precision</th>\n",
              "      <th>F1-score</th>\n",
              "      <th>Recall</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Random Forest</td>\n",
              "      <td>0.673913</td>\n",
              "      <td>0.673913</td>\n",
              "      <td>0.664043</td>\n",
              "      <td>0.657444</td>\n",
              "      <td>0.673913</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Support Vector Machine (SVM)</td>\n",
              "      <td>0.677019</td>\n",
              "      <td>0.677019</td>\n",
              "      <td>0.722186</td>\n",
              "      <td>0.689102</td>\n",
              "      <td>0.677019</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Decision Tree</td>\n",
              "      <td>0.627329</td>\n",
              "      <td>0.627329</td>\n",
              "      <td>0.644948</td>\n",
              "      <td>0.626182</td>\n",
              "      <td>0.627329</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>K-Nearest Neighbors (KNN)</td>\n",
              "      <td>0.633540</td>\n",
              "      <td>0.633540</td>\n",
              "      <td>0.646389</td>\n",
              "      <td>0.625283</td>\n",
              "      <td>0.633540</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Logistic Regression</td>\n",
              "      <td>0.683230</td>\n",
              "      <td>0.683230</td>\n",
              "      <td>0.647256</td>\n",
              "      <td>0.650986</td>\n",
              "      <td>0.683230</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Gaussian Naive Bayes</td>\n",
              "      <td>0.630435</td>\n",
              "      <td>0.630435</td>\n",
              "      <td>0.651467</td>\n",
              "      <td>0.626054</td>\n",
              "      <td>0.630435</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-98457b92-1364-4835-a602-31832462dfb4')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-98457b92-1364-4835-a602-31832462dfb4 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-98457b92-1364-4835-a602-31832462dfb4');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-3b760495-8f09-45d5-8bd1-b30ef7daec0f\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3b760495-8f09-45d5-8bd1-b30ef7daec0f')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-3b760495-8f09-45d5-8bd1-b30ef7daec0f button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_6a08ced9-2b23-4da5-ae92-f92c1ac788d5\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('result')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_6a08ced9-2b23-4da5-ae92-f92c1ac788d5 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('result');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "result",
              "summary": "{\n  \"name\": \"result\",\n  \"rows\": 6,\n  \"fields\": [\n    {\n      \"column\": \"Model\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"Random Forest\",\n          \"Support Vector Machine (SVM)\",\n          \"Gaussian Naive Bayes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Accuracy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.026327394383456437,\n        \"min\": 0.6273291925465838,\n        \"max\": 0.6832298136645962,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.6739130434782609,\n          0.6770186335403726,\n          0.6304347826086957\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sensitivity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.026327394383456437,\n        \"min\": 0.6273291925465838,\n        \"max\": 0.6832298136645962,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.6739130434782609,\n          0.6770186335403726,\n          0.6304347826086957\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Precision\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.029954159367670645,\n        \"min\": 0.6449484866410332,\n        \"max\": 0.7221861988942734,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.6640430480492592,\n          0.7221861988942734,\n          0.6514672421218679\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"F1-score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.025429398680638243,\n        \"min\": 0.6252826366180403,\n        \"max\": 0.689102006418571,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.6574439757873887,\n          0.689102006418571,\n          0.6260540382647991\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Recall\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.026327394383456437,\n        \"min\": 0.6273291925465838,\n        \"max\": 0.6832298136645962,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.6739130434782609,\n          0.6770186335403726,\n          0.6304347826086957\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 74
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#pca"
      ],
      "metadata": {
        "id": "LEY9QE0iAz_v"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.naive_bayes import MultinomialNB, GaussianNB\n",
        "from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.metrics import roc_curve, precision_recall_curve, f1_score, accuracy_score, roc_auc_score\n",
        "from sklearn.metrics import precision_score, recall_score, classification_report\n",
        "import xgboost as xgb\n",
        "from sklearn.decomposition import PCA\n",
        "\n",
        "import joblib\n",
        "\n",
        "#print(\"without pca\")\n",
        "# Assuming you have already defined your DataFrame 'df' containing 'Symptoms' and 'Disease' columns\n",
        "\n",
        "#df5=df.iloc[1000:1500]\n",
        "# Split data into X (symptoms) and y (disease)\n",
        "X = df['Symptoms']\n",
        "y = df['Disease']\n",
        "\n",
        "#X = final_subset['Symptoms']\n",
        "#y = final_subset['Disease']\n",
        "\n",
        "# Split data into train and test sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "\n",
        "# Ensure X_train and X_test are lists of strings\n",
        "X_train = [str(text).lower() for text in X_train]\n",
        "X_test = [str(text).lower() for text in X_test]\n",
        "\n",
        "# Define the custom tokenizer function\n",
        "#def custom_tokenizer(text):\n",
        "  #  return text.split(', ')\n",
        "\n",
        "# Define a pipeline with different classifiers\n",
        "classifiers = {\n",
        "    'Random Forest': RandomForestClassifier(random_state=42),\n",
        "    'Support Vector Machine (SVM)': SVC(random_state=42),\n",
        "    'Decision Tree': DecisionTreeClassifier(random_state=42),\n",
        "    'K-Nearest Neighbors (KNN)': KNeighborsClassifier(n_neighbors=15),\n",
        "    'Logistic Regression': LogisticRegression()\n",
        "}\n",
        "\n",
        "\n",
        "# Initialize dictionaries to store metrics\n",
        "accuracy_dict = {}\n",
        "sensitivity_dict = {}\n",
        "precision_dict = {}\n",
        "f1_dict = {}\n",
        "recall_dict = {}\n",
        "\n",
        "# Initialize an empty DataFrame\n",
        "metrics_df = pd.DataFrame()\n",
        "# Initialize an empty DataFrame\n",
        "result = pd.DataFrame()\n",
        "\n",
        "# Test accuracy for each classifier\n",
        "for clf_name, clf in classifiers.items():\n",
        "    # Define the pipeline with CountVectorizer and current classifier\n",
        "    pipeline = Pipeline([\n",
        "        ('vectorizer', CountVectorizer(binary=True)),\n",
        "        ('pca', PCA(n_components=150)),\n",
        "        ('classifier', clf)  # Classifier to use\n",
        "    ])\n",
        "\n",
        "    pipeline.fit(X_train, y_train)\n",
        "\n",
        "    # Predict on test data\n",
        "    y_pred = pipeline.predict(X_test)\n",
        "\n",
        "    # Classification report\n",
        "    report = classification_report(y_test, y_pred, output_dict=True, zero_division='warn')\n",
        "\n",
        "    # Extract metrics\n",
        "    accuracy_dict[clf_name] = report['accuracy']\n",
        "    sensitivity_dict[clf_name] = report['weighted avg']['recall']\n",
        "    precision_dict[clf_name] = report['weighted avg']['precision']\n",
        "    f1_dict[clf_name] = report['weighted avg']['f1-score']\n",
        "    recall_dict[clf_name] = report['weighted avg']['recall']\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "metrics_df = pd.DataFrame({\n",
        "    'Accuracy': accuracy_dict,\n",
        "    'Sensitivity': sensitivity_dict,\n",
        "    'Precision': precision_dict,\n",
        "    'F1-score': f1_dict,\n",
        "    'Recall': recall_dict\n",
        "})\n",
        "\n",
        "# Transpose the DataFrame to have algorithms as rows\n",
        "metrics_df = metrics_df.reset_index().rename(columns={'index': 'Model'})"
      ],
      "metadata": {
        "id": "XooIlSxZA3Vm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "metrics_df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "j2wGq3y0BGIM",
        "outputId": "fd5a53ae-fe42-40d7-f802-2b933c2c277e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                          Model  Accuracy  Sensitivity  Precision  F1-score  \\\n",
              "0                 Random Forest  0.673913     0.673913   0.664043  0.657444   \n",
              "1  Support Vector Machine (SVM)  0.677019     0.677019   0.722186  0.689102   \n",
              "2                 Decision Tree  0.627329     0.627329   0.644948  0.626182   \n",
              "3     K-Nearest Neighbors (KNN)  0.633540     0.633540   0.646389  0.625283   \n",
              "4           Logistic Regression  0.683230     0.683230   0.647256  0.650986   \n",
              "\n",
              "     Recall  \n",
              "0  0.673913  \n",
              "1  0.677019  \n",
              "2  0.627329  \n",
              "3  0.633540  \n",
              "4  0.683230  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-93318bd0-7de7-4288-a2e0-a6a296144ca1\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Model</th>\n",
              "      <th>Accuracy</th>\n",
              "      <th>Sensitivity</th>\n",
              "      <th>Precision</th>\n",
              "      <th>F1-score</th>\n",
              "      <th>Recall</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Random Forest</td>\n",
              "      <td>0.673913</td>\n",
              "      <td>0.673913</td>\n",
              "      <td>0.664043</td>\n",
              "      <td>0.657444</td>\n",
              "      <td>0.673913</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Support Vector Machine (SVM)</td>\n",
              "      <td>0.677019</td>\n",
              "      <td>0.677019</td>\n",
              "      <td>0.722186</td>\n",
              "      <td>0.689102</td>\n",
              "      <td>0.677019</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Decision Tree</td>\n",
              "      <td>0.627329</td>\n",
              "      <td>0.627329</td>\n",
              "      <td>0.644948</td>\n",
              "      <td>0.626182</td>\n",
              "      <td>0.627329</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>K-Nearest Neighbors (KNN)</td>\n",
              "      <td>0.633540</td>\n",
              "      <td>0.633540</td>\n",
              "      <td>0.646389</td>\n",
              "      <td>0.625283</td>\n",
              "      <td>0.633540</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Logistic Regression</td>\n",
              "      <td>0.683230</td>\n",
              "      <td>0.683230</td>\n",
              "      <td>0.647256</td>\n",
              "      <td>0.650986</td>\n",
              "      <td>0.683230</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-93318bd0-7de7-4288-a2e0-a6a296144ca1')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-93318bd0-7de7-4288-a2e0-a6a296144ca1 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-93318bd0-7de7-4288-a2e0-a6a296144ca1');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ddaa3942-f620-496d-9ced-fef406dc1fe7\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ddaa3942-f620-496d-9ced-fef406dc1fe7')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ddaa3942-f620-496d-9ced-fef406dc1fe7 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_e59237c9-9faa-4778-8635-15231f4b493b\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('metrics_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_e59237c9-9faa-4778-8635-15231f4b493b button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('metrics_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "metrics_df",
              "summary": "{\n  \"name\": \"metrics_df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Model\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Support Vector Machine (SVM)\",\n          \"Logistic Regression\",\n          \"Decision Tree\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Accuracy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.02638837985869317,\n        \"min\": 0.6273291925465838,\n        \"max\": 0.6832298136645962,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.6770186335403726,\n          0.6832298136645962,\n          0.6273291925465838\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sensitivity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.02638837985869317,\n        \"min\": 0.6273291925465838,\n        \"max\": 0.6832298136645962,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.6770186335403726,\n          0.6832298136645962,\n          0.6273291925465838\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Precision\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.03291824226850504,\n        \"min\": 0.6449484866410332,\n        \"max\": 0.7221861988942734,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.7221861988942734,\n          0.6472561450209374,\n          0.6449484866410332\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"F1-score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.02628405159840721,\n        \"min\": 0.6252826366180403,\n        \"max\": 0.689102006418571,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.689102006418571,\n          0.6509862723791331,\n          0.6261818067548025\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Recall\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.02638837985869317,\n        \"min\": 0.6273291925465838,\n        \"max\": 0.6832298136645962,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.6770186335403726,\n          0.6832298136645962,\n          0.6273291925465838\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 69
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#with both smote and dimension reduction\n"
      ],
      "metadata": {
        "id": "E_CLJrchClu0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.naive_bayes import MultinomialNB, GaussianNB\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.svm import SVC\n",
        "import xgboost as xgb\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import accuracy_score\n",
        "from sklearn.feature_extraction.text import CountVectorizer\n",
        "from sklearn.decomposition import TruncatedSVD\n",
        "from sklearn.pipeline import Pipeline\n",
        "from imblearn.over_sampling import SMOTE\n",
        "import joblib\n",
        "\n",
        "# Split data into X (symptoms) and y (disease)\n",
        "X = df_filtered['Symptoms']\n",
        "y = df_filtered['Disease']\n",
        "\n",
        "# Ensure X_train and X_test are lists of strings\n",
        "X = [str(text).lower() for text in X]\n",
        "y = [str(text).lower() for text in y]\n",
        "\n",
        "# Define a CountVectorizer\n",
        "vectorizer = CountVectorizer(binary=True)\n",
        "\n",
        "# Transform the text data into vectors\n",
        "X_train_vectors = vectorizer.fit_transform(X)\n",
        "\n",
        "# Apply SMOTE to balance the class distribution\n",
        "smote = SMOTE(random_state=42)\n",
        "X_resampled, y_resampled = SMOTE(k_neighbors=3).fit_resample(X_train_vectors, y)\n",
        "\n",
        "# Split resampled data into train and test sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)\n",
        "\n",
        "#GaussianNB()\n",
        "# Define classifiers\n",
        "classifiers = {\n",
        "    'Random Forest': RandomForestClassifier(random_state=42),\n",
        "    'Support Vector Machine (SVM)': SVC(random_state=42),\n",
        "    'Decision Tree': DecisionTreeClassifier(random_state=42),\n",
        "    'K-Nearest Neighbors (KNN)': KNeighborsClassifier(n_neighbors=15),\n",
        "    'Logistic Regression': LogisticRegression(),\n",
        "}\n",
        "\n",
        "# Initialize dictionaries to store metrics\n",
        "accuracy_dict = {}\n",
        "sensitivity_dict = {}\n",
        "precision_dict = {}\n",
        "f1_dict = {}\n",
        "recall_dict = {}\n",
        "\n",
        "# Initialize an empty DataFrame\n",
        "metrics_df = pd.DataFrame()\n",
        "metrics_df2 = pd.DataFrame()\n",
        "# Initialize an empty DataFrame\n",
        "result = pd.DataFrame()\n",
        "\n",
        "# Loop through each classifier\n",
        "for clf_name, clf in classifiers.items():\n",
        "    #print(clf_name)\n",
        "    # Define a pipeline with the current classifier\n",
        "    pipeline = Pipeline([\n",
        "        ('svd', TruncatedSVD(n_components=150)),  # Reduce dimensions using TruncatedSVD\n",
        "        ('classifier', clf)  # Classifier\n",
        "    ])\n",
        "\n",
        "    # Train the model\n",
        "    pipeline.fit(X_train, y_train)\n",
        "\n",
        "    # Predict on test data\n",
        "    y_pred = pipeline.predict(X_test)\n",
        "\n",
        "    # Classification report\n",
        "    report = classification_report(y_test, y_pred, output_dict=True, zero_division='warn')\n",
        "\n",
        "    # Extract metrics\n",
        "    accuracy_dict[clf_name] = report['accuracy']\n",
        "    sensitivity_dict[clf_name] = report['weighted avg']['recall']\n",
        "    precision_dict[clf_name] = report['weighted avg']['precision']\n",
        "    f1_dict[clf_name] = report['weighted avg']['f1-score']\n",
        "    recall_dict[clf_name] = report['weighted avg']['recall']\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "metrics_df = pd.DataFrame({\n",
        "    'Accuracy': accuracy_dict,\n",
        "    'Sensitivity': sensitivity_dict,\n",
        "    'Precision': precision_dict,\n",
        "    'F1-score': f1_dict,\n",
        "    'Recall': recall_dict\n",
        "})\n",
        "\n",
        "# Transpose the DataFrame to have algorithms as rows\n",
        "metrics_df = metrics_df.reset_index().rename(columns={'index': 'Model'})\n",
        "#metrics_df2\n"
      ],
      "metadata": {
        "id": "9MEe5X_fCsqj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "metrics_df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "6B9s6f1jHPia",
        "outputId": "331ad4a9-5695-4f77-ccbf-2e130481889f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                          Model  Accuracy  Sensitivity  Precision  F1-score  \\\n",
              "0                 Random Forest  0.910426     0.910426   0.930951  0.912483   \n",
              "1  Support Vector Machine (SVM)  0.907489     0.907489   0.942229  0.913052   \n",
              "2                 Decision Tree  0.901615     0.901615   0.937615  0.905733   \n",
              "3     K-Nearest Neighbors (KNN)  0.883994     0.883994   0.917195  0.888551   \n",
              "4           Logistic Regression  0.901615     0.901615   0.932620  0.907569   \n",
              "\n",
              "     Recall  \n",
              "0  0.910426  \n",
              "1  0.907489  \n",
              "2  0.901615  \n",
              "3  0.883994  \n",
              "4  0.901615  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c2147891-2649-4845-a281-df880e4ad727\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Model</th>\n",
              "      <th>Accuracy</th>\n",
              "      <th>Sensitivity</th>\n",
              "      <th>Precision</th>\n",
              "      <th>F1-score</th>\n",
              "      <th>Recall</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Random Forest</td>\n",
              "      <td>0.910426</td>\n",
              "      <td>0.910426</td>\n",
              "      <td>0.930951</td>\n",
              "      <td>0.912483</td>\n",
              "      <td>0.910426</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Support Vector Machine (SVM)</td>\n",
              "      <td>0.907489</td>\n",
              "      <td>0.907489</td>\n",
              "      <td>0.942229</td>\n",
              "      <td>0.913052</td>\n",
              "      <td>0.907489</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Decision Tree</td>\n",
              "      <td>0.901615</td>\n",
              "      <td>0.901615</td>\n",
              "      <td>0.937615</td>\n",
              "      <td>0.905733</td>\n",
              "      <td>0.901615</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>K-Nearest Neighbors (KNN)</td>\n",
              "      <td>0.883994</td>\n",
              "      <td>0.883994</td>\n",
              "      <td>0.917195</td>\n",
              "      <td>0.888551</td>\n",
              "      <td>0.883994</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Logistic Regression</td>\n",
              "      <td>0.901615</td>\n",
              "      <td>0.901615</td>\n",
              "      <td>0.932620</td>\n",
              "      <td>0.907569</td>\n",
              "      <td>0.901615</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c2147891-2649-4845-a281-df880e4ad727')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c2147891-2649-4845-a281-df880e4ad727 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c2147891-2649-4845-a281-df880e4ad727');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-5360159d-481d-4335-831b-7b519655a7a3\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5360159d-481d-4335-831b-7b519655a7a3')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-5360159d-481d-4335-831b-7b519655a7a3 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_ebfe3dcb-5ec2-4321-8432-2ab936ef1803\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('metrics_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_ebfe3dcb-5ec2-4321-8432-2ab936ef1803 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('metrics_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "metrics_df",
              "summary": "{\n  \"name\": \"metrics_df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Model\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Support Vector Machine (SVM)\",\n          \"Logistic Regression\",\n          \"Decision Tree\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Accuracy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.01025800246494741,\n        \"min\": 0.8839941262848752,\n        \"max\": 0.9104258443465492,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.9074889867841409,\n          0.8839941262848752,\n          0.9104258443465492\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sensitivity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.01025800246494741,\n        \"min\": 0.8839941262848752,\n        \"max\": 0.9104258443465492,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.9074889867841409,\n          0.8839941262848752,\n          0.9104258443465492\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Precision\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.009444238389362905,\n        \"min\": 0.9171945387804419,\n        \"max\": 0.9422291315226975,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.9422291315226975,\n          0.9326195723367064,\n          0.9376150249118501\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"F1-score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.009967413179833962,\n        \"min\": 0.8885510328966428,\n        \"max\": 0.913051786401064,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.913051786401064,\n          0.9075690732913085,\n          0.9057331333290095\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Recall\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.01025800246494741,\n        \"min\": 0.8839941262848752,\n        \"max\": 0.9104258443465492,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.9074889867841409,\n          0.8839941262848752,\n          0.9104258443465492\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 90
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.naive_bayes import MultinomialNB, GaussianNB\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.svm import SVC\n",
        "import xgboost as xgb\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import accuracy_score, classification_report\n",
        "from sklearn.feature_extraction.text import CountVectorizer\n",
        "from sklearn.decomposition import TruncatedSVD\n",
        "from sklearn.pipeline import Pipeline\n",
        "from imblearn.over_sampling import SMOTE\n",
        "import pandas as pd\n",
        "import joblib\n",
        "\n",
        "# Split data into X (symptoms) and y (disease)\n",
        "X = df_filtered['Symptoms']\n",
        "y = df_filtered['Disease']\n",
        "\n",
        "# Ensure X_train and X_test are lists of strings since it was giving error to convert to lower case\n",
        "X = [str(text).lower() for text in X]\n",
        "y = [str(text).lower() for text in y]\n",
        "\n",
        "\n",
        "# Convert text data to sparse matrix using CountVectorizer\n",
        "vectorizer = CountVectorizer()\n",
        "X_train_vectors = vectorizer.fit_transform(X)\n",
        "\n",
        "# Apply SMOTE to balance the class distribution\n",
        "smote = SMOTE(random_state=42)\n",
        "X_resampled, y_resampled = SMOTE(k_neighbors=3).fit_resample(X_train_vectors, y)\n",
        "\n",
        "# Split data into train and test sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)\n",
        "\n",
        "\n",
        "# Convert sparse matrix to dense for GaussianNB\n",
        "X_train_dense = X_train.toarray()  # Now it's dense\n",
        "X_test_dense = X_test.toarray()  # Dense test set\n",
        "\n",
        "# Define a pipeline with different classifiers\n",
        "classifiers = {\n",
        "    'Gaussian Naive Bayes': GaussianNB(),\n",
        "}\n",
        "\n",
        "# Initialize dictionaries to store metrics\n",
        "accuracy_dict = {}\n",
        "sensitivity_dict = {}\n",
        "precision_dict = {}\n",
        "f1_dict = {}\n",
        "recall_dict = {}\n",
        "\n",
        "# Initialize an empty DataFrame\n",
        "metrics_df2 = pd.DataFrame()\n",
        "\n",
        "# Test accuracy for each classifier\n",
        "for clf_name, clf in classifiers.items():\n",
        "    # Define the pipeline with classifier\n",
        "    pipeline = Pipeline([\n",
        "        ('svd', TruncatedSVD(n_components=150)),  # Reduce dimensions using TruncatedSVD\n",
        "        ('classifier', clf)  # Classifier to use\n",
        "    ])\n",
        "\n",
        "    # Fit the model\n",
        "    pipeline.fit(X_train_dense, y_train)\n",
        "\n",
        "    # Predict on test data\n",
        "    y_pred = pipeline.predict(X_test_dense)\n",
        "\n",
        "    # Classification report\n",
        "    report = classification_report(y_test, y_pred, output_dict=True, zero_division='warn')\n",
        "\n",
        "    # Extract metrics\n",
        "    accuracy_dict[clf_name] = report['accuracy']\n",
        "    sensitivity_dict[clf_name] = report['weighted avg']['recall']\n",
        "    precision_dict[clf_name] = report['weighted avg']['precision']\n",
        "    f1_dict[clf_name] = report['weighted avg']['f1-score']\n",
        "    recall_dict[clf_name] = report['weighted avg']['recall']\n",
        "\n",
        "# Creating a DataFrame for the metrics\n",
        "metrics_df2 = pd.DataFrame({\n",
        "    'Accuracy': accuracy_dict,\n",
        "    'Sensitivity': sensitivity_dict,\n",
        "    'Precision': precision_dict,\n",
        "    'F1-score': f1_dict,\n",
        "    'Recall': recall_dict\n",
        "})\n",
        "\n",
        "# Transpose the DataFrame to have algorithms as rows\n",
        "metrics_df2 = metrics_df2.reset_index().rename(columns={'index': 'Model'})\n"
      ],
      "metadata": {
        "id": "CZFgXLz9DYoo"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#concatenate df\n",
        "result = pd.concat([metrics_df, metrics_df2], axis=0, ignore_index=True)"
      ],
      "metadata": {
        "id": "qb1fo34uDnU2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "result"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 237
        },
        "id": "z5olUMxoDoO_",
        "outputId": "e56581e8-d603-4fbd-d338-58744d588fe8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                          Model  Accuracy  Sensitivity  Precision  F1-score  \\\n",
              "0                 Random Forest  0.910426     0.910426   0.931422  0.913428   \n",
              "1  Support Vector Machine (SVM)  0.900147     0.900147   0.940074  0.906760   \n",
              "2                 Decision Tree  0.908957     0.908957   0.934534  0.911933   \n",
              "3     K-Nearest Neighbors (KNN)  0.886931     0.886931   0.919105  0.892274   \n",
              "4           Logistic Regression  0.900147     0.900147   0.933455  0.907150   \n",
              "5          Gaussian Naive Bayes  0.894273     0.894273   0.933083  0.900382   \n",
              "\n",
              "     Recall  \n",
              "0  0.910426  \n",
              "1  0.900147  \n",
              "2  0.908957  \n",
              "3  0.886931  \n",
              "4  0.900147  \n",
              "5  0.894273  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4adb61ac-8c71-4344-9e08-343289ba8eca\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Model</th>\n",
              "      <th>Accuracy</th>\n",
              "      <th>Sensitivity</th>\n",
              "      <th>Precision</th>\n",
              "      <th>F1-score</th>\n",
              "      <th>Recall</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Random Forest</td>\n",
              "      <td>0.910426</td>\n",
              "      <td>0.910426</td>\n",
              "      <td>0.931422</td>\n",
              "      <td>0.913428</td>\n",
              "      <td>0.910426</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Support Vector Machine (SVM)</td>\n",
              "      <td>0.900147</td>\n",
              "      <td>0.900147</td>\n",
              "      <td>0.940074</td>\n",
              "      <td>0.906760</td>\n",
              "      <td>0.900147</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Decision Tree</td>\n",
              "      <td>0.908957</td>\n",
              "      <td>0.908957</td>\n",
              "      <td>0.934534</td>\n",
              "      <td>0.911933</td>\n",
              "      <td>0.908957</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>K-Nearest Neighbors (KNN)</td>\n",
              "      <td>0.886931</td>\n",
              "      <td>0.886931</td>\n",
              "      <td>0.919105</td>\n",
              "      <td>0.892274</td>\n",
              "      <td>0.886931</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Logistic Regression</td>\n",
              "      <td>0.900147</td>\n",
              "      <td>0.900147</td>\n",
              "      <td>0.933455</td>\n",
              "      <td>0.907150</td>\n",
              "      <td>0.900147</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Gaussian Naive Bayes</td>\n",
              "      <td>0.894273</td>\n",
              "      <td>0.894273</td>\n",
              "      <td>0.933083</td>\n",
              "      <td>0.900382</td>\n",
              "      <td>0.894273</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4adb61ac-8c71-4344-9e08-343289ba8eca')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4adb61ac-8c71-4344-9e08-343289ba8eca button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4adb61ac-8c71-4344-9e08-343289ba8eca');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-0827a12c-9057-4094-995d-037922988ff5\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0827a12c-9057-4094-995d-037922988ff5')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-0827a12c-9057-4094-995d-037922988ff5 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_73be69ea-5065-49aa-bc60-ac2b721221a1\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('result')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_73be69ea-5065-49aa-bc60-ac2b721221a1 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('result');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "result",
              "summary": "{\n  \"name\": \"result\",\n  \"rows\": 6,\n  \"fields\": [\n    {\n      \"column\": \"Model\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"Random Forest\",\n          \"Support Vector Machine (SVM)\",\n          \"Gaussian Naive Bayes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Accuracy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.00885938509779638,\n        \"min\": 0.8869309838472834,\n        \"max\": 0.9104258443465492,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.9001468428781204,\n          0.8942731277533039,\n          0.908957415565345\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sensitivity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.00885938509779638,\n        \"min\": 0.8869309838472834,\n        \"max\": 0.9104258443465492,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.9001468428781204,\n          0.8942731277533039,\n          0.908957415565345\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Precision\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.006949921836744573,\n        \"min\": 0.9191048668382759,\n        \"max\": 0.940074242871955,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.9314215520162656,\n          0.940074242871955,\n          0.9330827762545825\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"F1-score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.007867356028900506,\n        \"min\": 0.8922740848988178,\n        \"max\": 0.9134277031988751,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.9134277031988751,\n          0.9067599819750182,\n          0.9003815354157684\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Recall\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.00885938509779638,\n        \"min\": 0.8869309838472834,\n        \"max\": 0.9104258443465492,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.9001468428781204,\n          0.8942731277533039,\n          0.908957415565345\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 102
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#barchart"
      ],
      "metadata": {
        "id": "uQLVpv-2KNMT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "# Assuming 'metrics_df' is your DataFrame with the data\n",
        "# Melt the DataFrame to have a long-form DataFrame for easier plotting with Seaborn\n",
        "results_melted = result.melt(id_vars='Model', var_name='Metric', value_name='Value')\n",
        "\n",
        "# Define a color palette with 6 distinct colors\n",
        "colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b']  # Blue, orange, green, red, purple, brown\n",
        "\n",
        "# Plot the metrics for each model\n",
        "plt.figure(figsize=(17, 12))\n",
        "sns.barplot(x='Metric', y='Value', hue='Model', data=results_melted, palette=colors)\n",
        "plt.title('Model Performance Metrics using classification report')\n",
        "plt.xlabel('Metric')\n",
        "plt.ylabel('Value')\n",
        "plt.legend(title='Model', bbox_to_anchor=(1.05, 1), loc='upper left')\n",
        "plt.xticks(rotation=45)\n",
        "\n",
        "# Set y-axis limits and intervals\n",
        "max_value = results_melted['Value'].max()\n",
        "plt.ylim(0, max_value + 0.1)\n",
        "plt.yticks(np.arange(0, max_value + 0.1, 0.1))  # Set y-axis ticks at intervals of 0.1\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "TPdX567WKPoC",
        "outputId": "cc36e97c-2354-4820-bb68-71c16e802c8d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1700x1200 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#ensemble\n"
      ],
      "metadata": {
        "id": "ChE1UobcDvIn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import joblib\n",
        "from sklearn.feature_extraction.text import CountVectorizer\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score, classification_report\n",
        "from sklearn.ensemble import VotingClassifier\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from imblearn.over_sampling import SMOTE\n",
        "from sklearn.decomposition import TruncatedSVD\n",
        "\n",
        "# Assuming you have already defined your DataFrame 'df' containing 'Symptoms' and 'Disease' columns\n",
        "X = df_filtered['Symptoms']\n",
        "y = df_filtered['Disease']\n",
        "\n",
        "# Ensure X_train and X_test are lists of strings\n",
        "X = [str(text).lower() for text in X]\n",
        "y = [str(text).lower() for text in y]\n",
        "\n",
        "# Define a CountVectorizer\n",
        "vectorizer = CountVectorizer(binary=True)\n",
        "\n",
        "# Transform the text data into vectors\n",
        "X_train_vectors = vectorizer.fit_transform(X)\n",
        "\n",
        "# Apply SMOTE to balance the class distribution\n",
        "smote = SMOTE(random_state=42)\n",
        "X_resampled, y_resampled = SMOTE(k_neighbors=3).fit_resample(X_train_vectors, y)\n",
        "\n",
        "# Split resampled data into train and test sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)\n",
        "\n",
        "#choosing top 3 based on precsion since false prediciton can cost life and lot of money\n",
        "# Define base classifiers\n",
        "classifiers = [\n",
        "    ('Random Forest', RandomForestClassifier(random_state=42)),\n",
        "    ('Support Vector Machine (SVM)', SVC(random_state=42, probability=True)),\n",
        "    #('K-Nearest Neighbors (KNN)', KNeighborsClassifier(n_neighbors=25))\n",
        "    ('Logistic Regression', LogisticRegression())\n",
        "]\n",
        "\n",
        "# Initialize dictionaries to store metrics\n",
        "metrics_dict = {\n",
        "    'Model': [],\n",
        "    'Accuracy': [],\n",
        "    'Sensitivity': [],\n",
        "    'Precision': [],\n",
        "    'F1-score': [],\n",
        "    'Recall': []\n",
        "}\n",
        "\n",
        "# Initialize an empty DataFrame\n",
        "metrics_df = pd.DataFrame()\n",
        "metrics_df2 = pd.DataFrame()\n",
        "# Initialize an empty DataFrame\n",
        "result = pd.DataFrame()\n",
        "\n",
        "# Train each base classifier separately\n",
        "base_classifiers = []\n",
        "accuracies = []\n",
        "for clf_name, clf in classifiers:\n",
        "    # Define the pipeline with the predefined vectorizer and current classifier\n",
        "    pipeline = Pipeline([\n",
        "        ('svd', TruncatedSVD(n_components=150)),\n",
        "        ('classifier', clf)\n",
        "    ])\n",
        "\n",
        "    # Train the model\n",
        "    pipeline.fit(X_train, y_train)\n",
        "\n",
        "    # Predict on test data\n",
        "    y_pred = pipeline.predict(X_test)\n",
        "\n",
        "    # Evaluate the model\n",
        "    accuracy = accuracy_score(y_test, y_pred)\n",
        "    accuracies.append(accuracy)\n",
        "\n",
        "    # Save the trained model\n",
        "    base_classifiers.append((clf_name, pipeline))\n",
        "\n",
        "# Calculate weights based on accuracies\n",
        "weights = [acc / sum(accuracies) for acc in accuracies]\n",
        "\n",
        "# Define voting options\n",
        "voting_options = ['hard', 'soft']\n",
        "\n",
        "# Loop over each voting option\n",
        "for voting_option in voting_options:\n",
        "    # Create the ensemble classifier with the specified voting option\n",
        "    ensemble_classifier = VotingClassifier(estimators=base_classifiers, voting=voting_option, weights=weights)\n",
        "    ensemble_classifier.fit(X_train, y_train)\n",
        "\n",
        "    # Predict on test data\n",
        "    y_pred_ensemble = ensemble_classifier.predict(X_test)\n",
        "\n",
        "    # Evaluate the ensemble classifier\n",
        "    report_ensemble = classification_report(y_test, y_pred_ensemble, output_dict=True, zero_division=0)\n",
        "\n",
        "    # Store metrics for ensemble\n",
        "    metrics_dict['Model'].append(f'Ensemble ({voting_option.capitalize()})')\n",
        "    metrics_dict['Accuracy'].append(report_ensemble['accuracy'])\n",
        "    metrics_dict['Sensitivity'].append(report_ensemble['weighted avg']['recall'])\n",
        "    metrics_dict['Precision'].append(report_ensemble['weighted avg']['precision'])\n",
        "    metrics_dict['F1-score'].append(report_ensemble['weighted avg']['f1-score'])\n",
        "    metrics_dict['Recall'].append(report_ensemble['weighted avg']['recall'])\n",
        "\n",
        "# Create a DataFrame from the metrics dictionary\n",
        "metrics_df = pd.DataFrame(metrics_dict)\n",
        "\n",
        "# Transpose the DataFrame to have algorithms as rows\n",
        "metrics_df = metrics_df.reset_index(drop=True)\n",
        "\n",
        "# Save the pipeline and the vectorizer as pkl files\n",
        "joblib.dump(ensemble_classifier, 'ensemble_classifier.pkl')\n",
        "joblib.dump(vectorizer, 'count_vectorizer.pkl')"
      ],
      "metadata": {
        "id": "qCl1E7XMDw-a",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "51647601-43dd-4be1-b11c-09b4176fe427"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['count_vectorizer.pkl']"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "metrics_df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 125
        },
        "id": "BImVZTukHcxX",
        "outputId": "7bee9bc7-8134-4599-dc91-76fc8687d2f4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             Model  Accuracy  Sensitivity  Precision  F1-score    Recall\n",
              "0  Ensemble (Hard)  0.903084     0.903084   0.929315  0.904675  0.903084\n",
              "1  Ensemble (Soft)  0.910426     0.910426   0.936698  0.913009  0.910426"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-95c7725b-c769-4d9d-8a41-84a4d9547bcd\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Model</th>\n",
              "      <th>Accuracy</th>\n",
              "      <th>Sensitivity</th>\n",
              "      <th>Precision</th>\n",
              "      <th>F1-score</th>\n",
              "      <th>Recall</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Ensemble (Hard)</td>\n",
              "      <td>0.903084</td>\n",
              "      <td>0.903084</td>\n",
              "      <td>0.929315</td>\n",
              "      <td>0.904675</td>\n",
              "      <td>0.903084</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Ensemble (Soft)</td>\n",
              "      <td>0.910426</td>\n",
              "      <td>0.910426</td>\n",
              "      <td>0.936698</td>\n",
              "      <td>0.913009</td>\n",
              "      <td>0.910426</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-95c7725b-c769-4d9d-8a41-84a4d9547bcd')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-95c7725b-c769-4d9d-8a41-84a4d9547bcd button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-95c7725b-c769-4d9d-8a41-84a4d9547bcd');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-4ad2900c-1a60-40eb-a221-f5d82f204fd6\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4ad2900c-1a60-40eb-a221-f5d82f204fd6')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-4ad2900c-1a60-40eb-a221-f5d82f204fd6 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_a4cec9ac-3989-4ec6-967f-9594d378040b\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('metrics_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_a4cec9ac-3989-4ec6-967f-9594d378040b button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('metrics_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "metrics_df",
              "summary": "{\n  \"name\": \"metrics_df\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"Model\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Ensemble (Soft)\",\n          \"Ensemble (Hard)\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Accuracy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0051916797443945836,\n        \"min\": 0.9030837004405287,\n        \"max\": 0.9104258443465492,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.9104258443465492,\n          0.9030837004405287\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sensitivity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0051916797443945836,\n        \"min\": 0.9030837004405287,\n        \"max\": 0.9104258443465492,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.9104258443465492,\n          0.9030837004405287\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Precision\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0052210834322771685,\n        \"min\": 0.9293147107995515,\n        \"max\": 0.9366984377997594,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.9366984377997594,\n          0.9293147107995515\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"F1-score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.00589322851763056,\n        \"min\": 0.9046747811790362,\n        \"max\": 0.9130090648748332,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.9130090648748332,\n          0.9046747811790362\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Recall\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0051916797443945836,\n        \"min\": 0.9030837004405287,\n        \"max\": 0.9104258443465492,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.9104258443465492,\n          0.9030837004405287\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 94
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#cross validation"
      ],
      "metadata": {
        "id": "UIwjcV0P6MUd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import joblib\n",
        "from sklearn.feature_extraction.text import CountVectorizer\n",
        "from sklearn.model_selection import train_test_split, cross_val_predict, StratifiedKFold\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score, classification_report\n",
        "from sklearn.ensemble import VotingClassifier\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from imblearn.over_sampling import SMOTE\n",
        "from sklearn.decomposition import TruncatedSVD\n",
        "\n",
        "# Assuming you have already defined your DataFrame 'df' containing 'Symptoms' and 'Disease' columns\n",
        "X = df_filtered['Symptoms']\n",
        "y = df_filtered['Disease']\n",
        "\n",
        "\n",
        "# Ensure X_train and X_test are lists of strings\n",
        "X = [str(text).lower() for text in X]\n",
        "y = [str(text).lower() for text in y]\n",
        "\n",
        "# Define a CountVectorizer\n",
        "vectorizer = CountVectorizer(binary=True)\n",
        "\n",
        "# Transform the text data into vectors\n",
        "X_train_vectors = vectorizer.fit_transform(X)\n",
        "\n",
        "# Apply SMOTE to balance the class distribution\n",
        "smote = SMOTE(random_state=42)\n",
        "X_resampled, y_resampled = SMOTE(k_neighbors=3).fit_resample(X_train_vectors, y)\n",
        "\n",
        "# Split resampled data into train and test sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)\n",
        "\n",
        "\n",
        "# Split resampled data into train and test sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)\n",
        "\n",
        "# Define base classifiers\n",
        "classifiers = [\n",
        "    ('Random Forest', RandomForestClassifier(random_state=42)),\n",
        "    ('Support Vector Machine (SVM)', SVC(random_state=42, probability=True)),\n",
        "    ('Logistic Regression', LogisticRegression())\n",
        "]\n",
        "\n",
        "# Initialize dictionaries to store metrics\n",
        "metrics_dict = {\n",
        "    'Model': [],\n",
        "    'Accuracy': [],\n",
        "    'Sensitivity': [],\n",
        "    'Precision': [],\n",
        "    'F1-score': [],\n",
        "    'Recall': []\n",
        "}\n",
        "\n",
        "# Initialize a StratifiedKFold for cross-validation\n",
        "kf_5 = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n",
        "kf_10 = StratifiedKFold(n_splits=10, shuffle=True, random_state=42)\n",
        "\n",
        "# Train each base classifier separately with cross-validation\n",
        "for clf_name, clf in classifiers:\n",
        "    # Define the pipeline with the predefined vectorizer and current classifier\n",
        "    pipeline = Pipeline([\n",
        "        ('svd', TruncatedSVD(n_components=150)),\n",
        "        ('classifier', clf)\n",
        "    ])\n",
        "\n",
        "    # Cross-validated predictions for k=5\n",
        "    y_pred_5 = cross_val_predict(pipeline, X_resampled, y_resampled, cv=kf_5)\n",
        "    accuracy_5 = accuracy_score(y_resampled, y_pred_5)\n",
        "    sensitivity_5 = recall_score(y_resampled, y_pred_5, average='weighted')\n",
        "    precision_5 = precision_score(y_resampled, y_pred_5, average='weighted')\n",
        "    f1_score_5 = f1_score(y_resampled, y_pred_5, average='weighted')\n",
        "\n",
        "    # Store metrics for k=5\n",
        "    metrics_dict['Model'].append(f'{clf_name} (CV=5)')\n",
        "    metrics_dict['Accuracy'].append(accuracy_5)\n",
        "    metrics_dict['Sensitivity'].append(sensitivity_5)\n",
        "    metrics_dict['Precision'].append(precision_5)\n",
        "    metrics_dict['F1-score'].append(f1_score_5)\n",
        "    metrics_dict['Recall'].append(sensitivity_5)  # Recall is the same as Sensitivity\n",
        "\n",
        "    # Cross-validated predictions for k=10\n",
        "    y_pred_10 = cross_val_predict(pipeline, X_resampled, y_resampled, cv=kf_10)\n",
        "    accuracy_10 = accuracy_score(y_resampled, y_pred_10)\n",
        "    sensitivity_10 = recall_score(y_resampled, y_pred_10, average='weighted')\n",
        "    precision_10 = precision_score(y_resampled, y_pred_10, average='weighted')\n",
        "    f1_score_10 = f1_score(y_resampled, y_pred_10, average='weighted')\n",
        "\n",
        "    # Store metrics for k=10\n",
        "    metrics_dict['Model'].append(f'{clf_name} (CV=10)')\n",
        "    metrics_dict['Accuracy'].append(accuracy_10)\n",
        "    metrics_dict['Sensitivity'].append(sensitivity_10)\n",
        "    metrics_dict['Precision'].append(precision_10)\n",
        "    metrics_dict['F1-score'].append(f1_score_10)\n",
        "    metrics_dict['Recall'].append(sensitivity_10)\n",
        "\n",
        "# Calculate weights based on accuracies for the ensemble\n",
        "weights = [1 / len(classifiers)] * len(classifiers)  # Equal weights for ensemble\n",
        "\n",
        "# Define voting options\n",
        "voting_options = ['hard', 'soft']\n",
        "\n",
        "# Loop over each voting option\n",
        "for voting_option in voting_options:\n",
        "    # Create the ensemble classifier with the specified voting option\n",
        "    ensemble_classifier = VotingClassifier(estimators=classifiers, voting=voting_option, weights=weights)\n",
        "\n",
        "    # Cross-validated predictions for ensemble classifier for k=5\n",
        "    y_pred_ensemble_5 = cross_val_predict(ensemble_classifier, X_resampled, y_resampled, cv=kf_5)\n",
        "    accuracy_ensemble_5 = accuracy_score(y_resampled, y_pred_ensemble_5)\n",
        "    sensitivity_ensemble_5 = recall_score(y_resampled, y_pred_ensemble_5, average='weighted')\n",
        "    precision_ensemble_5 = precision_score(y_resampled, y_pred_ensemble_5, average='weighted')\n",
        "    f1_score_ensemble_5 = f1_score(y_resampled, y_pred_ensemble_5, average='weighted')\n",
        "\n",
        "    # Store metrics for ensemble (k=5)\n",
        "    metrics_dict['Model'].append(f'Ensemble ({voting_option.capitalize()}) (CV=5)')\n",
        "    metrics_dict['Accuracy'].append(accuracy_ensemble_5)\n",
        "    metrics_dict['Sensitivity'].append(sensitivity_ensemble_5)\n",
        "    metrics_dict['Precision'].append(precision_ensemble_5)\n",
        "    metrics_dict['F1-score'].append(f1_score_ensemble_5)\n",
        "    metrics_dict['Recall'].append(sensitivity_ensemble_5)\n",
        "\n",
        "    # Cross-validated predictions for ensemble classifier for k=10\n",
        "    y_pred_ensemble_10 = cross_val_predict(ensemble_classifier, X_resampled, y_resampled, cv=kf_10)\n",
        "    accuracy_ensemble_10 = accuracy_score(y_resampled, y_pred_ensemble_10)\n",
        "    sensitivity_ensemble_10 = recall_score(y_resampled, y_pred_ensemble_10, average='weighted')\n",
        "    precision_ensemble_10 = precision_score(y_resampled, y_pred_ensemble_10, average='weighted')\n",
        "    f1_score_ensemble_10 = f1_score(y_resampled, y_pred_ensemble_10, average='weighted')\n",
        "\n",
        "    # Store metrics for ensemble (k=10)\n",
        "    metrics_dict['Model'].append(f'Ensemble ({voting_option.capitalize()}) (CV=10)')\n",
        "    metrics_dict['Accuracy'].append(accuracy_ensemble_10)\n",
        "    metrics_dict['Sensitivity'].append(sensitivity_ensemble_10)\n",
        "    metrics_dict['Precision'].append(precision_ensemble_10)\n",
        "    metrics_dict['F1-score'].append(f1_score_ensemble_10)\n",
        "    metrics_dict['Recall'].append(sensitivity_ensemble_10)\n",
        "\n",
        "# Create a DataFrame from the metrics dictionary\n",
        "metrics_df = pd.DataFrame(metrics_dict)\n",
        "\n",
        "# Transpose the DataFrame to have algorithms as rows\n",
        "metrics_df = metrics_df.reset_index(drop=True)\n",
        "\n",
        "# Display the metrics DataFrame\n",
        "#print(metrics_df)\n"
      ],
      "metadata": {
        "id": "onue710vIBHZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "metrics_df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "UDOGSsbgLIAl",
        "outputId": "79599349-4622-4340-d978-38ea37873a27"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                  Model  Accuracy  Sensitivity  Precision  \\\n",
              "0                  Random Forest (CV=5)  0.907168     0.907168   0.931661   \n",
              "1                 Random Forest (CV=10)  0.910987     0.910987   0.935605   \n",
              "2   Support Vector Machine (SVM) (CV=5)  0.901586     0.901586   0.935392   \n",
              "3  Support Vector Machine (SVM) (CV=10)  0.903643     0.903643   0.935357   \n",
              "4            Logistic Regression (CV=5)  0.901586     0.901586   0.931074   \n",
              "5           Logistic Regression (CV=10)  0.902468     0.902468   0.933611   \n",
              "6                Ensemble (Hard) (CV=5)  0.905699     0.905699   0.932428   \n",
              "7               Ensemble (Hard) (CV=10)  0.905405     0.905405   0.931251   \n",
              "8                Ensemble (Soft) (CV=5)  0.910106     0.910106   0.934039   \n",
              "9               Ensemble (Soft) (CV=10)  0.912162     0.912162   0.941754   \n",
              "\n",
              "   F1-score    Recall  \n",
              "0  0.912436  0.907168  \n",
              "1  0.915391  0.910987  \n",
              "2  0.909886  0.901586  \n",
              "3  0.911491  0.903643  \n",
              "4  0.908107  0.901586  \n",
              "5  0.909015  0.902468  \n",
              "6  0.911994  0.905699  \n",
              "7  0.911178  0.905405  \n",
              "8  0.915991  0.910106  \n",
              "9  0.917435  0.912162  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2689ba9c-f385-4c57-98b5-fd2702342c3a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Model</th>\n",
              "      <th>Accuracy</th>\n",
              "      <th>Sensitivity</th>\n",
              "      <th>Precision</th>\n",
              "      <th>F1-score</th>\n",
              "      <th>Recall</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Random Forest (CV=5)</td>\n",
              "      <td>0.907168</td>\n",
              "      <td>0.907168</td>\n",
              "      <td>0.931661</td>\n",
              "      <td>0.912436</td>\n",
              "      <td>0.907168</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Random Forest (CV=10)</td>\n",
              "      <td>0.910987</td>\n",
              "      <td>0.910987</td>\n",
              "      <td>0.935605</td>\n",
              "      <td>0.915391</td>\n",
              "      <td>0.910987</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Support Vector Machine (SVM) (CV=5)</td>\n",
              "      <td>0.901586</td>\n",
              "      <td>0.901586</td>\n",
              "      <td>0.935392</td>\n",
              "      <td>0.909886</td>\n",
              "      <td>0.901586</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Support Vector Machine (SVM) (CV=10)</td>\n",
              "      <td>0.903643</td>\n",
              "      <td>0.903643</td>\n",
              "      <td>0.935357</td>\n",
              "      <td>0.911491</td>\n",
              "      <td>0.903643</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Logistic Regression (CV=5)</td>\n",
              "      <td>0.901586</td>\n",
              "      <td>0.901586</td>\n",
              "      <td>0.931074</td>\n",
              "      <td>0.908107</td>\n",
              "      <td>0.901586</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Logistic Regression (CV=10)</td>\n",
              "      <td>0.902468</td>\n",
              "      <td>0.902468</td>\n",
              "      <td>0.933611</td>\n",
              "      <td>0.909015</td>\n",
              "      <td>0.902468</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Ensemble (Hard) (CV=5)</td>\n",
              "      <td>0.905699</td>\n",
              "      <td>0.905699</td>\n",
              "      <td>0.932428</td>\n",
              "      <td>0.911994</td>\n",
              "      <td>0.905699</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Ensemble (Hard) (CV=10)</td>\n",
              "      <td>0.905405</td>\n",
              "      <td>0.905405</td>\n",
              "      <td>0.931251</td>\n",
              "      <td>0.911178</td>\n",
              "      <td>0.905405</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Ensemble (Soft) (CV=5)</td>\n",
              "      <td>0.910106</td>\n",
              "      <td>0.910106</td>\n",
              "      <td>0.934039</td>\n",
              "      <td>0.915991</td>\n",
              "      <td>0.910106</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Ensemble (Soft) (CV=10)</td>\n",
              "      <td>0.912162</td>\n",
              "      <td>0.912162</td>\n",
              "      <td>0.941754</td>\n",
              "      <td>0.917435</td>\n",
              "      <td>0.912162</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2689ba9c-f385-4c57-98b5-fd2702342c3a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2689ba9c-f385-4c57-98b5-fd2702342c3a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2689ba9c-f385-4c57-98b5-fd2702342c3a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-1ebd5ff5-979a-44da-962b-faee4fba9305\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1ebd5ff5-979a-44da-962b-faee4fba9305')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-1ebd5ff5-979a-44da-962b-faee4fba9305 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_0da6c2fd-a96a-4783-bdbd-f5406f3d8726\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('metrics_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_0da6c2fd-a96a-4783-bdbd-f5406f3d8726 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('metrics_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "metrics_df",
              "summary": "{\n  \"name\": \"metrics_df\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"Model\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"Ensemble (Soft) (CV=5)\",\n          \"Random Forest (CV=10)\",\n          \"Logistic Regression (CV=10)\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Accuracy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.003921975833330169,\n        \"min\": 0.9015863689776733,\n        \"max\": 0.9121621621621622,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          0.9101057579318449,\n          0.9109870740305523,\n          0.9056991774383079\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sensitivity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.003921975833330169,\n        \"min\": 0.9015863689776733,\n        \"max\": 0.9121621621621622,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          0.9101057579318449,\n          0.9109870740305523,\n          0.9056991774383079\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Precision\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.003166217327120913,\n        \"min\": 0.9310737282607,\n        \"max\": 0.9417543936275447,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          0.9340389796836167,\n          0.9356048046418332,\n          0.933611267584555\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"F1-score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0030870658182630332,\n        \"min\": 0.9081074141348676,\n        \"max\": 0.9174354957933112,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          0.915990927340166,\n          0.9153905710461826,\n          0.9090152268554735\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Recall\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.003921975833330169,\n        \"min\": 0.9015863689776733,\n        \"max\": 0.9121621621621622,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          0.9101057579318449,\n          0.9109870740305523,\n          0.9056991774383079\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 107
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "# Filter the metrics DataFrame for hard and soft voting models\n",
        "voting_models_df = metrics_df[metrics_df['Model'].str.contains('Ensemble')]\n",
        "\n",
        "# Melt the DataFrame to have a long-form DataFrame for easier plotting with Seaborn\n",
        "results_melted = voting_models_df.melt(id_vars='Model', var_name='Metric', value_name='Value')\n",
        "\n",
        "# Define a color palette for different models (4 colors)\n",
        "colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728']  # Blue, orange, green, red\n",
        "\n",
        "# Plot the metrics for each voting model\n",
        "plt.figure(figsize=(12, 8))\n",
        "sns.barplot(x='Metric', y='Value', hue='Model', data=results_melted, palette=colors)\n",
        "plt.title('Performance Metrics for Ensemble Models (Hard Voting vs Soft Voting)')\n",
        "plt.xlabel('Metric')\n",
        "plt.ylabel('Value')\n",
        "plt.legend(title='Model', bbox_to_anchor=(1.05, 1), loc='upper left')\n",
        "plt.xticks(rotation=45)\n",
        "\n",
        "# Set y-axis limits and intervals\n",
        "max_value = results_melted['Value'].max()\n",
        "plt.ylim(0, max_value + 0.1)\n",
        "plt.yticks(np.arange(0, max_value + 0.1, 0.1))  # Set y-axis ticks at intervals of 0.1\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 827
        },
        "id": "GD6dzSH6PVL2",
        "outputId": "33c0fea2-5ec4-47ec-f09a-e650112da4f2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#user input need to load pkl file"
      ],
      "metadata": {
        "id": "Za9iXdShJ5at"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import joblib\n",
        "\n",
        "# Load the trained model\n",
        "model = joblib.load('ensemble_classifier.pkl')\n",
        "vectorizer = joblib.load('count_vectorizer.pkl')\n",
        "\n",
        "# Function to predict disease based on user symptoms\n",
        "def predict_disease(user_symptoms):\n",
        "    # Preprocess user input\n",
        "    processed_symptoms = preprocess_text(user_symptoms)\n",
        "\n",
        "    print(processed_symptoms)\n",
        "\n",
        "    # Vectorize user input using the same CountVectorizer\n",
        "    user_symptoms_vectorized = vectorizer.transform([processed_symptoms])\n",
        "    #print(user_symptoms_vectorized)\n",
        "\n",
        "    # Predict disease using the trained model\n",
        "    predicted_disease = model.predict(user_symptoms_vectorized)\n",
        "\n",
        "    return predicted_disease[0]\n",
        "\n",
        "# Example usage\n",
        "#user_input = input(\"Enter symptoms separated by commas: \")\n",
        "user_input=\"fever, headache, fatigue, anxiety, confusion, hallucinations, difficulty swallowing\"\n",
        "#\"Joint pain, Stiffness, Swelling around the affected joints, Limited range of motion in the joints\"\n",
        "predicted_disease = predict_disease(user_input)\n",
        "print(\"Predicted disease:\", predicted_disease)\n"
      ],
      "metadata": {
        "id": "aIsqb01RJ9h8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ad583110-6cb1-4338-fe17-c460a702a903"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "fever, headache, fatigue, anxiety, confusion, hallucination, difficulty_swallow\n",
            "Predicted disease: rabies\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#common symptoms"
      ],
      "metadata": {
        "id": "3h8sMC0csw0A"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from collections import Counter\n",
        "\n",
        "# Split the symptoms into a list of individual symptoms\n",
        "df['Symptoms'] = df['Symptoms'].str.split(',')\n",
        "\n",
        "# Flatten the list of symptoms, convert to lowercase, and strip whitespace\n",
        "symptom_list = df['Symptoms'].explode().str.lower().str.strip()\n",
        "\n",
        "# Count the occurrences of each symptom\n",
        "symptom_counts = Counter(symptom_list)\n",
        "\n",
        "# Convert the symptom counts to a DataFrame\n",
        "symptom_counts_df = pd.DataFrame(symptom_counts.items(), columns=['Symptom', 'Count'])\n",
        "\n",
        "# Sort the DataFrame by count in descending order\n",
        "symptom_counts_df = symptom_counts_df.sort_values(by='Count', ascending=False).reset_index(drop=True)\n",
        "\n",
        "# Display the resulting DataFrame\n",
        "print(symptom_counts_df)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-55kk-y8szdP",
        "outputId": "1163cb23-eb95-41a5-c907-4a940dae90c8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                       Symptom  Count\n",
            "0                      fatigue    629\n",
            "1                        vomit    423\n",
            "2                       nausea    329\n",
            "3                loss_appetite    271\n",
            "4                   high_fever    262\n",
            "...                        ...    ...\n",
            "1018             eye_discharge      1\n",
            "1019  recurrent_eye_infections      1\n",
            "1020            discharge_nose      1\n",
            "1021                 discharge      1\n",
            "1022          mental_confusion      1\n",
            "\n",
            "[1023 rows x 2 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "# Assuming 'symptom_counts_df' is your DataFrame containing symptom data\n",
        "# Select the top n most common symptoms\n",
        "top_n = 50  # Change this value to select a different number of top symptoms\n",
        "top_symptoms_df = symptom_counts_df.head(top_n)\n",
        "\n",
        "# Normalize the counts for color mapping\n",
        "norm = plt.Normalize(top_symptoms_df['Count'].min(), top_symptoms_df['Count'].max())\n",
        "colors = plt.cm.viridis(norm(top_symptoms_df['Count']))\n",
        "\n",
        "# Plot the DataFrame with symptoms on the y-axis and color gradient\n",
        "plt.figure(figsize=(10, 8))\n",
        "plt.barh(top_symptoms_df['Symptom'], top_symptoms_df['Count'], color=colors)\n",
        "plt.title(f'Top {top_n} Most Common Symptoms Across All Health Conditions')\n",
        "plt.xlabel('Count')\n",
        "plt.ylabel('Symptoms')\n",
        "plt.colorbar(plt.cm.ScalarMappable(norm=norm, cmap='viridis'), label='Count')  # Adding a colorbar\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 863
        },
        "id": "IWlOnZirs0Vt",
        "outputId": "7cb290cd-f06d-4cbc-d424-6019f26d2660"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-12-565c522a5642>:19: MatplotlibDeprecationWarning: Unable to determine Axes to steal space for Colorbar. Using gca(), but will raise in the future. Either provide the *cax* argument to use as the Axes for the Colorbar, provide the *ax* argument to steal space from it, or add *mappable* to an Axes.\n",
            "  plt.colorbar(plt.cm.ScalarMappable(norm=norm, cmap='viridis'), label='Count')  # Adding a colorbar\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#predicitng disease"
      ],
      "metadata": {
        "id": "0BAT-Vc4Z1oR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import joblib\n",
        "\n",
        "# Load the trained model\n",
        "model = joblib.load('Random Forest_model.pkl')\n",
        "vectorizer = joblib.load('CountVectorizer_random.pkl')\n",
        "\n",
        "# Function to predict disease based on user symptoms\n",
        "def predict_disease(user_symptoms):\n",
        "    # Preprocess user input\n",
        "    processed_symptoms = preprocess_text(user_symptoms)\n",
        "\n",
        "    print(processed_symptoms)\n",
        "\n",
        "    # Vectorize user input using the same CountVectorizer\n",
        "    user_symptoms_vectorized = vectorizer.transform([processed_symptoms])\n",
        "    print(user_symptoms_vectorized)\n",
        "\n",
        "    # Predict disease using the trained model\n",
        "    predicted_disease = model.predict(user_symptoms_vectorized)\n",
        "\n",
        "    return predicted_disease[0]\n",
        "\n",
        "# Example usage\n",
        "#user_input = input(\"Enter symptoms separated by commas: \")\n",
        "user_input=\"fever, headache, fatigue, anxiety, confusion, hallucinations, difficulty swallowing\"\n",
        "#\"Joint pain, Stiffness, Swelling around the affected joints, Limited range of motion in the joints\"\n",
        "predicted_disease = predict_disease(user_input)\n",
        "print(\"Predicted disease:\", predicted_disease)\n"
      ],
      "metadata": {
        "id": "1ZilItdfZ36X"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}