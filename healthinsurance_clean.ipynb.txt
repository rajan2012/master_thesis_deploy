{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "#reading from csv file"
      ],
      "metadata": {
        "id": "QT5QT99hR6qx"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "MYIbTUh2SpCi"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Assuming the file is named \"your_file.csv\" and is located in the current directory\n",
        "file_path = \"process_healthinsurance.csv\"\n",
        "\n",
        "# Read the CSV file into a DataFrame   ,nrows=10\n",
        "df2 = pd.read_csv(file_path)\n",
        "\n",
        "#df = pd.read_csv(file_path, sep='\\t', compression='gzip')\n",
        "\n",
        "# Display the DataFrame\n",
        "#print(df)\n",
        "\n",
        "#5522   7043"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df=df2.head(10000)"
      ],
      "metadata": {
        "id": "Aj44d35pAsL9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#no of null value count for each val\n",
        "# Assuming df is your DataFrame\n",
        "null_counts = df.isnull().sum()\n",
        "print(null_counts)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DKb1s8U4TJrn",
        "outputId": "9a9bfbfa-ba92-421f-b806-48f68c41e64f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "age                       0\n",
            "gender                    0\n",
            "bmi                       0\n",
            "children                  0\n",
            "smoker                    0\n",
            "medical_history           0\n",
            "family_medical_history    0\n",
            "exercise_frequency        0\n",
            "occupation                0\n",
            "coverage_level            0\n",
            "charges                   0\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Drop rows where 'medical_history' or 'family_medical_history' have None values\n",
        "#df.dropna(subset=['medical_history', 'family_medical_history'], inplace=True)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gnHwG7PKV8sX",
        "outputId": "1e7b3d22-f62e-4a85-f346-f9b6703e40fb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-53-03b7da443e9b>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df.dropna(subset=['medical_history', 'family_medical_history'], inplace=True)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "len(df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fX7Ep3cAXVtK",
        "outputId": "60a5e1d8-0a62-4771-e58e-faea2c6deead"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "9391"
            ]
          },
          "metadata": {},
          "execution_count": 113
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import warnings\n",
        "from sklearn.exceptions import UndefinedMetricWarning\n",
        "\n",
        "# Ignore UndefinedMetricWarning\n",
        "warnings.filterwarnings(\"ignore\", category=UndefinedMetricWarning)\n",
        "\n",
        "# Your pipeline and scoring code here...\n"
      ],
      "metadata": {
        "id": "6uC8tPYHTDB4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Assuming 'df' is your DataFrame\n",
        "df['medical_history'].fillna('none', inplace=True)\n",
        "# Assuming 'df' is your DataFrame\n",
        "df['family_medical_history'].fillna('none', inplace=True)\n"
      ],
      "metadata": {
        "id": "TXoqkRrGX9GA",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9281efeb-e8dd-42bc-a319-89bb6138a622"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-282-13eff3065fcc>:2: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
            "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
            "\n",
            "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
            "\n",
            "\n",
            "  df['medical_history'].fillna('none', inplace=True)\n",
            "<ipython-input-282-13eff3065fcc>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df['medical_history'].fillna('none', inplace=True)\n",
            "<ipython-input-282-13eff3065fcc>:4: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
            "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
            "\n",
            "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
            "\n",
            "\n",
            "  df['family_medical_history'].fillna('none', inplace=True)\n",
            "<ipython-input-282-13eff3065fcc>:4: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df['family_medical_history'].fillna('none', inplace=True)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#distinct value of cateogrical column before preprocessing"
      ],
      "metadata": {
        "id": "gUEXpeUGVUVu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df3 = pd.DataFrame(df)\n",
        "\n",
        "# Create a new DataFrame to store distinct values for each specified column\n",
        "distinct_values = {\n",
        "    'Column': [],\n",
        "    'Distinct Values': []\n",
        "}\n",
        "\n",
        "for col in ['smoker', 'gender', 'exercise_frequency', 'occupation', 'coverage_level', 'medical_history', 'family_medical_history']:\n",
        "    distinct_values['Column'].append(col)\n",
        "    distinct_values['Distinct Values'].append(df3[col].unique())\n",
        "\n",
        "# Create a DataFrame from the distinct values dictionary\n",
        "distinct_values_df = pd.DataFrame(distinct_values)\n"
      ],
      "metadata": {
        "id": "hbt7hnVbVTM9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "distinct_values_df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 287
        },
        "id": "gWHJv5pRVdM6",
        "outputId": "39615ae7-46e9-48e4-92d9-ea2be7cc352f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                   Column                                    Distinct Values\n",
              "0                  smoker                                          [yes, no]\n",
              "1                  gender                                     [male, female]\n",
              "2      exercise_frequency          [never, occasionally, rarely, frequently]\n",
              "3              occupation   [blue collar, white collar, student, unemployed]\n",
              "4          coverage_level                         [premium, standard, basic]\n",
              "5         medical_history  [diabetes, none, high blood pressure, heart di...\n",
              "6  family_medical_history  [none, high blood pressure, diabetes, heart di..."
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-868d3f99-db95-49eb-801a-6a83759d566e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Column</th>\n",
              "      <th>Distinct Values</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>smoker</td>\n",
              "      <td>[yes, no]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>gender</td>\n",
              "      <td>[male, female]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>exercise_frequency</td>\n",
              "      <td>[never, occasionally, rarely, frequently]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>occupation</td>\n",
              "      <td>[blue collar, white collar, student, unemployed]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>coverage_level</td>\n",
              "      <td>[premium, standard, basic]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>medical_history</td>\n",
              "      <td>[diabetes, none, high blood pressure, heart di...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>family_medical_history</td>\n",
              "      <td>[none, high blood pressure, diabetes, heart di...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-868d3f99-db95-49eb-801a-6a83759d566e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-868d3f99-db95-49eb-801a-6a83759d566e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-868d3f99-db95-49eb-801a-6a83759d566e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-038bb6d4-d1bc-438a-82dd-38a987345ff6\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-038bb6d4-d1bc-438a-82dd-38a987345ff6')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-038bb6d4-d1bc-438a-82dd-38a987345ff6 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_eff8b835-ab70-40ca-b6b9-c1a748e603be\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('distinct_values_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_eff8b835-ab70-40ca-b6b9-c1a748e603be button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('distinct_values_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "distinct_values_df",
              "summary": "{\n  \"name\": \"distinct_values_df\",\n  \"rows\": 7,\n  \"fields\": [\n    {\n      \"column\": \"Column\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"smoker\",\n          \"gender\",\n          \"medical_history\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Distinct Values\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 131
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.head(1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 81
        },
        "id": "mnuDjC9aACeL",
        "outputId": "2d6356d7-af73-4f8b-dee6-2036c780d81b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   age gender    bmi  children smoker medical_history family_medical_history  \\\n",
              "0   46   male  21.45         5    yes        diabetes                   none   \n",
              "\n",
              "  exercise_frequency   occupation coverage_level       charges  \n",
              "0              never  blue collar        premium  20460.307669  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-954113fc-ac4d-4bd1-8c9f-ff1d3fe463e3\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>gender</th>\n",
              "      <th>bmi</th>\n",
              "      <th>children</th>\n",
              "      <th>smoker</th>\n",
              "      <th>medical_history</th>\n",
              "      <th>family_medical_history</th>\n",
              "      <th>exercise_frequency</th>\n",
              "      <th>occupation</th>\n",
              "      <th>coverage_level</th>\n",
              "      <th>charges</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>46</td>\n",
              "      <td>male</td>\n",
              "      <td>21.45</td>\n",
              "      <td>5</td>\n",
              "      <td>yes</td>\n",
              "      <td>diabetes</td>\n",
              "      <td>none</td>\n",
              "      <td>never</td>\n",
              "      <td>blue collar</td>\n",
              "      <td>premium</td>\n",
              "      <td>20460.307669</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-954113fc-ac4d-4bd1-8c9f-ff1d3fe463e3')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-954113fc-ac4d-4bd1-8c9f-ff1d3fe463e3 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-954113fc-ac4d-4bd1-8c9f-ff1d3fe463e3');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 10000,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13,\n        \"min\": 18,\n        \"max\": 65,\n        \"num_unique_values\": 48,\n        \"samples\": [\n          23,\n          63,\n          61\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"female\",\n          \"male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bmi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.25791763794121,\n        \"min\": 18.01,\n        \"max\": 50.0,\n        \"num_unique_values\": 3083,\n        \"samples\": [\n          38.27,\n          37.67\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"children\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 5,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          5,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smoker\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"no\",\n          \"yes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"medical_history\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"none\",\n          \"heart disease\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"family_medical_history\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"high blood pressure\",\n          \"heart disease\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"exercise_frequency\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"occasionally\",\n          \"frequently\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"occupation\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"white collar\",\n          \"unemployed\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"coverage_level\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"premium\",\n          \"standard\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"charges\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4446.790062211907,\n        \"min\": 4472.317058132149,\n        \"max\": 32070.12206928656,\n        \"num_unique_values\": 10000,\n        \"samples\": [\n          14165.435896271734,\n          17879.039028732124\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#df.drop(columns=['region'], inplace=True)"
      ],
      "metadata": {
        "id": "OGAK9G5t5Jra"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head(2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 112
        },
        "id": "3ihnC4d5aZZ0",
        "outputId": "50e5bc10-3b16-4ee9-ac3c-91566589c2f2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   age  gender    bmi  children smoker medical_history family_medical_history  \\\n",
              "0   46    male  21.45         5    yes        diabetes                   none   \n",
              "1   25  female  25.38         2    yes        diabetes    high blood pressure   \n",
              "\n",
              "  exercise_frequency    occupation coverage_level       charges  \n",
              "0              never   blue collar        premium  20460.307669  \n",
              "1       occasionally  white collar        premium  20390.899218  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-399c70bc-e69e-48b8-bcf2-d8ba42aabbfc\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>gender</th>\n",
              "      <th>bmi</th>\n",
              "      <th>children</th>\n",
              "      <th>smoker</th>\n",
              "      <th>medical_history</th>\n",
              "      <th>family_medical_history</th>\n",
              "      <th>exercise_frequency</th>\n",
              "      <th>occupation</th>\n",
              "      <th>coverage_level</th>\n",
              "      <th>charges</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>46</td>\n",
              "      <td>male</td>\n",
              "      <td>21.45</td>\n",
              "      <td>5</td>\n",
              "      <td>yes</td>\n",
              "      <td>diabetes</td>\n",
              "      <td>none</td>\n",
              "      <td>never</td>\n",
              "      <td>blue collar</td>\n",
              "      <td>premium</td>\n",
              "      <td>20460.307669</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>25</td>\n",
              "      <td>female</td>\n",
              "      <td>25.38</td>\n",
              "      <td>2</td>\n",
              "      <td>yes</td>\n",
              "      <td>diabetes</td>\n",
              "      <td>high blood pressure</td>\n",
              "      <td>occasionally</td>\n",
              "      <td>white collar</td>\n",
              "      <td>premium</td>\n",
              "      <td>20390.899218</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-399c70bc-e69e-48b8-bcf2-d8ba42aabbfc')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-399c70bc-e69e-48b8-bcf2-d8ba42aabbfc button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-399c70bc-e69e-48b8-bcf2-d8ba42aabbfc');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-339a6538-cb5a-4816-9c1e-4824642aa709\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-339a6538-cb5a-4816-9c1e-4824642aa709')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-339a6538-cb5a-4816-9c1e-4824642aa709 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 10000,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13,\n        \"min\": 18,\n        \"max\": 65,\n        \"num_unique_values\": 48,\n        \"samples\": [\n          23,\n          63,\n          61\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"female\",\n          \"male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bmi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.25791763794121,\n        \"min\": 18.01,\n        \"max\": 50.0,\n        \"num_unique_values\": 3083,\n        \"samples\": [\n          38.27,\n          37.67\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"children\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 5,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          5,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smoker\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"no\",\n          \"yes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"medical_history\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"none\",\n          \"heart disease\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"family_medical_history\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"high blood pressure\",\n          \"heart disease\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"exercise_frequency\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"occasionally\",\n          \"frequently\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"occupation\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"white collar\",\n          \"unemployed\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"coverage_level\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"premium\",\n          \"standard\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"charges\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4446.790062211907,\n        \"min\": 4472.317058132149,\n        \"max\": 32070.12206928656,\n        \"num_unique_values\": 10000,\n        \"samples\": [\n          14165.435896271734,\n          17879.039028732124\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 133
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#preprocessing"
      ],
      "metadata": {
        "id": "AD4MW2nRSugg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from itertools import product\n",
        "\n",
        "# Specify all possible values for each categorical column\n",
        "medical_history_values = ['none', 'diabetes', 'high blood pressure', 'heart disease']  # Example values, replace with your actual values\n",
        "exercise_frequency_values = ['never', 'rarely', 'occasionally', 'frequently']  # Example values, replace with your actual values\n",
        "occupation_values = ['blue collar', 'white collar', 'student', 'unemployed']  # Example values, replace with your actual values\n",
        "coverage_level_values = ['basic', 'standard', 'premium']  # Example values, replace with your actual values\n",
        "family_medical_history_values = ['none', 'diabetes', 'high blood pressure', 'heart disease']  # Example values, replace with your actual values\n",
        "smoker_values = ['yes', 'no']  # Example values, replace with your actual values\n",
        "gender_values = ['male', 'female']  # Example values, replace with your actual values\n",
        "\n",
        "# Generate all possible combinations of values for the specified categorical columns\n",
        "all_combinations = list(product(medical_history_values, exercise_frequency_values, occupation_values,\n",
        "                                 coverage_level_values, family_medical_history_values, smoker_values, gender_values))\n",
        "\n",
        "# Create DataFrame with all possible combinations\n",
        "column_names = ['medical_history', 'exercise_frequency', 'occupation', 'coverage_level', 'family_medical_history', 'smoker', 'gender']\n",
        "filtered_df = pd.DataFrame(all_combinations, columns=column_names)\n",
        "\n",
        "#print(filtered_df)\n"
      ],
      "metadata": {
        "id": "T6HTzNPm7c0K"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "filtered_df.head(1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 100
        },
        "id": "FCCNXQBD8vTH",
        "outputId": "f31f7b98-c4c9-46ae-a349-a66c8cadcf14"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  medical_history exercise_frequency   occupation coverage_level  \\\n",
              "0            none              never  blue collar          basic   \n",
              "\n",
              "  family_medical_history smoker gender  \n",
              "0                   none    yes   male  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-fc9a224a-9b81-46a0-8f17-df3d4448d3f7\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>medical_history</th>\n",
              "      <th>exercise_frequency</th>\n",
              "      <th>occupation</th>\n",
              "      <th>coverage_level</th>\n",
              "      <th>family_medical_history</th>\n",
              "      <th>smoker</th>\n",
              "      <th>gender</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>none</td>\n",
              "      <td>never</td>\n",
              "      <td>blue collar</td>\n",
              "      <td>basic</td>\n",
              "      <td>none</td>\n",
              "      <td>yes</td>\n",
              "      <td>male</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fc9a224a-9b81-46a0-8f17-df3d4448d3f7')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-fc9a224a-9b81-46a0-8f17-df3d4448d3f7 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-fc9a224a-9b81-46a0-8f17-df3d4448d3f7');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "filtered_df",
              "summary": "{\n  \"name\": \"filtered_df\",\n  \"rows\": 3072,\n  \"fields\": [\n    {\n      \"column\": \"medical_history\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"diabetes\",\n          \"heart disease\",\n          \"none\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"exercise_frequency\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"rarely\",\n          \"frequently\",\n          \"never\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"occupation\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"white collar\",\n          \"unemployed\",\n          \"blue collar\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"coverage_level\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"basic\",\n          \"standard\",\n          \"premium\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"family_medical_history\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"diabetes\",\n          \"heart disease\",\n          \"none\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smoker\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"no\",\n          \"yes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"female\",\n          \"male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#label encoder"
      ],
      "metadata": {
        "id": "HuVx6VcTTODT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import LabelEncoder\n",
        "# Initialize LabelEncoder\n",
        "label_encoder = LabelEncoder()\n",
        "# Fit label encoder on all categorical columns\n",
        "label_encoder.fit(pd.concat([df['medical_history'], df['exercise_frequency'], df['occupation'], df['coverage_level'], df['family_medical_history']]))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "sem4cc6EYzOE",
        "outputId": "336e0421-ce6c-4672-8fc0-21ade66b29a1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LabelEncoder()"
            ],
            "text/html": [
              "<style>#sk-container-id-3 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: black;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-3 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-3 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-3 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-3 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: block;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-3 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-3 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-3 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-3 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-3 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-3 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 1ex;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-3 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-3 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LabelEncoder()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;LabelEncoder<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.preprocessing.LabelEncoder.html\">?<span>Documentation for LabelEncoder</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>LabelEncoder()</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 134
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.head(4)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        },
        "id": "3RDlwrtQaN8j",
        "outputId": "955d5ad3-a8ad-4170-d366-14809518d0c9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   age  gender    bmi  children smoker      medical_history  \\\n",
              "0   46    male  21.45         5    yes             diabetes   \n",
              "1   25  female  25.38         2    yes             diabetes   \n",
              "2   38    male  44.88         2    yes  high blood pressure   \n",
              "3   25    male  19.89         0     no             diabetes   \n",
              "\n",
              "  family_medical_history exercise_frequency    occupation coverage_level  \\\n",
              "0               diabetes              never   blue collar        premium   \n",
              "1    high blood pressure       occasionally  white collar        premium   \n",
              "2    high blood pressure       occasionally   blue collar        premium   \n",
              "3               diabetes             rarely  white collar       standard   \n",
              "\n",
              "        charges  \n",
              "0  20460.307669  \n",
              "1  20390.899218  \n",
              "2  20204.476302  \n",
              "3  11789.029843  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d430488b-005b-486b-aa2a-a24cee192aa2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>gender</th>\n",
              "      <th>bmi</th>\n",
              "      <th>children</th>\n",
              "      <th>smoker</th>\n",
              "      <th>medical_history</th>\n",
              "      <th>family_medical_history</th>\n",
              "      <th>exercise_frequency</th>\n",
              "      <th>occupation</th>\n",
              "      <th>coverage_level</th>\n",
              "      <th>charges</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>46</td>\n",
              "      <td>male</td>\n",
              "      <td>21.45</td>\n",
              "      <td>5</td>\n",
              "      <td>yes</td>\n",
              "      <td>diabetes</td>\n",
              "      <td>diabetes</td>\n",
              "      <td>never</td>\n",
              "      <td>blue collar</td>\n",
              "      <td>premium</td>\n",
              "      <td>20460.307669</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>25</td>\n",
              "      <td>female</td>\n",
              "      <td>25.38</td>\n",
              "      <td>2</td>\n",
              "      <td>yes</td>\n",
              "      <td>diabetes</td>\n",
              "      <td>high blood pressure</td>\n",
              "      <td>occasionally</td>\n",
              "      <td>white collar</td>\n",
              "      <td>premium</td>\n",
              "      <td>20390.899218</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>38</td>\n",
              "      <td>male</td>\n",
              "      <td>44.88</td>\n",
              "      <td>2</td>\n",
              "      <td>yes</td>\n",
              "      <td>high blood pressure</td>\n",
              "      <td>high blood pressure</td>\n",
              "      <td>occasionally</td>\n",
              "      <td>blue collar</td>\n",
              "      <td>premium</td>\n",
              "      <td>20204.476302</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>25</td>\n",
              "      <td>male</td>\n",
              "      <td>19.89</td>\n",
              "      <td>0</td>\n",
              "      <td>no</td>\n",
              "      <td>diabetes</td>\n",
              "      <td>diabetes</td>\n",
              "      <td>rarely</td>\n",
              "      <td>white collar</td>\n",
              "      <td>standard</td>\n",
              "      <td>11789.029843</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d430488b-005b-486b-aa2a-a24cee192aa2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d430488b-005b-486b-aa2a-a24cee192aa2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d430488b-005b-486b-aa2a-a24cee192aa2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-fcd46184-a8f8-481c-8938-0024d830abeb\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fcd46184-a8f8-481c-8938-0024d830abeb')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-fcd46184-a8f8-481c-8938-0024d830abeb button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 9391,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13,\n        \"min\": 18,\n        \"max\": 65,\n        \"num_unique_values\": 48,\n        \"samples\": [\n          23,\n          28,\n          61\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"female\",\n          \"male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bmi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.261427214414033,\n        \"min\": 18.01,\n        \"max\": 50.0,\n        \"num_unique_values\": 3052,\n        \"samples\": [\n          36.44,\n          20.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"children\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 5,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          5,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smoker\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"no\",\n          \"yes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"medical_history\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"diabetes\",\n          \"high blood pressure\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"family_medical_history\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"diabetes\",\n          \"high blood pressure\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"exercise_frequency\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"occasionally\",\n          \"frequently\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"occupation\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"white collar\",\n          \"unemployed\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"coverage_level\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"premium\",\n          \"standard\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"charges\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4375.920445565279,\n        \"min\": 5337.849665922526,\n        \"max\": 32070.12206928656,\n        \"num_unique_values\": 9391,\n        \"samples\": [\n          12040.462439751658,\n          12778.069929180869\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 71
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import LabelEncoder\n",
        "\n",
        "##for user input\n",
        "\n",
        "def preprocess_dataframe(df):\n",
        "    # Initialize LabelEncoder\n",
        "    #df = df.applymap(lambda x: x.lower() if isinstance(x, str) else x)\n",
        "\n",
        "    #print(df)\n",
        "    # Apply mapping functions to respective columns\n",
        "    #df['medical_history'] = df['medical_history'].apply(map_medical)\n",
        "    #df['exercise_frequency'] = df['exercise_frequency'].apply(map_exercise)\n",
        "    df = df.applymap(lambda x: x.lower() if isinstance(x, str) else x)\n",
        "    df['smoker_encoded'] = df['smoker'].apply(lambda x: 1 if x == 'yes' else 0)\n",
        "    #df['family_medical_history'] = df['family_medical_history'].apply(map_medical)\n",
        "    #df['bmi'] = df['bmi'].apply(map_bmi)\n",
        "    df['gender_encoded'] = df['gender'].apply(lambda x: 1 if x == 'male' else 0)\n",
        "    #df['age1'] = df['age'].apply(map_age)\n",
        "\n",
        "    #label_encoder = LabelEncoder()\n",
        "\n",
        "    # Using sklearn.preprocessing.LabelEncoder\n",
        "    # Encode the 'exercise' column\n",
        "    #label_encoder.fit(df['exercise_frequency'])\n",
        "    df['exercise_encoded'] = label_encoder.transform(df['exercise_frequency'])\n",
        "\n",
        "    # Encode the 'occupation' column\n",
        "    #label_encoder.fit(df['occupation'])\n",
        "    df['occupation_encoded'] = label_encoder.transform(df['occupation'])\n",
        "\n",
        "    # Encode the 'coverage_level' column\n",
        "    #label_encoder.fit(df['coverage_level'])\n",
        "    df['coverage_level_encoded'] = label_encoder.transform(df['coverage_level'])\n",
        "\n",
        "    # Encode the 'medical_history' column\n",
        "    #label_encoder.fit(df['medical_history'])\n",
        "    df['medical_history_encoded'] = label_encoder.transform(df['medical_history'])\n",
        "\n",
        "    # Substract 1 from all encoded values except for 'none'\n",
        "    #df['medical_history_encoded'] = df['medical_history_encoded'].apply(lambda x: x if x == label_encoder.transform(['none'])[0] else x - 1)\n",
        "\n",
        "\n",
        "    df['family_medical_history_encoded'] = label_encoder.transform(df['family_medical_history'])\n",
        "\n",
        "    import pandas as pd\n",
        "\n",
        "    # Assuming 'df' is your DataFrame\n",
        "    return df\n",
        "\n"
      ],
      "metadata": {
        "id": "-lDuiMmXTMZ9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head(1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 81
        },
        "id": "QQnkaiXorSQt",
        "outputId": "82cb21e1-0bf9-4f3b-86cf-a0b7c6f0d616"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   age gender    bmi  children smoker medical_history family_medical_history  \\\n",
              "0   46   male  21.45         5    yes        diabetes                   none   \n",
              "\n",
              "  exercise_frequency   occupation coverage_level       charges  \n",
              "0              never  blue collar        premium  20460.307669  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6f1d72da-7daf-4855-a18d-b281e045e07d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>gender</th>\n",
              "      <th>bmi</th>\n",
              "      <th>children</th>\n",
              "      <th>smoker</th>\n",
              "      <th>medical_history</th>\n",
              "      <th>family_medical_history</th>\n",
              "      <th>exercise_frequency</th>\n",
              "      <th>occupation</th>\n",
              "      <th>coverage_level</th>\n",
              "      <th>charges</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>46</td>\n",
              "      <td>male</td>\n",
              "      <td>21.45</td>\n",
              "      <td>5</td>\n",
              "      <td>yes</td>\n",
              "      <td>diabetes</td>\n",
              "      <td>none</td>\n",
              "      <td>never</td>\n",
              "      <td>blue collar</td>\n",
              "      <td>premium</td>\n",
              "      <td>20460.307669</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6f1d72da-7daf-4855-a18d-b281e045e07d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6f1d72da-7daf-4855-a18d-b281e045e07d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6f1d72da-7daf-4855-a18d-b281e045e07d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 10000,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13,\n        \"min\": 18,\n        \"max\": 65,\n        \"num_unique_values\": 48,\n        \"samples\": [\n          23,\n          63,\n          61\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"female\",\n          \"male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bmi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.25791763794121,\n        \"min\": 18.01,\n        \"max\": 50.0,\n        \"num_unique_values\": 3083,\n        \"samples\": [\n          38.27,\n          37.67\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"children\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 5,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          5,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smoker\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"no\",\n          \"yes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"medical_history\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"none\",\n          \"heart disease\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"family_medical_history\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"high blood pressure\",\n          \"heart disease\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"exercise_frequency\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"occasionally\",\n          \"frequently\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"occupation\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"white collar\",\n          \"unemployed\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"coverage_level\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"premium\",\n          \"standard\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"charges\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4446.790062211907,\n        \"min\": 4472.317058132149,\n        \"max\": 32070.12206928656,\n        \"num_unique_values\": 10000,\n        \"samples\": [\n          14165.435896271734,\n          17879.039028732124\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 286
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#run these\n",
        "df=preprocess_dataframe(df)"
      ],
      "metadata": {
        "id": "ISczNYReTTE6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "45ad7c53-8e89-4b49-8ee9-8130bb4ca08f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-283-0938e73ed114>:13: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n",
            "  df = df.applymap(lambda x: x.lower() if isinstance(x, str) else x)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Creating a new column with the integer part of the 'charges' column\n",
        "df['charges'] = df['charges'].astype(int)"
      ],
      "metadata": {
        "id": "5W2wCeeMC9WK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Import pandas\n",
        "import pandas as pd\n",
        "\n",
        "# Assuming df is your DataFrame dropping these column because its categorical and will not be part of feature\n",
        "#df2 = df.drop(['medical_history', 'family_medical_history', 'exercise_frequency', 'occupation'], axis=1)\n",
        "\n",
        "# Now, df will only contain the remaining columns\n"
      ],
      "metadata": {
        "id": "ZUkJX84EsA8S"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head(1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 101
        },
        "id": "ABTiN7OrUtdH",
        "outputId": "2c636dc1-f1ee-4842-fe6a-3782bd56cdd3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   age  gender    bmi  children  smoker medical_history  \\\n",
              "0   46       1  21.45         5       1        diabetes   \n",
              "\n",
              "  family_medical_history exercise_frequency   occupation coverage_level  \\\n",
              "0                   none              never  blue collar        premium   \n",
              "\n",
              "   charges  exercise_encoded  occupation_encoded  coverage_level_encoded  \\\n",
              "0    20460                 6                   1                       9   \n",
              "\n",
              "   medical_history_encoded  family_medical_history_encoded  \n",
              "0                        2                               7  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a889523f-aa13-4f26-860b-06a99ce427f3\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>gender</th>\n",
              "      <th>bmi</th>\n",
              "      <th>children</th>\n",
              "      <th>smoker</th>\n",
              "      <th>medical_history</th>\n",
              "      <th>family_medical_history</th>\n",
              "      <th>exercise_frequency</th>\n",
              "      <th>occupation</th>\n",
              "      <th>coverage_level</th>\n",
              "      <th>charges</th>\n",
              "      <th>exercise_encoded</th>\n",
              "      <th>occupation_encoded</th>\n",
              "      <th>coverage_level_encoded</th>\n",
              "      <th>medical_history_encoded</th>\n",
              "      <th>family_medical_history_encoded</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>46</td>\n",
              "      <td>1</td>\n",
              "      <td>21.45</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>diabetes</td>\n",
              "      <td>none</td>\n",
              "      <td>never</td>\n",
              "      <td>blue collar</td>\n",
              "      <td>premium</td>\n",
              "      <td>20460</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>9</td>\n",
              "      <td>2</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a889523f-aa13-4f26-860b-06a99ce427f3')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a889523f-aa13-4f26-860b-06a99ce427f3 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a889523f-aa13-4f26-860b-06a99ce427f3');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 10000,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13,\n        \"min\": 18,\n        \"max\": 65,\n        \"num_unique_values\": 48,\n        \"samples\": [\n          23,\n          63,\n          61\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bmi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.25791763794121,\n        \"min\": 18.01,\n        \"max\": 50.0,\n        \"num_unique_values\": 3083,\n        \"samples\": [\n          38.27,\n          37.67\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"children\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 5,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          5,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smoker\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"medical_history\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"none\",\n          \"heart disease\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"family_medical_history\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"high blood pressure\",\n          \"heart disease\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"exercise_frequency\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"occasionally\",\n          \"frequently\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"occupation\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"white collar\",\n          \"unemployed\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"coverage_level\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"premium\",\n          \"standard\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"charges\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4446,\n        \"min\": 4472,\n        \"max\": 32070,\n        \"num_unique_values\": 7525,\n        \"samples\": [\n          14394,\n          17032\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"exercise_encoded\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 3,\n        \"max\": 10,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          8,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"occupation_encoded\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 1,\n        \"max\": 14,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          14,\n          13\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"coverage_level_encoded\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4,\n        \"min\": 0,\n        \"max\": 11,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          9,\n          11\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"medical_history_encoded\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 2,\n        \"max\": 7,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          7,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"family_medical_history_encoded\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 2,\n        \"max\": 7,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          5,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#distinct value of categorical column and the one which has been converted using label encoder"
      ],
      "metadata": {
        "id": "RNY9ZLnFUMPN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df3 = pd.DataFrame(df)\n",
        "\n",
        "# Create a new DataFrame to store distinct values for each specified column\n",
        "distinct_values = {\n",
        "    'Column': [],\n",
        "    'Distinct Values': []\n",
        "}\n",
        "\n",
        "for col in ['smoker_encoded', 'gender_encoded', 'exercise_encoded', 'occupation_encoded', 'coverage_level_encoded', 'medical_history_encoded', 'family_medical_history_encoded']:\n",
        "    distinct_values['Column'].append(col)\n",
        "    distinct_values['Distinct Values'].append(df3[col].unique())\n",
        "\n",
        "# Create a DataFrame from the distinct values dictionary\n",
        "distinct_values_df = pd.DataFrame(distinct_values)\n"
      ],
      "metadata": {
        "id": "cPmKWZmYUSKk"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "distinct_values_df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 269
        },
        "id": "bAMFjZr5Uhlz",
        "outputId": "54059ff5-36fe-436f-cf48-75341acf70c0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                           Column  Distinct Values\n",
              "0                  smoker_encoded           [1, 0]\n",
              "1                  gender_encoded           [1, 0]\n",
              "2                exercise_encoded    [6, 8, 10, 3]\n",
              "3              occupation_encoded  [1, 14, 12, 13]\n",
              "4          coverage_level_encoded       [9, 11, 0]\n",
              "5         medical_history_encoded     [2, 7, 5, 4]\n",
              "6  family_medical_history_encoded     [7, 5, 2, 4]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-efacbd22-0aca-431f-a0ed-6e2e736d1448\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Column</th>\n",
              "      <th>Distinct Values</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>smoker_encoded</td>\n",
              "      <td>[1, 0]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>gender_encoded</td>\n",
              "      <td>[1, 0]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>exercise_encoded</td>\n",
              "      <td>[6, 8, 10, 3]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>occupation_encoded</td>\n",
              "      <td>[1, 14, 12, 13]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>coverage_level_encoded</td>\n",
              "      <td>[9, 11, 0]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>medical_history_encoded</td>\n",
              "      <td>[2, 7, 5, 4]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>family_medical_history_encoded</td>\n",
              "      <td>[7, 5, 2, 4]</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-efacbd22-0aca-431f-a0ed-6e2e736d1448')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-efacbd22-0aca-431f-a0ed-6e2e736d1448 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-efacbd22-0aca-431f-a0ed-6e2e736d1448');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-2562693d-7ee6-485f-aecd-1e26d0303e8d\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2562693d-7ee6-485f-aecd-1e26d0303e8d')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-2562693d-7ee6-485f-aecd-1e26d0303e8d button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_2fe7f8ab-558c-4ab4-b36b-63330689d1ba\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('distinct_values_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_2fe7f8ab-558c-4ab4-b36b-63330689d1ba button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('distinct_values_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "distinct_values_df",
              "summary": "{\n  \"name\": \"distinct_values_df\",\n  \"rows\": 7,\n  \"fields\": [\n    {\n      \"column\": \"Column\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"smoker_encoded\",\n          \"gender_encoded\",\n          \"medical_history_encoded\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Distinct Values\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 290
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#mapping before and after label encoder"
      ],
      "metadata": {
        "id": "qewyyuNJZ0Nt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "df3 = pd.DataFrame(df)\n",
        "\n",
        "# Create a new DataFrame to store distinct values for each specified column\n",
        "distinct_values = {\n",
        "    'Column': [],\n",
        "    'Original Value': [],\n",
        "    'Encoded Value': []\n",
        "}\n",
        "\n",
        "# List of columns to group\n",
        "columns = [\n",
        "    ('smoker', 'smoker_encoded'),\n",
        "    ('gender', 'gender_encoded'),\n",
        "    ('exercise_frequency', 'exercise_encoded'),\n",
        "    ('occupation', 'occupation_encoded'),\n",
        "    ('coverage_level', 'coverage_level_encoded'),\n",
        "    ('medical_history', 'medical_history_encoded'),\n",
        "    ('family_medical_history', 'family_medical_history_encoded')\n",
        "]\n",
        "\n",
        "# Populate the distinct values DataFrame\n",
        "for original_col, encoded_col in columns:\n",
        "    for original_value in df3[original_col].unique():\n",
        "        encoded_value = df3.loc[df[original_col] == original_value, encoded_col].values[0]  # Get the corresponding encoded value\n",
        "        distinct_values['Column'].append(original_col)\n",
        "        distinct_values['Original Value'].append(original_value)\n",
        "        distinct_values['Encoded Value'].append(encoded_value)\n",
        "\n",
        "# Create a DataFrame from the distinct values dictionary\n",
        "distinct_values_df = pd.DataFrame(distinct_values)\n",
        "\n",
        "# Display the resulting DataFrame\n",
        "#print(distinct_values_df)"
      ],
      "metadata": {
        "id": "vYiOz-1DZ4J9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "distinct_values_df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 628
        },
        "id": "XDMo6Lgwcf5Y",
        "outputId": "690900ea-bbd4-4aa7-8656-4ce7adb0653f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                    Column       Original Value  Encoded Value\n",
              "0                   smoker                  yes              1\n",
              "1                   smoker                   no              0\n",
              "2                   gender                 male              1\n",
              "3                   gender               female              0\n",
              "4       exercise_frequency                never              6\n",
              "5       exercise_frequency         occasionally              8\n",
              "6       exercise_frequency               rarely             10\n",
              "7       exercise_frequency           frequently              3\n",
              "8               occupation          blue collar              1\n",
              "9               occupation         white collar             14\n",
              "10              occupation              student             12\n",
              "11              occupation           unemployed             13\n",
              "12          coverage_level              premium              9\n",
              "13          coverage_level             standard             11\n",
              "14          coverage_level                basic              0\n",
              "15         medical_history             diabetes              2\n",
              "16         medical_history                 none              7\n",
              "17         medical_history  high blood pressure              5\n",
              "18         medical_history        heart disease              4\n",
              "19  family_medical_history                 none              7\n",
              "20  family_medical_history  high blood pressure              5\n",
              "21  family_medical_history             diabetes              2\n",
              "22  family_medical_history        heart disease              4"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9b17474c-77cd-4572-b3ce-e4dc7b2e5402\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Column</th>\n",
              "      <th>Original Value</th>\n",
              "      <th>Encoded Value</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>smoker</td>\n",
              "      <td>yes</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>smoker</td>\n",
              "      <td>no</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>gender</td>\n",
              "      <td>male</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>gender</td>\n",
              "      <td>female</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>exercise_frequency</td>\n",
              "      <td>never</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>exercise_frequency</td>\n",
              "      <td>occasionally</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>exercise_frequency</td>\n",
              "      <td>rarely</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>exercise_frequency</td>\n",
              "      <td>frequently</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>occupation</td>\n",
              "      <td>blue collar</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>occupation</td>\n",
              "      <td>white collar</td>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>occupation</td>\n",
              "      <td>student</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>occupation</td>\n",
              "      <td>unemployed</td>\n",
              "      <td>13</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>coverage_level</td>\n",
              "      <td>premium</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>coverage_level</td>\n",
              "      <td>standard</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>coverage_level</td>\n",
              "      <td>basic</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>medical_history</td>\n",
              "      <td>diabetes</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>medical_history</td>\n",
              "      <td>none</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>medical_history</td>\n",
              "      <td>high blood pressure</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>medical_history</td>\n",
              "      <td>heart disease</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>family_medical_history</td>\n",
              "      <td>none</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>family_medical_history</td>\n",
              "      <td>high blood pressure</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>family_medical_history</td>\n",
              "      <td>diabetes</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>family_medical_history</td>\n",
              "      <td>heart disease</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9b17474c-77cd-4572-b3ce-e4dc7b2e5402')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9b17474c-77cd-4572-b3ce-e4dc7b2e5402 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9b17474c-77cd-4572-b3ce-e4dc7b2e5402');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f37772fb-9280-4324-8df9-2acfb9636ff4\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f37772fb-9280-4324-8df9-2acfb9636ff4')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f37772fb-9280-4324-8df9-2acfb9636ff4 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_4d9529f0-a0b7-4714-a5c2-f922abe00662\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('distinct_values_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_4d9529f0-a0b7-4714-a5c2-f922abe00662 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('distinct_values_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "distinct_values_df",
              "summary": "{\n  \"name\": \"distinct_values_df\",\n  \"rows\": 23,\n  \"fields\": [\n    {\n      \"column\": \"Column\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"smoker\",\n          \"gender\",\n          \"medical_history\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Original Value\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 19,\n        \"samples\": [\n          \"yes\",\n          \"occasionally\",\n          \"unemployed\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Encoded Value\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4,\n        \"min\": 0,\n        \"max\": 14,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          9,\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 292
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "unique_combinations = df[['medical_history_encoded', 'medical_history']].drop_duplicates()\n",
        "unique_combinations.head(20)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        },
        "id": "wvGCkxKQTWot",
        "outputId": "11e16a7d-1ab3-45be-e5cd-8c6a84eba1b3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   medical_history_encoded      medical_history\n",
              "0                        2             diabetes\n",
              "2                        7                 none\n",
              "6                        5  high blood pressure\n",
              "7                        4        heart disease"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c5ccb09a-e7a8-4bff-b81d-f2c542e22747\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>medical_history_encoded</th>\n",
              "      <th>medical_history</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2</td>\n",
              "      <td>diabetes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>7</td>\n",
              "      <td>none</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>5</td>\n",
              "      <td>high blood pressure</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>4</td>\n",
              "      <td>heart disease</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c5ccb09a-e7a8-4bff-b81d-f2c542e22747')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c5ccb09a-e7a8-4bff-b81d-f2c542e22747 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c5ccb09a-e7a8-4bff-b81d-f2c542e22747');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e08b782f-5d35-453a-a526-bd7885b6e11e\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e08b782f-5d35-453a-a526-bd7885b6e11e')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e08b782f-5d35-453a-a526-bd7885b6e11e button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "unique_combinations",
              "summary": "{\n  \"name\": \"unique_combinations\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"medical_history_encoded\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 2,\n        \"max\": 7,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          7,\n          4,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"medical_history\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"none\",\n          \"heart disease\",\n          \"diabetes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 144
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#'smoker', 'gender', 'exercise_frequency', 'occupation', 'coverage_level', 'medical_history', 'family_medical_history'\n",
        "#"
      ],
      "metadata": {
        "id": "PdO3p-S8ewSJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#rename encoder column and drop non encoder categorical column"
      ],
      "metadata": {
        "id": "V2D9ol6bfZzw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "def drop_and_renameCols(df):\n",
        "    # Step 1: Drop the specified columns\n",
        "    df = df.drop(columns=['smoker', 'gender', 'exercise_frequency', 'occupation', 'coverage_level', 'medical_history', 'family_medical_history'])\n",
        "\n",
        "    # Step 2: Rename the encoder columns\n",
        "    df = df.rename(columns={\n",
        "        'smoker_encoded': 'smoker',\n",
        "        'gender_encoded': 'gender',\n",
        "        'exercise_encoded': 'exercise_frequency',\n",
        "        'occupation_encoded': 'occupation',\n",
        "        'coverage_level_encoded': 'coverage_level',\n",
        "        'medical_history_encoded': 'medical_history',\n",
        "        'family_medical_history_encoded': 'family_medical_history'\n",
        "    })\n",
        "    return df\n",
        "\n"
      ],
      "metadata": {
        "id": "-tk1GqzafZT-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Call the preprocessing method\n",
        "df = drop_and_renameCols(df)"
      ],
      "metadata": {
        "id": "be706wTOv2P7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head(2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 112
        },
        "id": "_qiXSJ3TfnEL",
        "outputId": "2721be72-c634-4f7a-9d47-62c2bd901b4f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   age    bmi  children  charges  smoker  gender  exercise_frequency  \\\n",
              "0   46  21.45         5    20460       1       1                   6   \n",
              "1   25  25.38         2    20390       1       0                   8   \n",
              "\n",
              "   occupation  coverage_level  medical_history  family_medical_history  \n",
              "0           1               9                2                       7  \n",
              "1          14               9                2                       5  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f8abc637-20c7-4f10-b5ea-a9b2d291b0c5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>bmi</th>\n",
              "      <th>children</th>\n",
              "      <th>charges</th>\n",
              "      <th>smoker</th>\n",
              "      <th>gender</th>\n",
              "      <th>exercise_frequency</th>\n",
              "      <th>occupation</th>\n",
              "      <th>coverage_level</th>\n",
              "      <th>medical_history</th>\n",
              "      <th>family_medical_history</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>46</td>\n",
              "      <td>21.45</td>\n",
              "      <td>5</td>\n",
              "      <td>20460</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>9</td>\n",
              "      <td>2</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>25</td>\n",
              "      <td>25.38</td>\n",
              "      <td>2</td>\n",
              "      <td>20390</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "      <td>14</td>\n",
              "      <td>9</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f8abc637-20c7-4f10-b5ea-a9b2d291b0c5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f8abc637-20c7-4f10-b5ea-a9b2d291b0c5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f8abc637-20c7-4f10-b5ea-a9b2d291b0c5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-3dcd1cf3-219f-4a20-8ac7-c9f736a3e310\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3dcd1cf3-219f-4a20-8ac7-c9f736a3e310')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-3dcd1cf3-219f-4a20-8ac7-c9f736a3e310 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 10000,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13,\n        \"min\": 18,\n        \"max\": 65,\n        \"num_unique_values\": 48,\n        \"samples\": [\n          23,\n          63,\n          61\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bmi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.25791763794121,\n        \"min\": 18.01,\n        \"max\": 50.0,\n        \"num_unique_values\": 3083,\n        \"samples\": [\n          38.27,\n          37.67,\n          22.93\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"children\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 5,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          5,\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"charges\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4446,\n        \"min\": 4472,\n        \"max\": 32070,\n        \"num_unique_values\": 7525,\n        \"samples\": [\n          14394,\n          17032,\n          13098\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smoker\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"exercise_frequency\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 3,\n        \"max\": 10,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          8,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"occupation\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 1,\n        \"max\": 14,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          14,\n          13\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"coverage_level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4,\n        \"min\": 0,\n        \"max\": 11,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          9,\n          11\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"medical_history\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 2,\n        \"max\": 7,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          7,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"family_medical_history\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 2,\n        \"max\": 7,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          5,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 295
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#corelation map using pearson"
      ],
      "metadata": {
        "id": "BOWnJYPHf_ag"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Filter out numerical columns\n",
        "#.drop(columns=['charges'])\n",
        "numerical_columns = df.select_dtypes(include=['int64', 'float64'])\n",
        "\n",
        "# Create heatmap for numerical columns\n",
        "plt.figure(figsize=(10, 8))\n",
        "sns.heatmap(numerical_columns.corr(), annot=True, cmap='coolwarm', linewidths=0.5)\n",
        "plt.title('Correlation Heatmap of Numerical Columns')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 844
        },
        "id": "YJfc1HHNTbhT",
        "outputId": "7b489ac9-7fd7-4757-8f3f-558b3baff85d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Filter out numerical columns\n",
        "numerical_columns = df.select_dtypes(include=['int64', 'float64'])\n",
        "\n",
        "# Create a figure for multiple subplots\n",
        "plt.figure(figsize=(20, 18))\n",
        "\n",
        "# Spearman Correlation Heatmap\n",
        "plt.subplot(3, 1, 2)  # Second subplot\n",
        "sns.heatmap(numerical_columns.corr(method='spearman'), annot=True, cmap='coolwarm', linewidths=0.5)\n",
        "plt.title('Spearman Correlation Heatmap')\n",
        "\n",
        "\n",
        "# Adjust layout to prevent overlapping\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 467
        },
        "id": "5U62Fh02ip7w",
        "outputId": "9080c42b-061d-4334-ad5d-a47a4a0663f9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2000x1800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Filter out numerical columns\n",
        "numerical_columns = df.select_dtypes(include=['int64', 'float64'])\n",
        "\n",
        "# Create a figure for multiple subplots\n",
        "plt.figure(figsize=(20, 18))\n",
        "\n",
        "# Kendall Correlation Heatmap\n",
        "plt.subplot(3, 1, 3)  # Third subplot\n",
        "sns.heatmap(numerical_columns.corr(method='kendall'), annot=True, cmap='coolwarm', linewidths=0.5)\n",
        "plt.title('Kendall Correlation Heatmap')\n",
        "\n",
        "# Adjust layout to prevent overlapping\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 497
        },
        "id": "P71S1P4Qi540",
        "outputId": "0bdb5044-6dbd-4602-c64b-eee3bba99b91"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2000x1800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#model training"
      ],
      "metadata": {
        "id": "WTmWuS4YjLY5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_absolute_percentage_error\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import VotingRegressor, RandomForestRegressor, GradientBoostingRegressor, AdaBoostClassifier\n",
        "from sklearn.tree import DecisionTreeRegressor\n",
        "from sklearn.svm import SVR\n",
        "import xgboost as xgb\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.model_selection import train_test_split, cross_val_score\n",
        "from sklearn.metrics import mean_squared_error, r2_score\n",
        "from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\n",
        "from sklearn.linear_model import LinearRegression, Ridge, Lasso\n",
        "from sklearn.svm import SVR\n",
        "import xgboost as xgb\n",
        "from sklearn.model_selection import KFold, cross_val_score\n",
        "from sklearn.model_selection import KFold, cross_val_score\n",
        "from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score, mean_absolute_percentage_error\n",
        "\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.model_selection import train_test_split, cross_val_score\n",
        "from sklearn.metrics import mean_squared_error, r2_score\n",
        "from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\n",
        "from sklearn.linear_model import LinearRegression, Ridge, Lasso\n",
        "from sklearn.svm import SVR\n",
        "import xgboost as xgb\n",
        "from sklearn.model_selection import KFold, cross_val_score\n",
        "from sklearn.model_selection import KFold, cross_val_score\n",
        "from sklearn.naive_bayes import MultinomialNB\n",
        "\n",
        "from sklearn.naive_bayes import MultinomialNB, GaussianNB\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.ensemble import AdaBoostClassifier, RandomForestRegressor, GradientBoostingRegressor, VotingRegressor\n",
        "from sklearn.tree import DecisionTreeRegressor\n",
        "from sklearn.svm import SVR, SVC\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "import xgboost as xgb\n",
        "from sklearn.linear_model import Ridge, Lasso, LinearRegression\n",
        "\n",
        "\n",
        "\n",
        "# Initialize estimators for VotingRegressor\n",
        "estimators = [\n",
        "    ('xgboost', xgb.XGBRegressor()),\n",
        "    ('decision_tree', DecisionTreeRegressor(random_state=42)),\n",
        "    ('random_forest', RandomForestRegressor(random_state=42))\n",
        "]\n",
        "\n",
        "#for logistic regression\n",
        "# Scale the features\n",
        "#scaler = StandardScaler()\n",
        "#X_scaled = scaler.fit_transform(X)\n",
        "\n",
        "# Initialize a dictionary to store models\n",
        "models = {\n",
        "   # Regressors\n",
        "    'XGBoost Regressor': xgb.XGBRegressor(),\n",
        "    'Voting Regressor': VotingRegressor(estimators),  # You may need to define `estimators` elsewhere\n",
        "    'Random Forest Regressor': RandomForestRegressor(random_state=42),\n",
        "    'Gradient Boosting Regressor': GradientBoostingRegressor(random_state=42),\n",
        "\n",
        "}\n",
        "\n",
        "results = {}\n",
        "\n",
        "# Assuming df is already available\n",
        "# Split data into features (X) and target variable (y)\n",
        "X = df.head(1000).drop(columns=['charges'])\n",
        "#.drop(columns=['medical_history','family_medical_history','coverage_level','exercise_frequency','occupation','charges'])\n",
        "y = df['charges'].head(1000)  # Target variable\n",
        "\n",
        "# Split data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Function to calculate adjusted R-squared\n",
        "def adjusted_r2_score(y_true, y_pred, n_features):\n",
        "    r2 = r2_score(y_true, y_pred)\n",
        "    adjusted_r2 = 1 - (1 - r2) * ((len(y_true) - 1) / (len(y_true) - n_features - 1))\n",
        "    return adjusted_r2\n",
        "\n",
        "# Train and evaluate each model\n",
        "for name, model in models.items():\n",
        "    #print(f\"Training {name}...\")\n",
        "    model.fit(X_train, y_train)  # Train the model\n",
        "    y_pred = model.predict(X_test)  # Predict on the test set\n",
        "\n",
        "    # Evaluate the model\n",
        "    mae = mean_absolute_error(y_test, y_pred)\n",
        "    mse = mean_squared_error(y_test, y_pred)\n",
        "    rmse = np.sqrt(mse)\n",
        "    mape = mean_absolute_percentage_error(y_test, y_pred)\n",
        "    r2 = r2_score(y_test, y_pred)\n",
        "    adjusted_r2 = adjusted_r2_score(y_test, y_pred, X_test.shape[1])\n",
        "\n",
        "    # Store the results\n",
        "    results[name] = {\n",
        "        'MSE': mse,\n",
        "        'RMSE': rmse,\n",
        "        'MAE': mae,\n",
        "        'MAPE': mape,\n",
        "        'R2': r2,\n",
        "        'Adjusted R2': adjusted_r2\n",
        "    }\n",
        "\n",
        "# Convert results to DataFrame\n",
        "results_df = pd.DataFrame(results).T.reset_index().rename(columns={'index': 'Model'})\n",
        "\n",
        "# Display the results\n",
        "#print(results_df)\n"
      ],
      "metadata": {
        "id": "ovOfeJKPTgf9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "results_df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        },
        "id": "FrexBNT6EvP1",
        "outputId": "07e8c80a-8081-4999-c26d-3b7304ec887f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                         Model           MSE         RMSE          MAE  \\\n",
              "0            XGBoost Regressor  1.060505e+06  1029.808448   801.602739   \n",
              "1             Voting Regressor  1.883362e+06  1372.356378  1076.559895   \n",
              "2      Random Forest Regressor  1.922781e+06  1386.643662  1101.804300   \n",
              "3  Gradient Boosting Regressor  6.289910e+05   793.089524   628.807789   \n",
              "\n",
              "       MAPE        R2  Adjusted R2  \n",
              "0  0.052284  0.941272     0.938164  \n",
              "1  0.069001  0.895704     0.890186  \n",
              "2  0.071254  0.893521     0.887887  \n",
              "3  0.041149  0.965168     0.963325  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-16c46b63-aed0-4dd1-af51-e5c6be8f49af\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Model</th>\n",
              "      <th>MSE</th>\n",
              "      <th>RMSE</th>\n",
              "      <th>MAE</th>\n",
              "      <th>MAPE</th>\n",
              "      <th>R2</th>\n",
              "      <th>Adjusted R2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>XGBoost Regressor</td>\n",
              "      <td>1.060505e+06</td>\n",
              "      <td>1029.808448</td>\n",
              "      <td>801.602739</td>\n",
              "      <td>0.052284</td>\n",
              "      <td>0.941272</td>\n",
              "      <td>0.938164</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Voting Regressor</td>\n",
              "      <td>1.883362e+06</td>\n",
              "      <td>1372.356378</td>\n",
              "      <td>1076.559895</td>\n",
              "      <td>0.069001</td>\n",
              "      <td>0.895704</td>\n",
              "      <td>0.890186</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Random Forest Regressor</td>\n",
              "      <td>1.922781e+06</td>\n",
              "      <td>1386.643662</td>\n",
              "      <td>1101.804300</td>\n",
              "      <td>0.071254</td>\n",
              "      <td>0.893521</td>\n",
              "      <td>0.887887</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Gradient Boosting Regressor</td>\n",
              "      <td>6.289910e+05</td>\n",
              "      <td>793.089524</td>\n",
              "      <td>628.807789</td>\n",
              "      <td>0.041149</td>\n",
              "      <td>0.965168</td>\n",
              "      <td>0.963325</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-16c46b63-aed0-4dd1-af51-e5c6be8f49af')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-16c46b63-aed0-4dd1-af51-e5c6be8f49af button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-16c46b63-aed0-4dd1-af51-e5c6be8f49af');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-af707d9a-6efe-4339-8d33-f55ff5011d17\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-af707d9a-6efe-4339-8d33-f55ff5011d17')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-af707d9a-6efe-4339-8d33-f55ff5011d17 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_617ff1d5-3905-49a0-b455-3067cb82d6ce\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('results_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_617ff1d5-3905-49a0-b455-3067cb82d6ce button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('results_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "results_df",
              "summary": "{\n  \"name\": \"results_df\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"Model\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Voting Regressor\",\n          \"Gradient Boosting Regressor\",\n          \"XGBoost Regressor\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 636115.0580374468,\n        \"min\": 628990.9929294396,\n        \"max\": 1922780.6464840001,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1883362.0277789228,\n          628990.9929294396,\n          1060505.4389110731\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 287.0492166973946,\n        \"min\": 793.0895239059962,\n        \"max\": 1386.6436624035753,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1372.356377833004,\n          793.0895239059962,\n          1029.8084476790202\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 227.38100117767718,\n        \"min\": 628.8077893900046,\n        \"max\": 1101.8043,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1076.559894986979,\n          628.8077893900046,\n          801.6027392578125\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAPE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.01428992750157524,\n        \"min\": 0.0411485609102296,\n        \"max\": 0.07125373937250905,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.06900074292930196,\n          0.0411485609102296,\n          0.052284325454684685\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.03522654582468908,\n        \"min\": 0.8935209612696366,\n        \"max\": 0.9651679683693234,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.8957038710235237,\n          0.9651679683693234,\n          0.9412717223167419\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Adjusted R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.03709038422811177,\n        \"min\": 0.8878871496966015,\n        \"max\": 0.9633250037327796,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.8901855573210646,\n          0.9633250037327796,\n          0.9381644060372045\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 297
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#plot"
      ],
      "metadata": {
        "id": "gszg6-FPuSg1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# Assuming results_df contains the following columns:\n",
        "# 'Model', 'MSE', 'RMSE', 'MAE', 'MAPE', 'R2', and 'Adjusted R2'\n",
        "\n",
        "# Plot MSE for each model\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.barplot(x='Model', y='MSE', data=results_df, palette='viridis')\n",
        "plt.title('Model MSE')\n",
        "plt.xlabel('Model')\n",
        "plt.ylabel('MSE')\n",
        "plt.xticks(rotation=45)\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "# Plot RMSE for each model\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.barplot(x='Model', y='RMSE', data=results_df, palette='plasma')\n",
        "plt.title('Model RMSE')\n",
        "plt.xlabel('Model')\n",
        "plt.ylabel('RMSE')\n",
        "plt.xticks(rotation=45)\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "# Plot MAE for each model\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.barplot(x='Model', y='MAE', data=results_df, palette='coolwarm')\n",
        "plt.title('Model MAE')\n",
        "plt.xlabel('Model')\n",
        "plt.ylabel('MAE')\n",
        "plt.xticks(rotation=45)\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "# Plot MAPE for each model\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.barplot(x='Model', y='MAPE', data=results_df, palette='magma')\n",
        "plt.title('Model MAPE')\n",
        "plt.xlabel('Model')\n",
        "plt.ylabel('MAPE')\n",
        "plt.xticks(rotation=45)\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "# Plot R-squared for each model\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.barplot(x='Model', y='R2', data=results_df, palette='cividis')\n",
        "plt.title('Model R-squared (R²)')\n",
        "plt.xlabel('Model')\n",
        "plt.ylabel('R-squared (R²)')\n",
        "plt.xticks(rotation=45)\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "# Plot Adjusted R-squared for each model\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.barplot(x='Model', y='Adjusted R2', data=results_df, palette='cool')\n",
        "plt.title('Model Adjusted R-squared (Adjusted R²)')\n",
        "plt.xlabel('Model')\n",
        "plt.ylabel('Adjusted R-squared (Adjusted R²)')\n",
        "plt.xticks(rotation=45)\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "l1hmQRQsuTt2",
        "outputId": "37c6c45a-e7f3-4416-85aa-512e453fd9ee"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-232-3af9365a6471>:9: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.barplot(x='Model', y='MSE', data=results_df, palette='viridis')\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-232-3af9365a6471>:19: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.barplot(x='Model', y='RMSE', data=results_df, palette='plasma')\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-232-3af9365a6471>:29: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.barplot(x='Model', y='MAE', data=results_df, palette='coolwarm')\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-232-3af9365a6471>:39: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.barplot(x='Model', y='MAPE', data=results_df, palette='magma')\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-232-3af9365a6471>:49: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.barplot(x='Model', y='R2', data=results_df, palette='cividis')\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-232-3af9365a6471>:59: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.barplot(x='Model', y='Adjusted R2', data=results_df, palette='cool')\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "using cv k=5 and 10"
      ],
      "metadata": {
        "id": "dNomZTo_84Gj"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#all model using cv"
      ],
      "metadata": {
        "id": "PPFtcrPj8qNQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.model_selection import train_test_split, cross_val_score\n",
        "from sklearn.metrics import mean_squared_error, r2_score\n",
        "from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\n",
        "from sklearn.linear_model import LinearRegression, Ridge, Lasso\n",
        "from sklearn.svm import SVR\n",
        "import xgboost as xgb\n",
        "from sklearn.model_selection import KFold, cross_val_score\n",
        "from sklearn.model_selection import KFold, cross_val_score\n",
        "from sklearn.naive_bayes import MultinomialNB\n",
        "\n",
        "from sklearn.naive_bayes import MultinomialNB, GaussianNB\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.ensemble import AdaBoostClassifier, RandomForestRegressor, GradientBoostingRegressor, VotingRegressor\n",
        "from sklearn.tree import DecisionTreeRegressor\n",
        "from sklearn.svm import SVR, SVC\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "import xgboost as xgb\n",
        "from sklearn.linear_model import Ridge, Lasso, LinearRegression\n",
        "import joblib\n",
        "\n",
        "\n",
        "\n",
        "# Split data into features (X) and target variable (y)\n",
        "X = df.head(1000).drop(columns=['charges'])\n",
        "y = df['charges'].head(1000)  # Target variable\n",
        "\n",
        "# Split data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Initialize estimators for VotingRegressor\n",
        "estimators = [\n",
        "    ('xgboost', xgb.XGBRegressor()),\n",
        "    ('decision_tree', DecisionTreeRegressor(random_state=42)),\n",
        "    ('random_forest', RandomForestRegressor(random_state=42))\n",
        "]\n",
        "\n",
        "\n",
        "# Initialize a dictionary to store models\n",
        "models = {\n",
        "    # Regressors\n",
        "    'XGBoost Regressor': xgb.XGBRegressor(),\n",
        "    'Voting Regressor': VotingRegressor(estimators),  # You may need to define `estimators` elsewhere\n",
        "    'Random Forest Regressor': RandomForestRegressor(random_state=42),\n",
        "    'Gradient Boosting Regressor': GradientBoostingRegressor(random_state=42),\n",
        "}\n",
        "\n",
        "\n",
        "results = {}\n",
        "\n",
        "# Function to calculate adjusted R-squared\n",
        "def adjusted_r2_score(y_true, y_pred, n_features):\n",
        "    r2 = r2_score(y_true, y_pred)\n",
        "    adjusted_r2 = 1 - (1 - r2) * ((len(y_true) - 1) / (len(y_true) - n_features - 1))\n",
        "    return adjusted_r2\n",
        "\n",
        "# Define the number of folds for cross-validation\n",
        "kf5 = KFold(n_splits=5, shuffle=True, random_state=42)\n",
        "kf10 = KFold(n_splits=10, shuffle=True, random_state=42)\n",
        "\n",
        "# Create a function to perform cross-validation and return the mean scores\n",
        "def cross_val_scores(model, X, y, kf):\n",
        "    scores = cross_val_score(model, X, y, cv=kf, scoring='neg_mean_squared_error')\n",
        "    return -scores.mean()\n",
        "\n",
        "\n",
        "# Perform cross-validation and collect scores for k=5\n",
        "cv_scores_5 = {}\n",
        "for name, model in models.items():\n",
        "    cv_scores_5[name] = cross_val_scores(model, X, y, kf5)\n",
        "\n",
        "# Perform cross-validation and collect scores for k=10\n",
        "cv_scores_10 = {}\n",
        "for name, model in models.items():\n",
        "    cv_scores_10[name] = cross_val_scores(model, X, y, kf10)\n",
        "\n",
        "# Evaluate each model\n",
        "for name, model in models.items():\n",
        "    #print(name)\n",
        "    # Train the model\n",
        "    model.fit(X_train, y_train)\n",
        "\n",
        "    # Predict on the test set\n",
        "    y_pred = model.predict(X_test)\n",
        "    # Evaluate the model\n",
        "    mae = mean_absolute_error(y_test, y_pred)\n",
        "    mse = mean_squared_error(y_test, y_pred)\n",
        "    rmse = np.sqrt(mse)\n",
        "    mape = mean_absolute_percentage_error(y_test, y_pred)\n",
        "    r2 = r2_score(y_test, y_pred)\n",
        "    adjusted_r2 = adjusted_r2_score(y_test, y_pred, X_test.shape[1])\n",
        "    # Store the results\n",
        "    results[name] = {'MSE': mse, 'RMSE': rmse, 'MAE': mae, 'MAPE': mape, 'R2': r2, 'adjusted R2': adjusted_r2}\n",
        "\n",
        "\n",
        "# Convert results to DataFrame\n",
        "results_df = pd.DataFrame(results).T.reset_index().rename(columns={'index': 'Model'})\n",
        "joblib.dump(model, f'{name}_model.pkl')"
      ],
      "metadata": {
        "id": "nQ-HArbx8gNP",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b14f8c51-68f1-4ea2-c1d4-2edd6fb27fa3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['Gradient Boosting Regressor_model.pkl']"
            ]
          },
          "metadata": {},
          "execution_count": 255
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "all metrics in bar like dis accuracy bar chart"
      ],
      "metadata": {
        "id": "i-Oe0rUe8xUM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "results_df"
      ],
      "metadata": {
        "id": "Px_0MTMb81mb",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        },
        "outputId": "27941197-a126-44fa-b17d-93ec48dc707b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                         Model           MSE         RMSE          MAE  \\\n",
              "0            XGBoost Regressor  1.060505e+06  1029.808448   801.602739   \n",
              "1             Voting Regressor  1.883362e+06  1372.356378  1076.559895   \n",
              "2      Random Forest Regressor  1.922781e+06  1386.643662  1101.804300   \n",
              "3  Gradient Boosting Regressor  6.289910e+05   793.089524   628.807789   \n",
              "\n",
              "       MAPE        R2  adjusted R2  \n",
              "0  0.052284  0.941272     0.938164  \n",
              "1  0.069001  0.895704     0.890186  \n",
              "2  0.071254  0.893521     0.887887  \n",
              "3  0.041149  0.965168     0.963325  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e306204c-1921-4bb7-81c8-a2bb47f61d13\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Model</th>\n",
              "      <th>MSE</th>\n",
              "      <th>RMSE</th>\n",
              "      <th>MAE</th>\n",
              "      <th>MAPE</th>\n",
              "      <th>R2</th>\n",
              "      <th>adjusted R2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>XGBoost Regressor</td>\n",
              "      <td>1.060505e+06</td>\n",
              "      <td>1029.808448</td>\n",
              "      <td>801.602739</td>\n",
              "      <td>0.052284</td>\n",
              "      <td>0.941272</td>\n",
              "      <td>0.938164</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Voting Regressor</td>\n",
              "      <td>1.883362e+06</td>\n",
              "      <td>1372.356378</td>\n",
              "      <td>1076.559895</td>\n",
              "      <td>0.069001</td>\n",
              "      <td>0.895704</td>\n",
              "      <td>0.890186</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Random Forest Regressor</td>\n",
              "      <td>1.922781e+06</td>\n",
              "      <td>1386.643662</td>\n",
              "      <td>1101.804300</td>\n",
              "      <td>0.071254</td>\n",
              "      <td>0.893521</td>\n",
              "      <td>0.887887</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Gradient Boosting Regressor</td>\n",
              "      <td>6.289910e+05</td>\n",
              "      <td>793.089524</td>\n",
              "      <td>628.807789</td>\n",
              "      <td>0.041149</td>\n",
              "      <td>0.965168</td>\n",
              "      <td>0.963325</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e306204c-1921-4bb7-81c8-a2bb47f61d13')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e306204c-1921-4bb7-81c8-a2bb47f61d13 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e306204c-1921-4bb7-81c8-a2bb47f61d13');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-2fb173c3-f5b0-4e81-bea7-310c124316d4\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2fb173c3-f5b0-4e81-bea7-310c124316d4')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-2fb173c3-f5b0-4e81-bea7-310c124316d4 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_8087cffb-d34e-4c75-8cb3-770582321f5f\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('results_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_8087cffb-d34e-4c75-8cb3-770582321f5f button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('results_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "results_df",
              "summary": "{\n  \"name\": \"results_df\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"Model\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Voting Regressor\",\n          \"Gradient Boosting Regressor\",\n          \"XGBoost Regressor\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 636115.0580374468,\n        \"min\": 628990.9929294396,\n        \"max\": 1922780.6464840001,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1883362.0277789228,\n          628990.9929294396,\n          1060505.4389110731\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 287.0492166973946,\n        \"min\": 793.0895239059962,\n        \"max\": 1386.6436624035753,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1372.356377833004,\n          793.0895239059962,\n          1029.8084476790202\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 227.38100117767718,\n        \"min\": 628.8077893900046,\n        \"max\": 1101.8043,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1076.559894986979,\n          628.8077893900046,\n          801.6027392578125\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAPE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.01428992750157524,\n        \"min\": 0.0411485609102296,\n        \"max\": 0.07125373937250905,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.06900074292930196,\n          0.0411485609102296,\n          0.052284325454684685\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.03522654582468908,\n        \"min\": 0.8935209612696366,\n        \"max\": 0.9651679683693234,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.8957038710235237,\n          0.9651679683693234,\n          0.9412717223167419\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"adjusted R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.03709038422811177,\n        \"min\": 0.8878871496966015,\n        \"max\": 0.9633250037327796,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.8901855573210646,\n          0.9633250037327796,\n          0.9381644060372045\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 236
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#plot\n"
      ],
      "metadata": {
        "id": "gvixhhdC2gUa"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# Assuming results_df contains the following columns:\n",
        "# 'Model', 'MSE', 'RMSE', 'MAE', 'MAPE', 'R2', and 'Adjusted R2'\n",
        "\n",
        "# Plot MSE for each model\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.barplot(x='Model', y='MSE', data=results_df, palette='viridis')\n",
        "plt.title('Model MSE')\n",
        "plt.xlabel('Model')\n",
        "plt.ylabel('MSE')\n",
        "plt.xticks(rotation=45)\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "# Plot RMSE for each model\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.barplot(x='Model', y='RMSE', data=results_df, palette='plasma')\n",
        "plt.title('Model RMSE')\n",
        "plt.xlabel('Model')\n",
        "plt.ylabel('RMSE')\n",
        "plt.xticks(rotation=45)\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "# Plot MAE for each model\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.barplot(x='Model', y='MAE', data=results_df, palette='coolwarm')\n",
        "plt.title('Model MAE')\n",
        "plt.xlabel('Model')\n",
        "plt.ylabel('MAE')\n",
        "plt.xticks(rotation=45)\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "# Plot MAPE for each model\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.barplot(x='Model', y='MAPE', data=results_df, palette='magma')\n",
        "plt.title('Model MAPE')\n",
        "plt.xlabel('Model')\n",
        "plt.ylabel('MAPE')\n",
        "plt.xticks(rotation=45)\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "# Plot R-squared for each model\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.barplot(x='Model', y='R2', data=results_df, palette='cividis')\n",
        "plt.title('Model R-squared (R²)')\n",
        "plt.xlabel('Model')\n",
        "plt.ylabel('R-squared (R²)')\n",
        "plt.xticks(rotation=45)\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "# Plot Adjusted R-squared for each model\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.barplot(x='Model', y='adjusted R2', data=results_df, palette='cool')\n",
        "plt.title('Model Adjusted R-squared (Adjusted R²)')\n",
        "plt.xlabel('Model')\n",
        "plt.ylabel('Adjusted R-squared (Adjusted R²)')\n",
        "plt.xticks(rotation=45)\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "o1rvk9Ar2hyX",
        "outputId": "16f6c072-72e6-4055-f510-149ff02a984c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-237-d39cf89b35c3>:9: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.barplot(x='Model', y='MSE', data=results_df, palette='viridis')\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-237-d39cf89b35c3>:19: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.barplot(x='Model', y='RMSE', data=results_df, palette='plasma')\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-237-d39cf89b35c3>:29: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.barplot(x='Model', y='MAE', data=results_df, palette='coolwarm')\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-237-d39cf89b35c3>:39: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.barplot(x='Model', y='MAPE', data=results_df, palette='magma')\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "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lDt3bp0/f16NGjXSjBkz5OXlZeHapw9v5q0G4BklP9js2rVLUVFRcnJyUs2aNfXHH39ow4YNcnNzU7Vq1eTg4CCj0ajs2bObXmWS9OoTLgqAp5e83e3fv183b95Urly55OnpqTlz5igkJESFChVS1apVlTlzZt26dUtvvfWWnJ2dU2yHdgekT8nb+NGjR3Xz5k0VKlRI77//vtasWaOdO3eqe/fuqlGjhrJmzaro6GhlzJjRdG5NQhsHzMdoNJra6aBBg7RlyxadP39enp6eKly4sKZMmaJ69epJenQD7NatW+revbsyZ86sChUqWLLq6Qo93cAzGDBggJYvXy5XV1f9888/qlixogICAlS+fHlJUmxsrO7du6fWrVvr+vXr2rt3LxcDwHNI/o7eAQMGaOPGjYqJiZG7u7sMBoM2btyorFmzSno0odL169fVpUsXXb9+Xb/99hvtDkjnkrfxQYMGac2aNaZXg3l6emrkyJEqUKCApEePct29e1etWrXS7du3tWvXLto4kMbGjRunsWPHKjAwUJUrV1aXLl20atUqbd26VVWqVNGDBw80c+ZMBQUF6caNGwoPD39jJ01LDe/pBp7SDz/8oEWLFmnVqlXau3evevbsqa1bt+ru3buSHt2xnzp1qurWravo6GiFh4ebJnYB8GySLsanTJmi+fPna968eTp37pyqVaum3bt3a8+ePZIeBe558+apQ4cOun79uulinHYHpG9JbXzSpEmm1w2dO3dOXl5e2rRpk/755x9JjwL36NGj1bRpU924cUM7d+6kjQNpIKlf1mg06v79+9q5c6fGjRunGjVq6JdfflFgYKAmTZqkKlWqKC4uTo6OjsqbN6+qVKmiPXv2yM7OTg8fPiRw/38MLweeIGnYW9I/IyIi1L59e1WsWFGrV6/WuHHj9P3336tmzZp68OCBJMnPz4+JXYAXkLz3y2g06sCBAwoICJCXl5c2b96s77//XrNnz1bt2rUVExOjDBkyqESJEpKkzz//nHYHpHPJz60PHz7Url271K9fP9WoUUObN2/W8uXLNX78eFWrVk0PHjyQo6OjPvjgA9na2qpfv35v9OzHQFpJ/ujHtWvXlC1bNsXExKho0aLavHmz/Pz8NG7cOHXs2FHx8fFatGiRihUrpmbNmpm28SZPmpYaerqBVCR/fuXYsWOSpEuXLundd9/VgQMH1K5dO3333Xfq2rWrHj58qJkzZ+qnn36Sm5ubvvjiC9NdeA42wNNLHriPHz9uGlKaJUsW/fTTTylO8omJiVq8eLFWrVqlatWqqWvXrrQ7IJ1Lfm6NjIyUvb29YmNjVblyZYWEhJja+Oeff266kA8ODtb777+vQYMGydbWljYOmFnydtqjRw91795dN2/elLW1tfr166fWrVtr3Lhx6tKli6RHkwqvXr1aZ86cSbEderhTInQD/2IwGEwX/r1791bFihVlNBr1/vvvq2PHjqpcubJmzZplOtjcv39fmzZt0qlTp1Jsh4MN8PSSB+4+ffqoR48eunLlivLkyaNJkybps88+09ixY03t7vr161q/fr0iIyNTbId2B6RPydt4ly5d1KhRIz148ECZMmVS8+bN9fHHH2vatGnq3LmzJOn27dtauXKl/vrrrxTboY0D5pXUTi9duqQ9e/boiy++UJ48efT999/rzJkzKlmypLp06aL4+HjduXNH3bp1U1xcnD777DML1zx941Yh8C9Jd/f+/PNP3bt3T0FBQbKyslLLli11+PBh7dmzR+XKldPDhw919epVdezYUXfv3lW/fv0sXHPg1ZV0kr9w4YIOHjyoESNGqECBAho+fLiqVKkiFxcX1alTR/fu3dO9e/fUvn17RUdHq0ePHhauOYCnkdTGr127psuXL2vs2LFydHTU+PHj1aJFCzk6OqpNmzaKiYlRbGys2rVrp/j4eFMIB5B2Ro8erX379snDw0Ply5eX0WhUqVKlNGnSJLVq1UoVK1aUtbW17OzsFB0drf3795tGm3FjLHWEbiAVK1asUEBAgLJmzapvv/1WklSgQAF17NhR9+/f17vvvquCBQvK0dFRDg4O+u2330zD3jjYAM9n7Nix2rRpk5ydnVWyZElJUu7cubV27Vr5+Piofv36un//vvLly6cHDx6kmKyQdgekf9OmTdPs2bOVP39+eXp6SpLy5s2rgQMHqmfPnipQoIBy5colOzs7xcfHa8+ePbRxIA0kf4bbYDDI0dFRW7duVaFChWRtbW26ada0aVOVKVNGS5YskcFg0FtvvaW2bdsyn8pT4JVhgB6fNG3x4sWaN2+eDh8+rGPHjsnNzc1UNjo6Wjt27NCtW7fk4uKi2rVrc7ABnkPyk7wkbdmyRZ999plsbW0VFhamwoULm4ak3rlzR1u2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joYMGaINGzZIevRIV1LgvnjxovLnz2+xOgNvsqRRY4mJiaa2++DBAzk6OmrMmDE6evSopk2bJjs7O3Xo0EFZs2a1bIWRKsb9IV1KPiy1f//+GjFihH799VdFRkZKkkaNGqU6depo69atGjNmjI4fP66PPvpInTp1smS1gdeKnZ2dHBwcFBMTI+nR+3elRxMZ+vr6au3atZo8ebJOnz5tyWoCeErJz60DBw5U7969tXbtWkVHRytr1qwaPHiwypcvr02bNunrr79WTEyMvL29TROtATC/fz/aYWVlpcyZM6to0aKaM2eOJMnR0VEJCQmSpAIFCihXrlwaP368du3aleo2YHlMpIZ0bcKECfruu+8UFBSksmXLSkp5l3706NEKDAzUjRs3lC9fPu3cuVP29vaWrDLwSnrShGdfffWVFi9erH379snd3d30DOfIkSMVHBysqKgotW3bVl9++SXPdwKviG+//Vbff/+9goKCVKJECTk6OpqOATdu3NC4ceO0Zs0axcfHK0eOHNq7dy/nViANJD8X7927Vw4ODsqaNavc3d114cIFffjhh3JxcdH27dtla2srGxsbNWvWTP369dP48eN17NgxHTt2zMJ7gdQQupFuxcTEmGZL7tGjh06fPq3Dhw9r5syZcnNzU0BAgAoWLKgjR44oOjpaXl5esrGxSfUZNABPlvwkHxwcLGtra2XOnNn0WqAqVaroxo0bWrt2rfLmzavMmTOrWbNmat++vXbu3KnFixfrzJkzypgxoyV3A8BTiI6OVsuWLfXxxx+rQ4cOOn/+vE6dOqWZM2eqUqVKatmypbJmzaqTJ0/q3Llz8vX15dwKpIHkN6779u2rlStX6s6dO6pSpYpatmypVq1aKSwsTB07dlRUVJRKliypK1euKCYmRn///bcmT56sH3/8Ufv27WMS03SIoyfSLScnJ92/f18LFy6Um5ubpk2bpocPH6pIkSLatGmToqKitGbNGr377rumdRITE7koAJ5B8uGmffr00ZIlS2Q0GpUvXz59/PHHGjp0qNavX69mzZqpWrVqyp8/vxISEhQfH6/69evr4cOH+umnnxjKBrwibGxsdOrUKYWFhcnd3V3Tpk3TtWvX5OTkpLFjxyo6OlojR45U2bJlTSPMOLcC5mMwGGRlZWUK3Lt379bmzZu1YsUK0w3v77//XvHx8erQoYMO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9ddfp6KiAoCQkBCOHTvGzp07KSsrY/369aSlpQGwdu1ali9fTp8+fWqy2SI2oUJqIiIiIiLyRC1evJhVq1Zx7do16zGz2Ux5eTktWrQgPz+fwMBALBYLKSkptG3b1vo+FU2T541GukVERERE5Ilq3749d+/eZc+ePdZjTZs2pUWLFlRUVNC5c2cGDBiAm5sbjRo1qvJZBW553ih0i4iIiIjIE9WzZ0/s7OxISEjgwoULVc4ZjUYKCws5cOAAHTt2xNXVtYZaKVI99DOSiIiIiIg8US+99BLx8fGMGzcOR0dHZs2aRffu3QG4cOECgYGBXL16le3btwNgsVhUpVyeW1rTLSIiIiIiT1x5eTlJSUlMmTKFxo0b07VrV8rKyigsLATgwIED2NvbU15ejslkquHWitiOQreIiIiIiNjM8ePHSUxM5Pvvv6dVq1Z4e3sTFBSEyWRS0TSpFRS6RURERESk2mmEW2oLhW4REREREbEprdmW2kzVy0VERERExKYUuKU2U+gWERERERERsRGFbhEREREREREbUegWERERERERsRGFbhEREREREREbUegWERERERERsRGFbhEREREREREbUegWERERERERsRGFbhEREXls+/fvx2AwcOvWrV/8mTZt2hATE2OzNomIiDxNFLpFRESeYwEBARgMBoKDgx85FxISgsFgICAgoPobJiIiUksodIuIiDznWrZsyZYtW7h79671WElJCampqbRq1aoGWyYiIvL8U+gWERF5znl7e9OyZUu2bdtmPbZt2zZatWqFl5eX9di9e/cIDQ2lUaNGODk50atXL3Jycqpc64svvqBDhw44Ozvz5ptvcv78+Uf+vczMTHr37o2zszMtW7YkNDSU4uJim92fiIjI00yhW0REpBYYP348SUlJ1teffvop48aNq/Ke2bNnk56ezoYNG/juu+9o3749fn5+3LhxA4CffvqJwYMH895773H8+HEmTpzInDlzqlzj7Nmz9OvXjyFDhpCbm8uf//xnMjMzmTp1qu1vUkRE5Cmk0C0iIlILjB49mszMTC5cuMCFCxfIyspi9OjR1vPFxcXExcWxfPly3nnnHbp06cK6detwdnZm/fr1AMTFxdGuXTv+9Kc/0bFjR0aNGvXIevClS5cyatQowsLC8PDw4LXXXmP16tVs3LiRkpKS6rxlERGRp4JdTTdAREREbK9hw4b079+f5ORkLBYL/fv3x93d3Xr+7Nmz3L9/n9/85jfWY/b29vj4+JCfnw9Afn4+r776apXr+vr6Vnl94sQJcnNz+eyzz6zHLBYLFRUVnDt3js6dO9vi9kRERJ5aCt0iIiK1xPjx463TvGNjY23ybxQVFREUFERoaOgj51S0TUREaiOFbhERkVqiX79+lJaWYjAY8PPzq3KuXbt2ODg4kJWVRevWrQG4f/8+OTk5hIWFAdC5c2f++te/Vvnc4cOHq7z29vYmLy+P9u3b2+5GREREniFa0y0iIlJLmEwm8vPzycvLw2QyVTnn6urK5MmTmTVrFl9++SV5eXkEBgZy584dJkyYAEBwcDBnzpxh1qxZnD59mtTUVJKTk6tcJyIigoMHDzJ16lSOHz/OmTNn+Pzzz1VITUREai2FbhERkVqkXr161KtX72fPLVu2jCFDhuDv74+3tzc//PADu3fv5oUXXgAeTA9PT08nIyMDT09P4uPjWbJkSZVrdOvWjb///e98//339O7dGy8vL+bPn0+zZs1sfm8iIiJPI4PFYrHUdCNEREREREREnkca6RYRERERERGxEYVuERERERERERtR6BYRERERERGxEYVuERERERERERtR6BYRERERERGxEYVuERERERERERtR6BYRERERERGxEYVuERERERERERtR6BYRERERERGxEYVuERERERERERtR6BYRERERERGxEYVuERERERERERv5PwHigQfUaHfBAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-237-d39cf89b35c3>:49: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.barplot(x='Model', y='R2', data=results_df, palette='cividis')\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-237-d39cf89b35c3>:59: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.barplot(x='Model', y='adjusted R2', data=results_df, palette='cool')\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import mean_squared_error, mean_absolute_error, mean_absolute_percentage_error, r2_score\n",
        "\n",
        "# For cross-validation\n",
        "cv_results = {}\n",
        "\n",
        "for name, model in models.items():\n",
        "    # Perform cross-validation\n",
        "    cv_mse_scores = []\n",
        "    cv_mae_scores = []\n",
        "    cv_mape_scores = []\n",
        "    cv_r2_scores = []\n",
        "\n",
        "    # Cross-validation with KFold\n",
        "    kf = KFold(n_splits=5, shuffle=True, random_state=42)\n",
        "\n",
        "    for train_index, test_index in kf.split(X):\n",
        "        X_train, X_test = X.iloc[train_index], X.iloc[test_index]\n",
        "        y_train, y_test = y.iloc[train_index], y.iloc[test_index]\n",
        "\n",
        "        model.fit(X_train, y_train)\n",
        "        y_pred = model.predict(X_test)\n",
        "\n",
        "        # Calculate metrics\n",
        "        mse = mean_squared_error(y_test, y_pred)\n",
        "        mae = mean_absolute_error(y_test, y_pred)\n",
        "        mape = mean_absolute_percentage_error(y_test, y_pred)\n",
        "        r2 = r2_score(y_test, y_pred)\n",
        "\n",
        "        # Append to lists\n",
        "        cv_mse_scores.append(mse)\n",
        "        cv_mae_scores.append(mae)\n",
        "        cv_mape_scores.append(mape)\n",
        "        cv_r2_scores.append(r2)\n",
        "\n",
        "    # Store mean and std of each metric\n",
        "    cv_results[name] = {\n",
        "        'CV Mean MSE': np.mean(cv_mse_scores),\n",
        "        'CV Std MSE': np.std(cv_mse_scores),\n",
        "        'CV Mean RMSE': np.sqrt(np.mean(cv_mse_scores)),\n",
        "        'CV Std RMSE': np.std(np.sqrt(cv_mse_scores)),\n",
        "        'CV Mean MAE': np.mean(cv_mae_scores),\n",
        "        'CV Std MAE': np.std(cv_mae_scores),\n",
        "        'CV Mean MAPE': np.mean(cv_mape_scores),\n",
        "        'CV Std MAPE': np.std(cv_mape_scores),\n",
        "        'CV Mean R2': np.mean(cv_r2_scores),\n",
        "        'CV Std R2': np.std(cv_r2_scores)\n",
        "    }\n",
        "\n",
        "# Convert cross-validation results to DataFrame\n",
        "cv_results_df = pd.DataFrame(cv_results).T.reset_index().rename(columns={'index': 'Model'})\n",
        "\n"
      ],
      "metadata": {
        "id": "93vu8fZqN8kA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "cv_results_df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 227
        },
        "id": "ehlZYz8ecoxV",
        "outputId": "ad3dcbbe-ccb7-43a7-a057-4b9177cf91d1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                         Model   CV Mean MSE     CV Std MSE  CV Mean RMSE  \\\n",
              "0            XGBoost Regressor  1.114830e+06   47744.912508   1055.855146   \n",
              "1             Voting Regressor  1.672674e+06  143973.161077   1293.318992   \n",
              "2      Random Forest Regressor  2.000314e+06  126884.748911   1414.324430   \n",
              "3  Gradient Boosting Regressor  6.146234e+05   47071.810878    783.979199   \n",
              "\n",
              "   CV Std RMSE  CV Mean MAE  CV Std MAE  CV Mean MAPE  CV Std MAPE  \\\n",
              "0    22.634282   832.644640   23.901213      0.054060     0.001300   \n",
              "1    55.273353  1027.981493   43.386587      0.065523     0.003249   \n",
              "2    45.351870  1134.399630   38.243428      0.072043     0.001762   \n",
              "3    30.145203   632.181454   22.308449      0.040988     0.002129   \n",
              "\n",
              "   CV Mean R2  CV Std R2  \n",
              "0    0.940937   0.004516  \n",
              "1    0.911054   0.012070  \n",
              "2    0.893555   0.013380  \n",
              "3    0.967434   0.003143  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f450c779-4da3-4673-90f2-e5d4e0c84811\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Model</th>\n",
              "      <th>CV Mean MSE</th>\n",
              "      <th>CV Std MSE</th>\n",
              "      <th>CV Mean RMSE</th>\n",
              "      <th>CV Std RMSE</th>\n",
              "      <th>CV Mean MAE</th>\n",
              "      <th>CV Std MAE</th>\n",
              "      <th>CV Mean MAPE</th>\n",
              "      <th>CV Std MAPE</th>\n",
              "      <th>CV Mean R2</th>\n",
              "      <th>CV Std R2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>XGBoost Regressor</td>\n",
              "      <td>1.114830e+06</td>\n",
              "      <td>47744.912508</td>\n",
              "      <td>1055.855146</td>\n",
              "      <td>22.634282</td>\n",
              "      <td>832.644640</td>\n",
              "      <td>23.901213</td>\n",
              "      <td>0.054060</td>\n",
              "      <td>0.001300</td>\n",
              "      <td>0.940937</td>\n",
              "      <td>0.004516</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Voting Regressor</td>\n",
              "      <td>1.672674e+06</td>\n",
              "      <td>143973.161077</td>\n",
              "      <td>1293.318992</td>\n",
              "      <td>55.273353</td>\n",
              "      <td>1027.981493</td>\n",
              "      <td>43.386587</td>\n",
              "      <td>0.065523</td>\n",
              "      <td>0.003249</td>\n",
              "      <td>0.911054</td>\n",
              "      <td>0.012070</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Random Forest Regressor</td>\n",
              "      <td>2.000314e+06</td>\n",
              "      <td>126884.748911</td>\n",
              "      <td>1414.324430</td>\n",
              "      <td>45.351870</td>\n",
              "      <td>1134.399630</td>\n",
              "      <td>38.243428</td>\n",
              "      <td>0.072043</td>\n",
              "      <td>0.001762</td>\n",
              "      <td>0.893555</td>\n",
              "      <td>0.013380</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Gradient Boosting Regressor</td>\n",
              "      <td>6.146234e+05</td>\n",
              "      <td>47071.810878</td>\n",
              "      <td>783.979199</td>\n",
              "      <td>30.145203</td>\n",
              "      <td>632.181454</td>\n",
              "      <td>22.308449</td>\n",
              "      <td>0.040988</td>\n",
              "      <td>0.002129</td>\n",
              "      <td>0.967434</td>\n",
              "      <td>0.003143</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f450c779-4da3-4673-90f2-e5d4e0c84811')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f450c779-4da3-4673-90f2-e5d4e0c84811 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f450c779-4da3-4673-90f2-e5d4e0c84811');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-6fc8af7c-ba69-495a-94da-737e1e2f90d2\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6fc8af7c-ba69-495a-94da-737e1e2f90d2')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-6fc8af7c-ba69-495a-94da-737e1e2f90d2 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_09058eb3-0edc-4e39-b6eb-55b75a2b55fa\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('cv_results_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_09058eb3-0edc-4e39-b6eb-55b75a2b55fa button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('cv_results_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "cv_results_df",
              "summary": "{\n  \"name\": \"cv_results_df\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"Model\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Voting Regressor\",\n          \"Gradient Boosting Regressor\",\n          \"XGBoost Regressor\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CV Mean MSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 611857.404953851,\n        \"min\": 614623.3851273666,\n        \"max\": 2000313.5924284998,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1672674.016258369,\n          614623.3851273666,\n          1114830.0896254545\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CV Std MSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 51296.063179374956,\n        \"min\": 47071.81087821191,\n        \"max\": 143973.16107675966,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          143973.16107675966,\n          47071.81087821191,\n          47744.912507715075\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CV Mean RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 278.41969008178495,\n        \"min\": 783.979199422642,\n        \"max\": 1414.3244296937319,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1293.3189924602395,\n          783.979199422642,\n          1055.8551461376956\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CV Std RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14.716527258484623,\n        \"min\": 22.63428247342673,\n        \"max\": 55.27335275190292,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          55.27335275190292,\n          30.14520268893286,\n          22.63428247342673\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CV Mean MAE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 221.6610844839133,\n        \"min\": 632.1814537315197,\n        \"max\": 1134.39963,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1027.9814925520836,\n          632.1814537315197,\n          832.6446396484374\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CV Std MAE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.458566533875779,\n        \"min\": 22.308449462341862,\n        \"max\": 43.3865871051685,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          43.3865871051685,\n          22.308449462341862,\n          23.901212667636806\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CV Mean MAPE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.013646122777563448,\n        \"min\": 0.040987840890642835,\n        \"max\": 0.07204324965582005,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.06552312925693109,\n          0.040987840890642835,\n          0.05406038784313307\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CV Std MAPE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0008316152675716233,\n        \"min\": 0.0012998170840087383,\n        \"max\": 0.003248807327785457,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.003248807327785457,\n          0.0021288109237972957,\n          0.0012998170840087383\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CV Mean R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.03263839942247023,\n        \"min\": 0.8935548102540661,\n        \"max\": 0.967434065772677,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.9110542310795321,\n          0.967434065772677,\n          0.9409367561340332\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CV Std R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0051939690269033195,\n        \"min\": 0.003143335227753174,\n        \"max\": 0.013380040963842665,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.012070194793996701,\n          0.003143335227753174,\n          0.004515607267687241\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 241
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df3=df.copy()\n",
        "summary_stats = df3.drop(columns=['charges']).describe()"
      ],
      "metadata": {
        "id": "7Mvd5_s-jKSw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Filter out the \"charges\" column\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# Assuming summary_stats contains the statistical summary\n",
        "# Transpose the DataFrame for easier plotting\n",
        "summary_stats_transposed = summary_stats.T\n",
        "\n",
        "\n",
        "# Plot the statistical summary\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.barplot(x=summary_stats_transposed.index, y='mean', data=summary_stats_transposed)\n",
        "plt.title('Mean of Features')\n",
        "plt.xlabel('Features')\n",
        "plt.ylabel('Mean')\n",
        "plt.xticks(rotation=45)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 673
        },
        "id": "ccSrWm7ChMXS",
        "outputId": "7005d633-1751-4051-8a3b-af3829bf8c56"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAA2AAAAKQCAYAAAD5dxkJAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAACVzUlEQVR4nOzdd3gU1dvG8XsDIfReQu+9G6RLR5oFpCMdEQSUjgIiIgoIKk1AQIoiTXpRQTpSRTooShNQKUoLNUDyvH/wZn5ZikqE2YR8P9eVSzNl8+xhdnbumTNnPGZmAgAAAAA8cn6+LgAAAAAAYgoCGAAAAAC4hAAGAAAAAC4hgAEAAACASwhgAAAAAOASAhgAAAAAuIQABgAAAAAuIYABAAAAgEsIYAAAAADgEgIYAOCxMGzYMGXLlk2xYsVSkSJFfF0OAAD3RAADgMfM1KlT5fF45PF4tGHDhrvmm5kyZswoj8ejZ555xgcVPnzffvutevXqpTJlymjKlCkaNGjQfZdt2bKl0z53/ixbtuyR1DdjxgyNGDHikbw2ACB6ie3rAgAAj0bcuHE1Y8YMlS1b1mv6unXr9NtvvykgIMBHlT18q1evlp+fnyZNmqQ4ceL84/IBAQH69NNP75peuHDhR1GeZsyYoX379qlLly6P5PUBANEHAQwAHlM1a9bUnDlzNGrUKMWO/b/d/YwZMxQUFKS//vrLh9U9XGfOnFG8ePH+VfiSpNixY6tp06aPuKpH7+rVq4ofP76vywAAPAC6IALAY6px48Y6e/asVqxY4Uy7ceOG5s6dqyZNmtxznbCwMI0YMUL58+dX3LhxlSZNGrVr107nz5/3Wm7RokWqVauW0qVLp4CAAGXPnl0DBw5UaGio13IVKlRQgQIF9OOPP6pixYqKHz++0qdPr6FDh/6r93Dr1i0NHDhQ2bNnV0BAgLJkyaI+ffooJCTEWcbj8WjKlCm6cuWK05Vw6tSp/7KV7u1htkOFChX01Vdf6dixY059WbJkkfS/7qK//vqr1+uuXbtWHo9Ha9eu9XqdAgUKaPv27SpXrpzix4+vPn36SJJCQkLUv39/5ciRQwEBAcqYMaN69erl1U6StGLFCpUtW1ZJkyZVwoQJlTt3buc1AADu4AoYADymsmTJolKlSmnmzJmqUaOGJOmbb77RxYsX1ahRI40aNequddq1a6epU6eqVatWeu2113T06FF9/PHH2rlzpzZu3Ch/f39Jt4NDwoQJ1a1bNyVMmFCrV6/WW2+9peDgYA0bNszrNc+fP6/q1avrhRdeUIMGDTR37ly9/vrrKliwoFPX/bz00kv67LPPVK9ePXXv3l1bt27V4MGD9dNPP2nBggWSpGnTpmnChAn6/vvvnW6FpUuX/sf2ufMKoL+/v5IkSfLQ26Fv3766ePGifvvtNw0fPlySlDBhwn+s717Onj2rGjVqqFGjRmratKnSpEmjsLAwPffcc9qwYYNefvll5c2bV3v37tXw4cP1yy+/aOHChZKk/fv365lnnlGhQoX0zjvvKCAgQIcOHdLGjRsjVQsAIJIMAPBYmTJlikmybdu22ccff2yJEiWyq1evmplZ/fr1rWLFimZmljlzZqtVq5az3nfffWeSbPr06V6vt2zZsrumh79eRO3atbP48ePb9evXnWnly5c3Sfb5558700JCQiwwMNDq1q37t+9j165dJsleeuklr+k9evQwSbZ69WpnWosWLSxBggR/+3oRl5V010/58uXN7NG0Q61atSxz5sx3LRv+b3X06FGv6WvWrDFJtmbNGmdaeFt+8sknXstOmzbN/Pz87LvvvvOa/sknn5gk27hxo5mZDR8+3CTZn3/+ed+2AQA8enRBBIDHWIMGDXTt2jUtXbpUly5d0tKlS+/b/XDOnDlKkiSJqlatqr/++sv5CQoKUsKECbVmzRpn2Xjx4jn/f+nSJf3111966qmndPXqVR04cMDrdRMmTOh1v1WcOHFUvHhxHTly5G9r//rrryVJ3bp185revXt3SdJXX331L1rg3uLGjasVK1Z4/Xz44YeSHl07PAwBAQFq1aqV17Q5c+Yob968ypMnj1e9lSpVkiSn3qRJk0q63W0yLCzsodcGAPh36IIIAI+xVKlSqUqVKpoxY4auXr2q0NBQ1atX757LHjx4UBcvXlTq1KnvOf/MmTPO/+/fv19vvvmmVq9ereDgYK/lLl686PV7hgwZ5PF4vKYlS5ZMe/bs+dvajx07Jj8/P+XIkcNremBgoJImTapjx4797fp/J1asWKpSpco95z2qdngY0qdPf9dAIwcPHtRPP/2kVKlS/W29DRs21KeffqqXXnpJb7zxhipXrqwXXnhB9erVk58f52MBwC0EMAB4zDVp0kRt27bVqVOnVKNGDedKyJ3CwsKUOnVqTZ8+/Z7zww/wL1y4oPLlyytx4sR65513lD17dsWNG1c7duzQ66+/ftfVlVixYt3z9czsX9V/Z3h71B5VO9zL/d7bnYOZhIt4xS1ivQULFtRHH310z3UyZszorLt+/XqtWbNGX331lZYtW6bZs2erUqVK+vbbb+/77wQAeLgIYADwmKtTp47atWunLVu2aPbs2fddLnv27Fq5cqXKlClzzwP9cGvXrtXZs2c1f/58lStXzpl+9OjRh1p35syZFRYWpoMHDypv3rzO9NOnT+vChQvKnDnzQ/174R5FO9wvaCVLlkzS7TAX0YNc3cuePbt2796typUr/2NY9fPzU+XKlVW5cmV99NFHGjRokPr27as1a9bc94ogAODhos8BADzmEiZMqHHjxuntt9/Ws88+e9/lGjRooNDQUA0cOPCuebdu3XJCQviVkohXsG7cuKGxY8c+1Lpr1qwpSRoxYoTX9PArPbVq1Xqofy/co2iHBAkS3LNLYvbs2SVJ69evd6aFhoZqwoQJD1Tv77//rokTJ94179q1a7py5Yok6dy5c3fNL1KkiCTdNVw9AODR4QoYAMQALVq0+Mdlypcvr3bt2mnw4MHatWuXnn76afn7++vgwYOaM2eORo4cqXr16ql06dJKliyZWrRooddee00ej0fTpk37110K/63ChQurRYsWmjBhgtPd7/vvv9dnn32m2rVrq2LFig/174V7FO0QFBSk2bNnq1u3bnryySeVMGFCPfvss8qfP79Kliyp3r1769y5c0qePLlmzZqlW7du/et6mzVrpi+//FLt27fXmjVrVKZMGYWGhurAgQP68ssvtXz5chUrVkzvvPOO1q9fr1q1ailz5sw6c+aMxo4dqwwZMqhs2bIPswkBAH+DAAYAcHzyyScKCgrS+PHj1adPH8WOHVtZsmRR06ZNVaZMGUlSihQptHTpUnXv3l1vvvmmkiVLpqZNm6py5cqqVq3aQ63n008/VbZs2TR16lQtWLBAgYGB6t27t/r37/9Q/86dHnY7dOjQQbt27dKUKVM0fPhwZc6c2bkaOX36dLVr105DhgxR0qRJ1aZNG1WsWFFVq1b9V7X6+flp4cKFGj58uD7//HMtWLBA8ePHV7Zs2dS5c2flypVLkvTcc8/p119/1eTJk/XXX38pZcqUKl++vAYMGOA8/wwA8Oh5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Im5TX3/9tVWvXt1q1aplH374oXPlcPbs2TZz5kybPXu2TZgwwVatWnXXujFNWFiYXb9+3WrUqOEM6hJu/PjxljVrVmvYsOE9BxziHhvf+P33361kyZK2Z88eO3DggE2ePNnix49vL730krPM5s2b7ZtvvrF169Y5/05ROSzv27fPeb7U+++/bwcPHrTz58/bK6+8YnHixHGu1hw5csR69+5tTzzxhJUuXdrq1asX7cKlL9z5Wb1x44YFBwdbp06drGLFipYyZUobPny4bd682Tp37mwdOnTgxNR9fPfdd5YlSxav0UYnT55slSpVshYtWjjb8SeffGJPPfWU1/dLTP6uiYw722vr1q0WP35827hxo9f0NWvWWKFChbyujod72N9TBLCH7Pfff7cWLVrYrFmzzOz2FZ1kyZLZm2++aYkTJ7YmTZrccyS5Hj16WJo0abxGDYsJtm/fbsWKFbOOHTta3759rUePHs68ixcv2ujRo83f399Wrlxpe/bssaRJk1qbNm14zte/EN6NrkaNGrZ27Vozu31g0atXL0uTJo317t07Rg6R/qAWL15sNWvWtKxZs5rH47Hq1atb9uzZLW/evFa4cGHLnTt3jPvc/p169erdc2SoVq1aWcKECa1y5cp27NgxH1SGiD788EN79tlnrU2bNk7wuHbtmk2fPt3ixYvnFcIiisrhZMeOHVagQAEbNmyYdezY0Twej3Mi6dy5c9auXTuvEHbr1q27HhURlcOlr0U8AF23bp19++23tmTJEmfasWPH7MMPP7Q8efJYpUqVLHny5JY0aVKvQbRisjsP4BcsWGCBgYFe+8ObN2/aiBEjLG/evPfcTxK8Hlx4l06z21cUQ0ND7eTJkxYUFGQff/yxcxEkXI4cOVwZ2IQA9pBdu3bN5s+fb+fPn7dt27ZZlixZbOTIkWZm9sEHH5jH47Hy5cs7XcN27dplr776qmXNmjXGdvfavn27FS9e3DJnzmwdO3b0mnfhwgVr2bKlNWrUyMzMNm7ceN8h+3G3lStXWu3ata169erOlbBbt25Zhw4drFixYjZkyBDnLFtUPrByQ/gX288//2zbtm2z9evXO/OWL19utWrVssqVK9/1bKS/G6XqcXa/s4FvvPGGZcuWzXbv3u01ffDgwVamTBnr06cPV7x87OrVqzZw4EBLkSKFlSlTxmteeAhLlCiR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li9fvhg7+ua9trEKFSrY7t27bfny5XcN4DBhwgRbv3691/LR5WD+cbNw4UKv4dfNzL777jurVq2aVaxY0WtUwIiiy5WvKVOmWMqUKe3zzz+35cuX2/PPP2+FCxe2jz76yMzMZs2aZZUqVbLcuXNb1apVfXZjfUwQHBwcpbcbXwgLC7OaNWtaggQJnMFfrl+/7vVsqVu3blmtWrWsXr16dM+OpLCwsPt+pocNG2Yej8fef/99p90vX75s06dPt8qVK1uRIkWi1H6BAAZEE+E77N27d9uqVau8DrY2bdpkZcqU8QphR44csSFDhjiX32OqvXv32oABA7xGiJw4caIFBQVZu3bt7KeffvJa/uzZs26XGCVEPCCYOXOm8wiD2rVrW+7cuS1JkiQ2adIkZ5nffvvNKlasaJ9++qnrteJ//16hoaH2008/WY4cOaxBgwbOiIDhNmzYYClSpLBKlSrZ3LlzfVHqf7Z48WIbP368TZw40Wt6p06dLFeuXLZt2zYzu9318PTp09xT8y/83QHo34WrO9eLCgeyvnCv933r1i1r3LixJU2a1GsEzosXL9rChQutWrVqVrBgQQbceEg2b95s69evd27BMLv9TK/wK2GXLl2yc+fO2eDBg6179+5R7lm8BDAgChs0aJD16dPH2dnPnz/fEiRIYLly5TKPx2Ovv/6605Vh8+bNVqZMGStYsKBzf1NU2dH4yunTp52Hr3br1s1r3vjx461o0aLWoUMHr/sZYuKXYsSDiX379lnRokWtaNGitmDBAtu/f78VL17cChYsaGa3z+qeP3/eatSoYU899RRnwqOIL7/80kqVKmWNGzd2ns8UrmLFipYpU6a7HtgeHRw5csT8/f3N4/E4zzqMuF8rWrSovfjii2bm/dmNqcHg34jYNl988YW9/vrr1qdPH5s9e/bfrhexfb/77jseFWNmhw4duuskZ4MGDbweAXPw4EF76aWXrGXLllEuBEQX/fv393rwd9euXS1jxowWEBBglSpVcrrFm90OYX5+fk53xIj350Wl7ysCGBCFjRo1yjwej7333nt2+vRpK1asmE2ZMsUOHTpks2fPNn9/f2vXrp3zQMctW7ZY/vz5nQdixsQwEfFK4blz52zevHlWokQJy5Url+3Zs8dr2YkTJ1rWrFmta9euzlnJmKxHjx5Wt25dK126tCVLlsxy585t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tLjrvuKff/452nzuopvwbfrgwYNWo0YNq1Klyj1PDESHYyMCGBAFrVixwnLlymW//vqrM+3O0c88Ho8NGzbMF+VFefv373cePBvebh07drQXX3yRKzj/YO7cuZY6dWrLkCGDpU+f3ooWLWrXrl2zX3/91XLmzMn9cy658wAifLs9deqUFSxY0Bo0aGA///yzM3///v32wgsv2IcffmiFCxe29u3bu1rvg7rz/d26dcuqV69uGTJkcIbRDz/Y3bx5s/n5+ZnH43GerxQWFmZLly61bNmyOffF4n8ihvePPvrImjdvbpkzZzZ/f39r0qSJcyXso48+smzZslmyZMmsRIkSVrNmTaf7Md3m7i3iLQKZM2e25s2b33O/SAh7MOGPz/mnK1cRQ1itWrWscOHCXvfdRRceMzMBiFIWLlyo1157Td99950yZ86ssLAweTweeTwerV27VoGBgdq7d68KFCigvHnz+rrcKO3AgQOaNm2axowZow0bNqhAgQK+LinK+/3333XixAndvHlTZcqUkZ+fn3r37q2FCxdqzZo1CgwM9HWJj7WwsDD5+flJkkaMGKHdu3dr586dat++verVq6czZ86ofPnyKlu2rKpWrapChQrpnXfeUYoUKTRu3DhNnz5dQ4cOVe3atTVy5Egfv5u7RXx/06dPV+zYsdWwYUPdvHlT9erV0/fff6+FCxeqRIkSkqTt27drwYIFSpo0qbp06aLYsWNLksxM165dU/z48X32XqK69957T0OHDtUXX3yhZMmSacGCBfr222+VL18+ff755woICNCvv/6qkJAQxY8fXxkyZJDH49GtW7ecdo5Jrl69qvjx48vM5PF47rtc+PxVq1bp5ZdfVv78+fXRRx8pR44cLlb7+OjXr582b96scePGKWfOnP/Y/uH7kAMHDujTTz/V0KFDnX1KtOHL9Afg3o4cOWLx4sVzBpOIqEuXLtavXz/Orv0LP/zwgzVu3Njy5s17VzcR/Dv79u2zZs2aWYoUKeiG5LLXX3/d0qRJY0OGDLGhQ4dakiRJrHHjxmZ2+4b/559/3rJkyWI5c+a0MmXKOFc1zp07Z+PHj7fDhw/7svx/1KNHD8uSJYsNHDjQOft9/fp1e/755y1lypQ2depUW79+vT333HPWsmVLZz2uzPw7Fy5csIoVK9oHH3zgTLt69ap9/PHHljVrVmvWrNk9ewREh+5bj0KPHj2sV69eduHCBTP75ysx4fOXLl1qL7zwQoxtt4dhzJgxVqFCBWvYsKH98ssvZvbvr4SFi27HRAQwIIqaNGmScz/O3r177ccff7RevXpZ0qRJ7aeffvJ1edHC1atXbf369Xb8+HFflxIt3bx503bs2GHdu3dn1EiXbdq0yXLkyOE8UHnbtm3m5+dnn3/+ubPMtWvX7M8//7QDBw44ByPhB9RR/Qb0CRMmWKpUqbwebBtR69atLUWKFJY5c2YrUaIEQ81HUpkyZaxt27Ze08LCwqx27drm8Xi8QlhU32YetdatW9uTTz5p77777gOHsHDRLQT4WsT2mzp1qpUvX97q16//r0JYxAAWHbdduiACUVRYWJjmzZundu3aKUGCBIobN65ixYqlmTNnqmjRor4uDzHIzZs35e/v7+syHmsRu+VJ0tq1a9W7d29t3rxZs2fP1ksvvaShQ4fqlVde0aVLl7Rjxw6VKFFCcePGve9rRFVmpvbt2ytevHgaMWKEU3doaKhixYrlLLdr1y75+/srb9688vPzi7Hd4v4Nu6PLlpkpNDRUPXv21K5duzR8+HAVKlTI2T4GDRqkzZs36/Lly6pcubLefPNNX5XucxHbrnv37lq3bp1q166tV199VUmSJPnb7nB3brN4cBH3W1OnTtXUqVOVOnVqvffee/ftjhhx2siRI3XmzBm99957rtf+X0T9PTUQQ/n5+al+/frat2+fvvzyS02bNk3r1q0jfMF1hK9HL/wApEePHtq5c6c8Ho9OnTqlmTNnql27dnr//ff1yiuvSJI2bNigsWPH6uTJk/d8jagmLCzM63ePx6Pff/9dp0+flnS7bjNTrFixFBISonXr1kmSihQpovz58zvhjPB1b+H3CEvSqVOnFBwcrEuXLil27Njq1KmTjhw5orfeektbtmzRrVu3dO3aNf3www+qVq2asmfPrm+++UbXrl3z8bvwHY/Ho9DQUEnShx9+qHLlymnhwoUaPXq0Ll68KI/Ho3tdqwjfZiVp9OjRmjFjhqt1R3fhbRpxv9WyZUs1b95cZ86cUd++fXXw4MG72j9i+JowYYL69OkTLe/tjpp7awCOdOnSqVSpUipZsqTSpEnj63IAPCTXr1/3+n3BggUaPny4Lly4oHLlyqlgwYJ68cUX1bt3b3Xo0MFZZ+zYsTIzZc6c2RdlP5CIZ7d/+uknXb16VZKUPXt27du3T4cPH/Y6oPrrr780YsQIbdq0yet1uMpwbxHbd/Dgwapfv75KlSqll156Sdu3b1f27Nm1fPlyHTx4UK+++qqKFCmiMmXKaN++ferUqZMqVqyos2fP3rUtxhThB/YRt6+PPvpIZcuW/dsQFnGbnThxorp168Y2+gAinjQ4duyYjh8/rr/++kuS1Lp1azVr1uyeISzieuPHj1fPnj01bdo0NW7c2GfvJbLogggAgMuaNWumBg0a6Nlnn5UkzZs3T3v27FGGDBnUtm1bSdKKFSv07rvv6uzZsxo4cKDOnDmjBQsW6LffftOuXbsUO3bsKN3tMOJBar9+/fT1119r4MCBqlmzps6fP68iRYooW7Zs+vDDD5U1a1Zdv35dL730kq5cuaJVq1ZxQPsA3nzzTU2YMEEjR45UrFixNHbsWB09elSzZ89WyZIl9dtvv+m7777Tvn37lDJlSr366quKHTu22rRpo1OnTmnu3LmKFy+er9+GqyJ+doKDg+XxeJQwYUJnm+3SpYs2bNhwV3dESV4hoFevXpo6darq1KnjmzcSzURs97ffflvffPONDh48qKpVq6pmzZpq0aKFJGnSpEn64osvlCZNGvXv399rxOcJEyaoZ8+emjx5surWreuT9/GfuXa3GQAAsGbNmlmWLFmcG8f37t1rBQoUsHjx4tn48eOd5UJDQ23t2rXWqFEjCwwMtKeeespatGjhDEgRXW74f/vtty116tT29ddf26lTp5zpx48ftzx58lju3LktMDDQihUrZk888YTz/hhV7t9ZtmyZFSpUyDZt2mRmZl999ZUlSpTIChUqZKlTp3YGOok4UMGuXbuse/fulixZMtuzZ49P6valiNvWoEGDrHr16pYxY0br37+/bdiwwZnXuXNnK1asmL333nt27tw5r9cYP368JU6c2ObOneta3Y+Tt956y1KmTGmLFy+29evX27PPPmsZMmSwMWPGOMtMmjTJ8ufPb2+++aYzbeTIkRY3blybN2+eL8p+aAhgAAC45OzZs1apUiWbNGmSmZlNnjzZTp48aVOmTLG8efNaUFCQXbp06a71Tp486RW4ostQ7CdOnLDChQvbzJkzvaaH1x8SEmJLly61Tz75xObNm+e8x+jy/nwhYni4cOGCHTx40Hr27GlmZl9//bWlSpXKxo4dazt27LBMmTJZxowZbePGjV7rjxw50ooWLRrjH6zep08fS5kypU2aNMnGjBljxYoVsypVqti3337rLNO1a1fLlCmTTZ061Zk2cuRIS5gwYbQPAb6ybt06K1SokLNdrlq1yuLFi2eVK1e2rFmz2ieffOIsu2TJEq9938CBA+/an0RHBDAAAFzUpEkTS58+vbVt29Y8Ho+dPHnSbt68adOmTbMiRYpY7dq17fLly2Zm97waFJ2GXN67d68lS5bMeQ5fxPdx9epVu3r16l3rRJcre772xhtvWJs2bczsdrC/deuW1axZ07laEBoaalWqVLG0adNazZo1zcx72zl79qz7RUchS5Yssdy5czuPeli/fr3Fjh3bihQpYhUqVLA1a9Y4y44YMcLZLi9cuGBNmzZ9LEKAW+7cZ/3555/21ltv2fXr12358uWWKlUq+/TTT+3XX3+1ggULWurUqW3w4MFe6zxu+4Wo2XEcAIDHTPhogNOnT9fNmzc1bdo0LVq0SIGBgYodO7YaNmyoLl266OTJk2revLmuXLkif3//u+7zut+Q2L5252iHkpQhQwYlSpRIy5YtkyRnOHnp9miO8+bNc34Px71f92YRbtlfsWKFFi9erHbt2kmSkidPrjNnzmjPnj3KnTu3JOnChQtKliyZpk6dqqVLl0qS12ASyZMnd/kd+JbdMeRBYGCgGjdurOLFi+urr75S7dq1NX78eA0bNky7du3SgAEDtHjxYklS586dFStWLIWFhSlJkiQaN26cGjVq5Iu3Ee1EHDhj7969OnPmjFKmTKnevXsrICBAn376qdq0aaMWLVooc+bMyp8/vzJkyKCffvrJ69/scdsvMKYrAAAuCA9Rq1evVkBAgPLly6cuXbood+7cypUrl/z9/dWkSRNJt2/ur1WrlpYtW+b1rK+oKmJIXLRokU6dOiUzU+nSpVW1alWtXbtWGTJk0IsvvqjYsWMrNDRUH3zwgVKnTq2mTZv6uProIfwgdubMmdq6dauqVaumJ5980nkWVcqUKVW8eHF98MEHun79umbMmKGbN2+qSpUq8ng8zr9RVA3wj1LE7fO3335TypQpVaxYMWXLlk1XrlzRRx99pO7du6t169aSpNy5c+vEiRNau3atnnvuOWdAmfDXSJgwoc/eS3RiZk6b9e3bV5s3b1br1q1Vv359xY0bV9evX9eP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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#roc\n"
      ],
      "metadata": {
        "id": "mJs1pPPdeBsv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#feature importance"
      ],
      "metadata": {
        "id": "R_8cRoYqJ6zA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Fit the model\n",
        "xgb_model = xgb.XGBRegressor()\n",
        "xgb_model.fit(X_train, y_train)\n",
        "\n",
        "# Get feature importances\n",
        "xgb_importance = xgb_model.feature_importances_\n"
      ],
      "metadata": {
        "id": "of7a1X6XJ83R"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Fit the model\n",
        "rf_model = RandomForestRegressor(random_state=42)\n",
        "rf_model.fit(X_train, y_train)\n",
        "\n",
        "# Get feature importances\n",
        "rf_importance = rf_model.feature_importances_\n"
      ],
      "metadata": {
        "id": "npDViP1gKCta"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Fit the model\n",
        "gb_model = GradientBoostingRegressor(random_state=42)\n",
        "gb_model.fit(X_train, y_train)\n",
        "\n",
        "# Get feature importances\n",
        "gb_importance = gb_model.feature_importances_\n"
      ],
      "metadata": {
        "id": "862HspHvKEfN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "\n",
        "# Combine importances into a DataFrame\n",
        "importance_df = pd.DataFrame({\n",
        "    'Feature': X.columns,\n",
        "    'XGBoost': xgb_importance,\n",
        "    'Random Forest': rf_importance,\n",
        "    'Gradient Boosting': gb_importance\n",
        "})\n",
        "\n",
        "# Plotting\n",
        "importance_df.set_index('Feature').plot(kind='bar', figsize=(10, 6))\n",
        "plt.title('Feature Importance Comparison')\n",
        "plt.ylabel('Importance Score')\n",
        "plt.xlabel('Features')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 710
        },
        "id": "zhdI3AUqKGhA",
        "outputId": "a8f7e503-ce73-41e1-dc3e-dd32b0f8f367"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "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m806evSoihYtKulh4Tt8+LCmTZumkJAQy3JPO8QusVxdXVWrVi3VqlVLcXFx+uSTTzRu3Dj16NFDuXPnVo4cOZ64LaT/bS8A+C84xwkA/l9wcLB8fHzUv39/PXjwIN7jj2bCe/Rt9b+/nR4+fHi8dR798vrvguTj46MMGTJo/fr1VuM//vhjovPWr19fzs7O6tOnT7wsZrM5wcOtnpfx48dbbcMxY8YoJiZG1atXlyQFBQXJ1dVVP/zwg1X2SZMm6dq1a6pZs2aiXsfLyyvetpUe/oz+vU3mzp371HOMnqZkyZIKDAzU8OHD473eo9fJlCmTKleurHHjxikqKirec9iaSbF8+fKqVq2aJk6cqEWLFsV7/P79++rcubMkyd/fX8WLF9e0adOs8uzbt0/Lly+3FNSkNH36dN24ccNyf968eYqKirL8TBP6e2E2m+NNG26vf3+OnZycLGXt3r17kqQaNWpo69at2rx5s2W5W7duafz48QoICFDBggX/UwYAkNjjBAAWPj4+GjNmjD788EOVLFlSjRs3VsaMGRUZGanFixerYsWKGjVqlHx8fCxTdT948EBZs2bV8uXLdeLEiXjPWapUKUnSV199pcaNG8vFxUW1atWSl5eXWrZsqYEDB6ply5YqXbq01q9fr8OHDyc6b65cufTtt9+qe/fuOnnypOrWravUqVPrxIkTWrhwoVq3bm35Rft5u3//vqpWraqGDRsqIiJCP/74o1577TXVrl1b0sMp2bt3764+ffqoWrVqql27tmW5MmXK6IMPPkjU65QqVUpjxozRt99+q9y5cytTpkyqUqWK3nnnHfXt21dhYWGqUKGC9u7dq59//tlq75Y9nJycNGbMGNWqVUvFixdXWFiY/P39dejQIe3fv1/Lli2T9HDikddee01FihRRq1atlDNnTp07d06bN2/WmTNn4l1H6t+mT5+ut99+W/Xr11etWrVUtWpVeXl56ciRI5o1a5aioqIs13L67rvvVL16dZUvX14tWrSwTEfu6+trdR2wpJIuXTq99tprCgsL07lz5zR8+HDlzp1brVq1kvTwUMNcuXKpc+fO+ueff+Tj46P58+f/5/OGWrZsqcuXL6tKlSp65ZVXdOrUKY0cOVLFixe3nMPUrVs3zZw5U9WrV1f79u2VLl06TZs2TSdOnND8+fMTdUggANj0vKfxAwCj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ArgvBw4ABl4icXFxOnr0aIIXc61UqZJBqRxXhw4dNHLkSP3www9GR0lR/l0CJOnvv/+WyWSSu7u7cufOrTp16ihdunQGpHNMu3btsrrv5OSkjBkzaujQoTZn3HuZ5c2bV+fOnYtXnM6fP59ipzt2FF9++eVL/3f08TJEMXo2q1at0qpVqxL8vSMlzhbKHifgJfH333+rSZMmOnXqVLyrx3OYQcLq1aun1atXK3369CpUqFC8ySGY6Sxhb775pnbu3KnY2Fir806cnZ2VP39+RUREyGQy6a+//lLBggUNTouUbMmSJfriiy/Uu3dvvfrqq5Ie/lvXt29fDRw4UK+99pplWS78/T8zZszQ2LFjdeLECW3evFk5cuTQ8OHDFRgYqDp16hgdz2EdOXJEa9asSbAE9OzZ06BUjqtPnz7q27evSpcuLX9//3jnWSc0KY6jozgBL4nixYsrb9686tOnT4L/gPn6+hqUzHGFhYU99fEpU6Y8pyQpy/Dhw7VhwwZNmTLF8svqtWvX1LJlS7322mtq1aqVmjRpojt37mjZsmUGp0VK9vjJ54/+TXv0a83j9/ly6H/GjBmjnj176rPPPlO/fv20b98+5cyZU1OnTtW0adO0Zs0aoyM6pAkTJqhNmzbKkCGD/Pz84k0WxEXk4/P399fgwYP14YcfGh0lyVCcgJeEl5eXdu/ezeErdrhz547i4uLk5eUlSTp58qQWLVqkAgUKKDg42OB0jitr1qxasWJFvL1J+/fv19tvv61//vlHO3fu1Ntvv62LFy8alNKxlChR4qmzXj6OX9D+Z926dYle9o033kjGJClHwYIF1b9/f9WtW9fqPKZ9+/apcuXK/J18ghw5cuiTTz5R165djY6SYqRPn15bt259oS6pwDlOwEuiXLlyOnr0KMXJDnXq1FH9+vX18ccf6+rVq3r11Vfl4uKiixcvatiwYWrTpo3RER3StWvXdP78+XjF6cKFC7p+/bqkh9dEuX//vhHxHFK1atX0448/qmDBgipfvrykh4ec7d+/X23atJGHh4fBCR0TZch+J06cUIkSJeKNu7m56datWwYkShmuXLmiBg0aGB0jRWnZsqV++eUX9ejRw+goSYbiBLzAHr/uRLt27dSpUydFR0cneDFXrkER386dO/X9999LkubNm6fMmTNr165dmj9/vnr27ElxeoI6deqo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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#xgboost"
      ],
      "metadata": {
        "id": "gpjYGlfIu5tZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\n",
        "import numpy as np\n",
        "\n",
        "# Function to calculate adjusted R-squared\n",
        "def adjusted_r2_score(y_true, y_pred, n_features):\n",
        "    r2 = r2_score(y_true, y_pred)\n",
        "    adjusted_r2 = 1 - (1 - r2) * ((len(y_true) - 1) / (len(y_true) - n_features - 1))\n",
        "    return adjusted_r2\n",
        "\n",
        "# Function to calculate Mean Percentage Error (MPE)\n",
        "def mean_percentage_error(y_true, y_pred):\n",
        "    return np.mean((y_true - y_pred) / y_true) * 100\n",
        "\n",
        "# Function to calculate Mean Absolute Percentage Error (MAPE)\n",
        "def mean_absolute_percentage_error(y_true, y_pred):\n",
        "    return np.mean(np.abs((y_true - y_pred) / y_true)) * 100\n",
        "\n",
        "# Initialize a dictionary to store models\n",
        "models = {\n",
        "    'XGBoost': xgb.XGBRegressor(),\n",
        "}\n",
        "\n",
        "# Split data into features (X) and target variable (y)\n",
        "X = df.head(10000000)\n",
        "#.drop(columns=['medical_history','family_medical_history','coverage_level','region','exercise_frequency','occupation','charges'])\n",
        "y = df['charges'].head(10000000)  # Target variable\n",
        "\n",
        "# Split data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Train and evaluate each model\n",
        "for name, model in models.items():\n",
        "    print(f\"Evaluating {name}:\")\n",
        "    model.fit(X_train, y_train)\n",
        "    y_pred = model.predict(X_test)\n",
        "    mse = mean_squared_error(y_test, y_pred)\n",
        "    rmse = np.sqrt(mse)\n",
        "    mae = mean_absolute_error(y_test, y_pred)\n",
        "    mpe = mean_percentage_error(y_test, y_pred)\n",
        "    mape = mean_absolute_percentage_error(y_test, y_pred)\n",
        "    r2 = r2_score(y_test, y_pred)\n",
        "    adjusted_r2 = adjusted_r2_score(y_test, y_pred, X_test.shape[1])\n",
        "    print(f\"MSE for {name}: {mse}\")\n",
        "    print(f\"RMSE for {name}: {rmse}\")\n",
        "    print(f\"MAE for {name}: {mae}\")\n",
        "    print(f\"MPE for {name}: {mpe}\")\n",
        "    print(f\"MAPE for {name}: {mape}\")\n",
        "    print(f\"R-squared for {name}: {r2}\")\n",
        "    print(f\"Adjusted R-squared for {name}: {adjusted_r2}\")\n",
        "    # Save the trained model\n",
        "    #joblib.dump(model, f'{name}_model.pkl')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uWEociP0tQDu",
        "outputId": "fac458f4-8044-46ab-aa23-d32c2c6ca050"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Evaluating XGBoost:\n",
            "MSE for XGBoost: 207318.7456571122\n",
            "RMSE for XGBoost: 455.3226830030678\n",
            "MAE for XGBoost: 370.0221946904388\n",
            "MPE for XGBoost: -0.07122811834790428\n",
            "MAPE for XGBoost: 2.383474020036504\n",
            "R-squared for XGBoost: 0.9893468111886365\n",
            "Adjusted R-squared for XGBoost: 0.9893462784998981\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.head(2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 112
        },
        "id": "OzI6L4s2VG4u",
        "outputId": "0ba917a4-6038-4198-8404-b5979e439fde"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   age    bmi  children  charges  smoker  gender  exercise_frequency  \\\n",
              "0   46  21.45         5    20460       1       1                   6   \n",
              "1   25  25.38         2    20390       1       0                   8   \n",
              "\n",
              "   occupation  coverage_level  medical_history  family_medical_history  \n",
              "0           1               9                2                       7  \n",
              "1          14               9                2                       5  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a8d47df5-75b1-4a37-ae1d-a3c2c2d57568\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>bmi</th>\n",
              "      <th>children</th>\n",
              "      <th>charges</th>\n",
              "      <th>smoker</th>\n",
              "      <th>gender</th>\n",
              "      <th>exercise_frequency</th>\n",
              "      <th>occupation</th>\n",
              "      <th>coverage_level</th>\n",
              "      <th>medical_history</th>\n",
              "      <th>family_medical_history</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>46</td>\n",
              "      <td>21.45</td>\n",
              "      <td>5</td>\n",
              "      <td>20460</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>9</td>\n",
              "      <td>2</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>25</td>\n",
              "      <td>25.38</td>\n",
              "      <td>2</td>\n",
              "      <td>20390</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "      <td>14</td>\n",
              "      <td>9</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a8d47df5-75b1-4a37-ae1d-a3c2c2d57568')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a8d47df5-75b1-4a37-ae1d-a3c2c2d57568 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a8d47df5-75b1-4a37-ae1d-a3c2c2d57568');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-5a008850-3ea3-473f-9e3a-685bf33830be\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5a008850-3ea3-473f-9e3a-685bf33830be')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-5a008850-3ea3-473f-9e3a-685bf33830be button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 10000,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13,\n        \"min\": 18,\n        \"max\": 65,\n        \"num_unique_values\": 48,\n        \"samples\": [\n          23,\n          63,\n          61\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bmi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.25791763794121,\n        \"min\": 18.01,\n        \"max\": 50.0,\n        \"num_unique_values\": 3083,\n        \"samples\": [\n          38.27,\n          37.67,\n          22.93\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"children\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 5,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          5,\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"charges\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4446,\n        \"min\": 4472,\n        \"max\": 32070,\n        \"num_unique_values\": 7525,\n        \"samples\": [\n          14394,\n          17032,\n          13098\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smoker\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"exercise_frequency\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 3,\n        \"max\": 10,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          8,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"occupation\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 1,\n        \"max\": 14,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          14,\n          13\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"coverage_level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4,\n        \"min\": 0,\n        \"max\": 11,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          9,\n          11\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"medical_history\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 2,\n        \"max\": 7,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          7,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"family_medical_history\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 2,\n        \"max\": 7,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          5,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 270
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#predicting insurance"
      ],
      "metadata": {
        "id": "mH8jwCt9l9Bl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def calculate_bmi(weight_kg, height):\n",
        "    \"\"\"\n",
        "    Calculate BMI (Body Mass Index) given weight in kilograms and height in meters.\n",
        "    \"\"\"\n",
        "    height_m=height/100\n",
        "    bmi = weight_kg / (height_m ** 2)\n",
        "    return bmi\n"
      ],
      "metadata": {
        "id": "S8Ptoy62YY-H"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import joblib\n",
        "# Function to predict medical costs based on user input\n",
        "def predict_medical_costs(user_input):\n",
        "    # Load the trained models\n",
        "    #random_forest_model = joblib.load('Random Forest_model.pkl')\n",
        "    #Gradient_Boosting_Regressor_model\n",
        "    #xgboost_model = joblib.load('XGBoost_model.pkl')\n",
        "    xgboost_model = joblib.load('Gradient_Boosting_Regressor_model.pkl')\n",
        "    #linear_regression_model = joblib.load('LinearRegression_model.pkl')\n",
        "\n",
        "    # Prepare input data as a DataFrame\n",
        "    # Convert dictionary to DataFrame\n",
        "    # Convert dictionary to DataFrame\n",
        "    user_df = pd.DataFrame.from_dict(user_input, orient='index').T\n",
        "    #print(\"before transform\",user_df)\n",
        "    user_df = preprocess_dataframe(user_df)\n",
        "    #print(user_input)\n",
        "    #drop and rename encoded columns\n",
        "    user_df2=drop_and_renameCols(user_df)\n",
        "    #print(\"after transform\",user_df)\n",
        "    #print(user_input)\n",
        "    # Predict medical costs using each model\n",
        "    #rf_prediction = random_forest_model.predict(user_df)\n",
        "    xgb_prediction = xgboost_model.predict(user_df2)\n",
        "    #lr_prediction = linear_regression_model.predict(user_df)\n",
        "\n",
        "    # Return predictions\n",
        "    return {\n",
        "        #'Random Forest': rf_prediction[0],\n",
        "        'XGBoost': xgb_prediction[0],\n",
        "        #'Linear Regression': lr_prediction[0]\n",
        "    }"
      ],
      "metadata": {
        "id": "G-USoZ6xvPdT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import joblib\n",
        "import pandas as pd\n",
        "\n",
        "\n",
        "# Get user input for features\n",
        "age = float(input(\"Enter age: \"))\n",
        "gender = input(\"Enter gender (male/female): \")\n",
        "weight = float(input(\"Enter weight (kg): \"))\n",
        "height = int(input(\"Enter height (cm): \"))\n",
        "#put height and weight\n",
        "bmi=calculate_bmi(weight,(height))\n",
        "#bmi = float(input(\"Enter BMI: \"))\n",
        "children = int(input(\"Enter number of children: \"))\n",
        "smoker = input(\"Enter smoker status (yes/no): \")\n",
        "medical_history = input(\"Enter medical history (Diabetes/None/High blood pressure): \")\n",
        "family_medical_history = input(\"Enter family medical history (Diabetes/None/High blood pressure): \")\n",
        "exercise_frequency = input(\"Enter exercise frequency (Never/Occasionally/Rarely/Frequently): \")\n",
        "occupation = input(\"Enter occupation (Blue collar/White collar/Student/Unemployed): \")\n",
        "coverage_level = input(\"Enter coverage level (Premium/Standard/Basic): \")\n",
        "#age1 = float(input(\"Enter age1: \"))\n",
        "\n",
        "# Collect user input\n",
        "user_input = {\n",
        "    'age': age,\n",
        "    'gender': gender,\n",
        "    'bmi': bmi,\n",
        "    'children': children,\n",
        "    'smoker': smoker,\n",
        "    'medical_history': medical_history,\n",
        "    'family_medical_history': family_medical_history,\n",
        "    'exercise_frequency': exercise_frequency,\n",
        "    'occupation': occupation,\n",
        "    'coverage_level': coverage_level,\n",
        "    #'age1': age1\n",
        "}\n",
        "\n",
        "# Make predictions\n",
        "predictions = predict_medical_costs(user_input)\n",
        "\n",
        "# Print predictions\n",
        "print(\"Predicted medical costs:\")\n",
        "for model, cost in predictions.items():\n",
        "    print(f\"{model}: €{cost:.2f}\")\n",
        "\n",
        "#encoder not matching with data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NqzZKW9hXLTz",
        "outputId": "ff25f092-3763-4ae2-f475-9dcc19171a68"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter age: 35\n",
            "Enter gender (male/female): male\n",
            "Enter weight (kg): 68\n",
            "Enter height (cm): 167\n",
            "Enter number of children: 0\n",
            "Enter smoker status (yes/no): no\n",
            "Enter medical history (Diabetes/None/High blood pressure): None\n",
            "Enter family medical history (Diabetes/None/High blood pressure): Diabetes\n",
            "Enter exercise frequency (Never/Occasionally/Rarely/Frequently): Frequently\n",
            "Enter occupation (Blue collar/White collar/Student/Unemployed): Student\n",
            "Enter coverage level (Premium/Standard/Basic): premium\n",
            "Predicted medical costs:\n",
            "XGBoost: €14670.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-283-0938e73ed114>:13: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n",
            "  df = df.applymap(lambda x: x.lower() if isinstance(x, str) else x)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Sample user input data\n",
        "age = 35\n",
        "gender = 'male'\n",
        "bmi = 25.5\n",
        "children = 2\n",
        "smoker = 0\n",
        "medical_history = 'High blood pressure'\n",
        "family_medical_history = 'Diabetes'\n",
        "exercise_frequency = 'Frequently'\n",
        "occupation = 'White collar'\n",
        "coverage_level = 'Premium'\n",
        "age1 = 40\n",
        "\n",
        "# Create user_input dictionary\n",
        "user_input = {\n",
        "    'age': age,\n",
        "    'gender': gender,\n",
        "    'bmi': bmi,\n",
        "    'children': children,\n",
        "    'smoker': smoker,\n",
        "    'medical_history': medical_history,\n",
        "    'family_medical_history': family_medical_history,\n",
        "    'exercise_frequency': exercise_frequency,\n",
        "    'occupation': occupation,\n",
        "    'coverage_level': coverage_level\n",
        "}\n",
        "\n",
        "# Convert user_input dictionary to DataFrame\n",
        "#df2 = pd.DataFrame.from_dict(user_input, orient='index').T\n",
        "#df2.head(1)\n",
        "predictions = predict_medical_costs(user_input)\n",
        "\n",
        "\n",
        "# Print predictions\n",
        "print(\"Predicted medical costs:\")\n",
        "for model, cost in predictions.items():\n",
        "    print(f\"{model}: €{cost:.2f}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qpJ4qGJWiddC",
        "outputId": "e997802b-1b0b-4737-8ed2-69784dcb0c67"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Predicted medical costs:\n",
            "XGBoost: €16997.31\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-283-0938e73ed114>:13: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n",
            "  df = df.applymap(lambda x: x.lower() if isinstance(x, str) else x)\n"
          ]
        }
      ]
    }
  ]
}