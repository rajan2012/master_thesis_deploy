{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "#read from file"
      ],
      "metadata": {
        "id": "C-UbJQ0D8V7w"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "jqHwOp-bCR0M"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Assuming the file is named \"your_file.csv\" and is located in the current directory\n",
        "file_path = \"drug_review.csv\"\n",
        "\n",
        "# Read the CSV file into a DataFrame   ,nrows=10\n",
        "df10 = pd.read_csv(file_path)\n",
        "\n",
        "#df = pd.read_csv(file_path, sep='\\t', compression='gzip')\n",
        "\n",
        "df=df10.head(1000)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "len(df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wvaRGuDk8osW",
        "outputId": "969e280b-acfb-4c97-f9c5-69c6c0b5338d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1000"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#delete drugs with , in it"
      ],
      "metadata": {
        "id": "C3PQ8U1Z8ZTq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#df.rename(columns={'processed_reviews': 'review', 'rating_category': 'rating_category2'}, inplace=True)"
      ],
      "metadata": {
        "id": "0zXc-R4h4E0S"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Remove records where the 'drug' column contains a comma\n",
        "df = df[~df['drug'].str.contains(',', regex=False)]"
      ],
      "metadata": {
        "id": "uZcWyNRErVVe"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Remove duplicate records based on 'Symptoms' and 'Disease' columns\n",
        "df2 = df.drop_duplicates(subset=['drug', 'Disease'], keep='first')\n",
        "\n",
        "# Display the dataframe without duplicate records\n",
        "#print(df)\n"
      ],
      "metadata": {
        "id": "mKANDIvgfHKM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "len(df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OdV4p7ArgXVE",
        "outputId": "5c6fab3e-03bb-42eb-9170-9fe61297dc24"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1000"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "len(df['Disease'].unique())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b67UqxCPgpFb",
        "outputId": "15c52c62-a4aa-4e33-a6b4-18d79ab3faa9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "172"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Filter the DataFrame for records with disease 'Fungal Infection'\n",
        "df2 = df[df['Disease'] == 'birth control']\n",
        "\n",
        "df2.head(5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "pSAR5otUg6SG",
        "outputId": "50153a5c-f1d9-4cf9-eee2-114c9c68adca"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            drug        Disease  \\\n",
              "1   Etonogestrel  birth control   \n",
              "2       Implanon  birth control   \n",
              "5   Tri-Sprintec  birth control   \n",
              "9         Mirena  birth control   \n",
              "16        Lutera  birth control   \n",
              "\n",
              "                                               review  rating  \n",
              "1   \"My experience has been somewhat mixed. I have...     7.0  \n",
              "2   \"This is my second Implanon would not recommen...     1.0  \n",
              "5   \"Used for birth control and period issues- ver...     2.0  \n",
              "9   \"I have been on Mirena for over a year now and...     1.0  \n",
              "16  \"This was my first time on any birth control a...     1.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1fce1092-f205-4055-9f79-9095a36ecc49\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>drug</th>\n",
              "      <th>Disease</th>\n",
              "      <th>review</th>\n",
              "      <th>rating</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Etonogestrel</td>\n",
              "      <td>birth control</td>\n",
              "      <td>\"My experience has been somewhat mixed. I have...</td>\n",
              "      <td>7.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Implanon</td>\n",
              "      <td>birth control</td>\n",
              "      <td>\"This is my second Implanon would not recommen...</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Tri-Sprintec</td>\n",
              "      <td>birth control</td>\n",
              "      <td>\"Used for birth control and period issues- ver...</td>\n",
              "      <td>2.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Mirena</td>\n",
              "      <td>birth control</td>\n",
              "      <td>\"I have been on Mirena for over a year now and...</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>Lutera</td>\n",
              "      <td>birth control</td>\n",
              "      <td>\"This was my first time on any birth control a...</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1fce1092-f205-4055-9f79-9095a36ecc49')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1fce1092-f205-4055-9f79-9095a36ecc49 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1fce1092-f205-4055-9f79-9095a36ecc49');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-6264d7de-36e0-4c5e-8f97-2434285dc6ea\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6264d7de-36e0-4c5e-8f97-2434285dc6ea')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-6264d7de-36e0-4c5e-8f97-2434285dc6ea button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df2",
              "summary": "{\n  \"name\": \"df2\",\n  \"rows\": 205,\n  \"fields\": [\n    {\n      \"column\": \"drug\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 51,\n        \"samples\": [\n          \"Ortho Tri-Cyclen Lo\",\n          \"Levlen\",\n          \"Microgestin 1 / 20\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Disease\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"birth control\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"review\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 203,\n        \"samples\": [\n          \"\\\"Do NOT let these reviews scare you away from an IUD! Upon reading these reviews I was terrified of the insertion. It is not bad as half of these people make it out to be! Does it hurt? Absolutely. A nauseating, make you want to pass out kind of pain. However, it's only temporary and lasts about 40 seconds and then it's over with. First day I had period-like cramps. I took some advil and a nap and I was fine. At this point, minimal spotting and cramps here and there. My biggest and only issue right now is while having sex in certain positions my boyfriend can feel the string and it's definitely not a nice feeling for him. Something I'm going to bring up to gyno on my one month check up. Other than that, Kyleena has been great so far\\\"\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rating\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.334299238342028,\n        \"min\": 1.0,\n        \"max\": 10.0,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          5.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Remove duplicate records based on 'Symptoms' and 'Disease' columns\n",
        "df1 = df.drop_duplicates(subset=['review', 'Disease','rating','drug'], keep='first')\n",
        "\n",
        "# Display the dataframe without duplicate records\n",
        "#print(df)\n"
      ],
      "metadata": {
        "id": "DWG9YbGp9261"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "len(df1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zr0PbOJK-C2T",
        "outputId": "521280ef-deb1-482f-8a41-3fa962a1541a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "427134"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Filter the DataFrame for records with disease 'Fungal Infection'\n",
        "#df2 = df[df['Disease'] == 'birth control']\n",
        "\n",
        "#df2"
      ],
      "metadata": {
        "id": "xf7Fd8ih3Elh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Filter the DataFrame for records with disease 'Fungal Infection'\n",
        "df2 = df1[df1['Disease'] == 'birth control'][['review','Disease','drug','rating']].head(1000)\n",
        "\n",
        "df2.head(5)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "426AkIy73j9t",
        "outputId": "a52c8910-b731-4dcf-906e-ff5a407c5c45"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                               review        Disease  \\\n",
              "1   \"My experience has been somewhat mixed. I have...  birth control   \n",
              "2   \"This is my second Implanon would not recommen...  birth control   \n",
              "5   \"Used for birth control and period issues- ver...  birth control   \n",
              "9   \"I have been on Mirena for over a year now and...  birth control   \n",
              "16  \"This was my first time on any birth control a...  birth control   \n",
              "\n",
              "            drug  rating  \n",
              "1   Etonogestrel     7.0  \n",
              "2       Implanon     1.0  \n",
              "5   Tri-Sprintec     2.0  \n",
              "9         Mirena     1.0  \n",
              "16        Lutera     1.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-01a10408-2a7b-4ccc-8cb7-79cf4d0c6e11\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>review</th>\n",
              "      <th>Disease</th>\n",
              "      <th>drug</th>\n",
              "      <th>rating</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>\"My experience has been somewhat mixed. I have...</td>\n",
              "      <td>birth control</td>\n",
              "      <td>Etonogestrel</td>\n",
              "      <td>7.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>\"This is my second Implanon would not recommen...</td>\n",
              "      <td>birth control</td>\n",
              "      <td>Implanon</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>\"Used for birth control and period issues- ver...</td>\n",
              "      <td>birth control</td>\n",
              "      <td>Tri-Sprintec</td>\n",
              "      <td>2.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>\"I have been on Mirena for over a year now and...</td>\n",
              "      <td>birth control</td>\n",
              "      <td>Mirena</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>\"This was my first time on any birth control a...</td>\n",
              "      <td>birth control</td>\n",
              "      <td>Lutera</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-01a10408-2a7b-4ccc-8cb7-79cf4d0c6e11')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-01a10408-2a7b-4ccc-8cb7-79cf4d0c6e11 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-01a10408-2a7b-4ccc-8cb7-79cf4d0c6e11');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ebcf5baa-369c-4592-a037-ab14d2441536\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ebcf5baa-369c-4592-a037-ab14d2441536')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ebcf5baa-369c-4592-a037-ab14d2441536 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df2",
              "summary": "{\n  \"name\": \"df2\",\n  \"rows\": 205,\n  \"fields\": [\n    {\n      \"column\": \"review\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 203,\n        \"samples\": [\n          \"\\\"Do NOT let these reviews scare you away from an IUD! Upon reading these reviews I was terrified of the insertion. It is not bad as half of these people make it out to be! Does it hurt? Absolutely. A nauseating, make you want to pass out kind of pain. However, it's only temporary and lasts about 40 seconds and then it's over with. First day I had period-like cramps. I took some advil and a nap and I was fine. At this point, minimal spotting and cramps here and there. My biggest and only issue right now is while having sex in certain positions my boyfriend can feel the string and it's definitely not a nice feeling for him. Something I'm going to bring up to gyno on my one month check up. Other than that, Kyleena has been great so far\\\"\",\n          \"\\\"I had the Nexplanon inserted about eight months ago. I did plenty of research before, so I knew what to expect in the first few months, as far as bleeding/spotting, headaches, etc. Without birth control, I went through about five ultra tampons on an average period day. When my \\\"period\\\" came around on the Nexplanon, it was barely anything (light enough to wear a pantyliner while at work without needing to change it). I thought I finally found the perfect birth control. However, the last three or four months, I've had a constant period, with a couple of days here and there with nothing. It's terrible. And although it isn't as heavy as it used to be, it's heavier than it was when I started Nexplanon\\\"\",\n          \"\\\"I started the birth control shot in 2013 the day before my 20th birthday.  To say the least, it was a terrible decision. \\r\\r\\nThe shot was great in some ways. I did not have a period the entire time I was on the shot (3 months) and through my 1st month on the pill after. My periods were always irregular though. It was also nice to be free from worry about contraception.\\r\\r\\nThe bad overwhelmed the good though. The first week that I was on the shot I had bad headaches. Not migraines, but they were painful. I spotted lightly halfway through the 1st month and continued for 2 weeks.  At 3 weeks, I became horrifyingly depressed. I wouldn't have survived if I hadn't known that it would likely be better once I stopped the shot.\\\"\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Disease\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"birth control\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"drug\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 51,\n        \"samples\": [\n          \"Ortho Tri-Cyclen Lo\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rating\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.334299238342028,\n        \"min\": 1.0,\n        \"max\": 10.0,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          5.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Filter the DataFrame for records with disease 'Fungal Infection'\n",
        "df3 = df1[df1['Disease'] == 'birth control'][['review','Disease','drug','rating']].head(1000)\n",
        "\n",
        "df3.head(2)\n",
        "\n",
        "#df3[df3['drug']=='Etonogestrel']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 112
        },
        "id": "Fnho3RvO0JzE",
        "outputId": "144be21e-5dec-401e-9df9-3e50a29ded4b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                              review        Disease  \\\n",
              "1  \"My experience has been somewhat mixed. I have...  birth control   \n",
              "2  \"This is my second Implanon would not recommen...  birth control   \n",
              "\n",
              "           drug  rating  \n",
              "1  Etonogestrel     7.0  \n",
              "2      Implanon     1.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-728e6352-ce49-407c-b58e-6b61096c64db\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>review</th>\n",
              "      <th>Disease</th>\n",
              "      <th>drug</th>\n",
              "      <th>rating</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>\"My experience has been somewhat mixed. I have...</td>\n",
              "      <td>birth control</td>\n",
              "      <td>Etonogestrel</td>\n",
              "      <td>7.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>\"This is my second Implanon would not recommen...</td>\n",
              "      <td>birth control</td>\n",
              "      <td>Implanon</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-728e6352-ce49-407c-b58e-6b61096c64db')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-728e6352-ce49-407c-b58e-6b61096c64db button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-728e6352-ce49-407c-b58e-6b61096c64db');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-4d769465-2bf5-4ba9-8a0e-c92f8b78f4a2\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4d769465-2bf5-4ba9-8a0e-c92f8b78f4a2')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-4d769465-2bf5-4ba9-8a0e-c92f8b78f4a2 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"#df3[df3['drug']=='Etonogestrel']\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"review\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"\\\"This is my second Implanon would not recommend at all....first one was okay for the first 2 years until I started bleeding which never stopped when I woke in the morning I would stand up and be absolutely covered in blood it was that bad.....I lost 2 stone in weight my mood swings were all over the place and it affected my relationship. I was advised to have that one removed and another one inserted which I did which I'm into the second year now and it's starting all over again! The only good thing about this is the reliability that your not going to get pregnant IF there's ever a chance that you can have a quick fumble in between periods!! It gets me so down I can be off in the morning and on again at night.....so frustrating\\\"\",\n          \"\\\"My experience has been somewhat mixed. I have been using Implanon now for nearly 14 months and have decided to get it removed because I bleed every day, all day. I would occasionally stain my underwear and my sheets. It didn't start out that way, for the first month I didn't bleed at all, then I had an epic two week period, then everything was irregular, which has basically been my new norm, sadly. \\r\\r\\n\\r\\r\\nI decided to get rid of the Implanon because of the endless bleeding. I should mention that the bleeding was usually pretty light, a bit more than spotting but not quite a period either. Other than the endless bleeding, I've been pretty side effect free, except for minor acne.\\r\\r\\n\\r\\r\\nI didn't get pregnant on it, so yeah! But...blood, a lot of blood.\\\"\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Disease\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"birth control\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"drug\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Implanon\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rating\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.242640687119285,\n        \"min\": 1.0,\n        \"max\": 7.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Group by drug, disease, and rating and count the number of records for each group\n",
        "grouped2 = df3.groupby(['drug', 'Disease', 'rating']).size().reset_index(name='record_count')\n",
        "\n",
        "# Print the result\n",
        "#print(grouped2)\n",
        "grouped2[grouped2['drug']=='Etonogestrel']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 331
        },
        "id": "ChKU7Tsg04b9",
        "outputId": "d9006f47-1ce3-403d-a5fd-2237539f23c8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            drug        Disease  rating  record_count\n",
              "58  Etonogestrel  birth control     1.0             2\n",
              "59  Etonogestrel  birth control     2.0             3\n",
              "60  Etonogestrel  birth control     3.0             7\n",
              "61  Etonogestrel  birth control     4.0             1\n",
              "62  Etonogestrel  birth control     5.0             2\n",
              "63  Etonogestrel  birth control     6.0             1\n",
              "64  Etonogestrel  birth control     7.0             3\n",
              "65  Etonogestrel  birth control     9.0             4\n",
              "66  Etonogestrel  birth control    10.0             6"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0af73ebe-5f37-4c4b-92e5-b57ac2114b03\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>drug</th>\n",
              "      <th>Disease</th>\n",
              "      <th>rating</th>\n",
              "      <th>record_count</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>58</th>\n",
              "      <td>Etonogestrel</td>\n",
              "      <td>birth control</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59</th>\n",
              "      <td>Etonogestrel</td>\n",
              "      <td>birth control</td>\n",
              "      <td>2.0</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>60</th>\n",
              "      <td>Etonogestrel</td>\n",
              "      <td>birth control</td>\n",
              "      <td>3.0</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>61</th>\n",
              "      <td>Etonogestrel</td>\n",
              "      <td>birth control</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>62</th>\n",
              "      <td>Etonogestrel</td>\n",
              "      <td>birth control</td>\n",
              "      <td>5.0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>63</th>\n",
              "      <td>Etonogestrel</td>\n",
              "      <td>birth control</td>\n",
              "      <td>6.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>64</th>\n",
              "      <td>Etonogestrel</td>\n",
              "      <td>birth control</td>\n",
              "      <td>7.0</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>65</th>\n",
              "      <td>Etonogestrel</td>\n",
              "      <td>birth control</td>\n",
              "      <td>9.0</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>66</th>\n",
              "      <td>Etonogestrel</td>\n",
              "      <td>birth control</td>\n",
              "      <td>10.0</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0af73ebe-5f37-4c4b-92e5-b57ac2114b03')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0af73ebe-5f37-4c4b-92e5-b57ac2114b03 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0af73ebe-5f37-4c4b-92e5-b57ac2114b03');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-cdf085f4-b4a4-4ea2-a1dc-de36220b578e\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-cdf085f4-b4a4-4ea2-a1dc-de36220b578e')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-cdf085f4-b4a4-4ea2-a1dc-de36220b578e button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"grouped2[grouped2['drug']=='Etonogestrel']\",\n  \"rows\": 9,\n  \"fields\": [\n    {\n      \"column\": \"drug\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Etonogestrel\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Disease\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"birth control\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rating\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.0731814857642954,\n        \"min\": 1.0,\n        \"max\": 10.0,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          9.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"record_count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 1,\n        \"max\": 7,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Filter the DataFrame to only include records for the drug 'Etonogestrel'\n",
        "etonogestrel_records = grouped2[grouped2['drug'] == 'Etonogestrel']\n",
        "\n",
        "# Calculate the total sum of the record_count column for Etonogestrel\n",
        "total_records_etonogestrel = etonogestrel_records['record_count'].sum()\n",
        "\n",
        "# Print the total sum\n",
        "print(\"Total sum of record_count for Etonogestrel:\", total_records_etonogestrel)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JgplhcAZ1k2F",
        "outputId": "926d3d4c-10c2-45c7-e703-acd0a1db8479"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Total sum of record_count for Etonogestrel: 29\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df1[df1['Disease'] == 'birth control']"
      ],
      "metadata": {
        "id": "q488iCeuz_tE",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "outputId": "e815a9e6-4a18-48b5-ac63-22d9b3424c95"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                  drug        Disease  \\\n",
              "1                         Etonogestrel  birth control   \n",
              "2                             Implanon  birth control   \n",
              "5                         Tri-Sprintec  birth control   \n",
              "9                               Mirena  birth control   \n",
              "16                              Lutera  birth control   \n",
              "..                                 ...            ...   \n",
              "981                     Levonorgestrel  birth control   \n",
              "985                          Estarylla  birth control   \n",
              "986                            Liletta  birth control   \n",
              "989  Ethinyl estradiol / norethindrone  birth control   \n",
              "997   Drospirenone / ethinyl estradiol  birth control   \n",
              "\n",
              "                                                review  rating  \n",
              "1    \"My experience has been somewhat mixed. I have...     7.0  \n",
              "2    \"This is my second Implanon would not recommen...     1.0  \n",
              "5    \"Used for birth control and period issues- ver...     2.0  \n",
              "9    \"I have been on Mirena for over a year now and...     1.0  \n",
              "16   \"This was my first time on any birth control a...     1.0  \n",
              "..                                                 ...     ...  \n",
              "981  \"I just had my first baby in November. I knew ...     8.0  \n",
              "985  \"I've only been on this pill for about a week ...     2.0  \n",
              "986  \"I got the Liletta a year ago after a miscarri...     3.0  \n",
              "989  \"So I just switched to this method of bc from ...     8.0  \n",
              "997  \"I have been on yaz now for about a year and a...     9.0  \n",
              "\n",
              "[205 rows x 4 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1f21cbd4-3e85-413b-9dd1-13756caf7952\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>drug</th>\n",
              "      <th>Disease</th>\n",
              "      <th>review</th>\n",
              "      <th>rating</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Etonogestrel</td>\n",
              "      <td>birth control</td>\n",
              "      <td>\"My experience has been somewhat mixed. I have...</td>\n",
              "      <td>7.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Implanon</td>\n",
              "      <td>birth control</td>\n",
              "      <td>\"This is my second Implanon would not recommen...</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Tri-Sprintec</td>\n",
              "      <td>birth control</td>\n",
              "      <td>\"Used for birth control and period issues- ver...</td>\n",
              "      <td>2.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Mirena</td>\n",
              "      <td>birth control</td>\n",
              "      <td>\"I have been on Mirena for over a year now and...</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>Lutera</td>\n",
              "      <td>birth control</td>\n",
              "      <td>\"This was my first time on any birth control a...</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>981</th>\n",
              "      <td>Levonorgestrel</td>\n",
              "      <td>birth control</td>\n",
              "      <td>\"I just had my first baby in November. I knew ...</td>\n",
              "      <td>8.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>985</th>\n",
              "      <td>Estarylla</td>\n",
              "      <td>birth control</td>\n",
              "      <td>\"I've only been on this pill for about a week ...</td>\n",
              "      <td>2.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>986</th>\n",
              "      <td>Liletta</td>\n",
              "      <td>birth control</td>\n",
              "      <td>\"I got the Liletta a year ago after a miscarri...</td>\n",
              "      <td>3.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>989</th>\n",
              "      <td>Ethinyl estradiol / norethindrone</td>\n",
              "      <td>birth control</td>\n",
              "      <td>\"So I just switched to this method of bc from ...</td>\n",
              "      <td>8.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>997</th>\n",
              "      <td>Drospirenone / ethinyl estradiol</td>\n",
              "      <td>birth control</td>\n",
              "      <td>\"I have been on yaz now for about a year and a...</td>\n",
              "      <td>9.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>205 rows × 4 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1f21cbd4-3e85-413b-9dd1-13756caf7952')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1f21cbd4-3e85-413b-9dd1-13756caf7952 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1f21cbd4-3e85-413b-9dd1-13756caf7952');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-98c05b5c-3ffc-4182-99a9-48e79366ad81\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-98c05b5c-3ffc-4182-99a9-48e79366ad81')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-98c05b5c-3ffc-4182-99a9-48e79366ad81 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df1[df1['Disease'] == 'birth control']\",\n  \"rows\": 205,\n  \"fields\": [\n    {\n      \"column\": \"drug\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 51,\n        \"samples\": [\n          \"Ortho Tri-Cyclen Lo\",\n          \"Levlen\",\n          \"Microgestin 1 / 20\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Disease\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"birth control\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"review\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 203,\n        \"samples\": [\n          \"\\\"Do NOT let these reviews scare you away from an IUD! Upon reading these reviews I was terrified of the insertion. It is not bad as half of these people make it out to be! Does it hurt? Absolutely. A nauseating, make you want to pass out kind of pain. However, it's only temporary and lasts about 40 seconds and then it's over with. First day I had period-like cramps. I took some advil and a nap and I was fine. At this point, minimal spotting and cramps here and there. My biggest and only issue right now is while having sex in certain positions my boyfriend can feel the string and it's definitely not a nice feeling for him. Something I'm going to bring up to gyno on my one month check up. Other than that, Kyleena has been great so far\\\"\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rating\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.334299238342028,\n        \"min\": 1.0,\n        \"max\": 10.0,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          5.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Strip leading and trailing whitespaces from the disease and symptoms columns\n",
        "#df2= pd.DataFrame()\n",
        "df2['Disease'] = df2['Disease'].str.strip()\n",
        "df2['review'] = df2['review'].str.strip()\n",
        "\n",
        "#modify disease\n",
        "df2['Disease'] = df2['Disease'].str.lower()"
      ],
      "metadata": {
        "id": "tsqLHGkB8sQ0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#preprocessing\n",
        "import pandas as pd\n",
        "import nltk\n",
        "from nltk.corpus import stopwords\n",
        "from nltk.stem import PorterStemmer\n",
        "from nltk.stem import WordNetLemmatizer\n",
        "import string\n",
        "import re\n",
        "\n",
        "\n",
        "import nltk\n",
        "nltk.download('punkt')\n",
        "nltk.download('wordnet')\n",
        "\n",
        "# Download stopwords data and initialize stemmer\n",
        "nltk.download('stopwords')\n",
        "stop_words = set(stopwords.words('english'))\n",
        "stop_words.discard('no')\n",
        "stop_words.discard('not')\n",
        "stop_words.discard('No')\n",
        "stop_words.discard('Not')\n",
        "stemmer = PorterStemmer()\n",
        "\n",
        "def preprocess_text(text):\n",
        "    # Convert text to lowercase\n",
        "    text = text.lower()\n",
        "\n",
        "    # Remove punctuation and special characters\n",
        "    text = re.sub(r'[^\\w\\s,]', '', text)\n",
        "\n",
        "\n",
        "    # Data Preprocessing\n",
        "    # Split symptoms into individual words\n",
        "    #text=text.split(',')\n",
        "\n",
        "    # Convert the list of symptoms into a string\n",
        "    #text=text.join(x)\n",
        "\n",
        "\n",
        "    # Tokenize text\n",
        "    tokens = nltk.word_tokenize(text)\n",
        "\n",
        "    # Remove punctuation and special characters\n",
        "    tokens = [word.strip(string.punctuation) for word in tokens if word.isalnum()]\n",
        "\n",
        "    # Remove stopwords\n",
        "    tokens = [word for word in tokens if word not in stop_words]\n",
        "\n",
        "    # Stemming\n",
        "    #tokens = [stemmer.stem(word) for word in tokens]\n",
        "\n",
        "\n",
        "\n",
        "    # Apply  lemmatization\n",
        "    lemmatizer = WordNetLemmatizer()\n",
        "    tokens = [lemmatizer.lemmatize(word) for word in tokens]\n",
        "\n",
        "    # Join tokens back into a string\n",
        "    processed_text = ' '.join(tokens)\n",
        "\n",
        "    return processed_text"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9aN6z_fV8rNS",
        "outputId": "d9d2aa23-0e3a-4a15-b998-2fcbf5c748f9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[nltk_data] Downloading package punkt to /root/nltk_data...\n",
            "[nltk_data]   Unzipping tokenizers/punkt.zip.\n",
            "[nltk_data] Downloading package wordnet to /root/nltk_data...\n",
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Unzipping corpora/stopwords.zip.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df2['review'] = df2['review'].apply(preprocess_text)"
      ],
      "metadata": {
        "id": "Hk_m0hqs3XgQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "R-Fv_1xODPnp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df2.head(2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 112
        },
        "id": "ch3TNWhX-7N5",
        "outputId": "5eaa6cc4-4929-4307-f344-090374221dbb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                              review        Disease  \\\n",
              "1  experience somewhat mixed using implanon nearl...  birth control   \n",
              "2  second implanon would not recommend allfirst o...  birth control   \n",
              "\n",
              "           drug  rating  \n",
              "1  Etonogestrel     7.0  \n",
              "2      Implanon     1.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4164e3ec-4913-4959-b90c-1a7fc88d7ab2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>review</th>\n",
              "      <th>Disease</th>\n",
              "      <th>drug</th>\n",
              "      <th>rating</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>experience somewhat mixed using implanon nearl...</td>\n",
              "      <td>birth control</td>\n",
              "      <td>Etonogestrel</td>\n",
              "      <td>7.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>second implanon would not recommend allfirst o...</td>\n",
              "      <td>birth control</td>\n",
              "      <td>Implanon</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4164e3ec-4913-4959-b90c-1a7fc88d7ab2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4164e3ec-4913-4959-b90c-1a7fc88d7ab2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4164e3ec-4913-4959-b90c-1a7fc88d7ab2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-8d53ad25-38ee-42d3-88a8-e4775b3125be\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8d53ad25-38ee-42d3-88a8-e4775b3125be')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-8d53ad25-38ee-42d3-88a8-e4775b3125be button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df2",
              "summary": "{\n  \"name\": \"df2\",\n  \"rows\": 205,\n  \"fields\": [\n    {\n      \"column\": \"review\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 203,\n        \"samples\": [\n          \"not let review scare away iud upon reading review terrified insertion not bad half people make hurt absolutely nauseating make want pas kind pain however temporary last 40 second first day periodlike cramp took advil nap fine point minimal spotting cramp biggest issue right sex certain position boyfriend feel string definitely not nice feeling something im going bring gyno one month check kyleena great far\",\n          \"nexplanon inserted eight month ago plenty research knew expect first month far bleedingspotting headache etc without birth control went five ultra tampon average period day period came around nexplanon barely anything light enough wear pantyliner work without needing change thought finally found perfect birth control however last three four month ive constant period couple day nothing terrible although isnt heavy used heavier started nexplanon\",\n          \"started birth control shot 2013 day 20th birthday say least terrible decision shot great way not period entire time shot 3 month 1st month pill period always irregular though also nice free worry contraception bad overwhelmed good though first week shot bad headache not migraine painful spotted lightly halfway 1st month continued 2 week 3 week became horrifyingly depressed wouldnt survived hadnt known would likely better stopped shot\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Disease\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"birth control\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"drug\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 51,\n        \"samples\": [\n          \"Ortho Tri-Cyclen Lo\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rating\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.334299238342028,\n        \"min\": 1.0,\n        \"max\": 10.0,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          5.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Define thresholds for polarity categories\n",
        "positive_threshold = 6\n",
        "negative_threshold = 3\n",
        "\n",
        "# Categorize polarity column into positive, neutral, and negative\n",
        "def categorize_rating(rating):\n",
        "    if rating >= positive_threshold:\n",
        "        return 'Positive'\n",
        "    elif rating <= negative_threshold:\n",
        "        return 'Negative'\n",
        "    else:\n",
        "        return 'Neutral'\n"
      ],
      "metadata": {
        "id": "q2nxY0AJ_eSR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#no of user put positive ,negative review for top 10 popular drug\n",
        "#applying rating category only 2 original data\n",
        "df['rating_category'] = df['rating'].apply(categorize_rating)\n"
      ],
      "metadata": {
        "id": "sah__3pyDyeX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#no of user put positive ,negative review for top 10 popular drug\n",
        "#applying rating category only 2 original data\n",
        "df2['rating_category'] = df2['rating'].apply(categorize_rating)\n"
      ],
      "metadata": {
        "id": "UGozn3_qBBR9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Group by 'Disease' and 'drug' columns and create a new column with the count of reviews\n",
        "df2['review_count'] = df2.groupby(['Disease', 'drug','rating'])['review'].transform('count')\n",
        "\n",
        "# No need to reset index as we are not aggregating other columns\n",
        "\n",
        "# Display the DataFrame with the new 'review_count' column\n",
        "\n"
      ],
      "metadata": {
        "id": "EtcfpOeZF-UQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#create avg of rating by multiplying rating *no of user who has given rating\n",
        "df_review_count = df2[['drug', 'Disease', 'rating', 'review_count']]\n"
      ],
      "metadata": {
        "id": "xfQ9QN6lo55v"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_review_count[df_review_count['drug']=='Etonogestrel']\n",
        "#df_review_count.head(2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 958
        },
        "id": "JOioUcpYq__J",
        "outputId": "e8c98fdb-008a-4536-c121-e83967558d2e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             drug        Disease  rating  review_count\n",
              "1    Etonogestrel  birth control     7.0             3\n",
              "45   Etonogestrel  birth control     7.0             3\n",
              "50   Etonogestrel  birth control     3.0             7\n",
              "114  Etonogestrel  birth control     5.0             2\n",
              "160  Etonogestrel  birth control    10.0             6\n",
              "175  Etonogestrel  birth control    10.0             6\n",
              "182  Etonogestrel  birth control     3.0             7\n",
              "184  Etonogestrel  birth control    10.0             6\n",
              "198  Etonogestrel  birth control     3.0             7\n",
              "220  Etonogestrel  birth control     6.0             1\n",
              "288  Etonogestrel  birth control     7.0             3\n",
              "389  Etonogestrel  birth control     2.0             3\n",
              "426  Etonogestrel  birth control     3.0             7\n",
              "468  Etonogestrel  birth control     3.0             7\n",
              "481  Etonogestrel  birth control     9.0             4\n",
              "550  Etonogestrel  birth control     5.0             2\n",
              "574  Etonogestrel  birth control     9.0             4\n",
              "597  Etonogestrel  birth control     2.0             3\n",
              "630  Etonogestrel  birth control     9.0             4\n",
              "638  Etonogestrel  birth control     1.0             2\n",
              "664  Etonogestrel  birth control     9.0             4\n",
              "685  Etonogestrel  birth control     3.0             7\n",
              "743  Etonogestrel  birth control     3.0             7\n",
              "781  Etonogestrel  birth control    10.0             6\n",
              "784  Etonogestrel  birth control     4.0             1\n",
              "799  Etonogestrel  birth control     2.0             3\n",
              "807  Etonogestrel  birth control     1.0             2\n",
              "836  Etonogestrel  birth control    10.0             6\n",
              "904  Etonogestrel  birth control    10.0             6"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2344ac60-df9b-46ef-9cc2-cd66fc59e9b5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>drug</th>\n",
              "      <th>Disease</th>\n",
              "      <th>rating</th>\n",
              "      <th>review_count</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Etonogestrel</td>\n",
              "      <td>birth control</td>\n",
              "      <td>7.0</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45</th>\n",
              "      <td>Etonogestrel</td>\n",
              "      <td>birth control</td>\n",
              "      <td>7.0</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50</th>\n",
              "      <td>Etonogestrel</td>\n",
              "      <td>birth control</td>\n",
              "      <td>3.0</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>114</th>\n",
              "      <td>Etonogestrel</td>\n",
              "      <td>birth control</td>\n",
              "      <td>5.0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>160</th>\n",
              "      <td>Etonogestrel</td>\n",
              "      <td>birth control</td>\n",
              "      <td>10.0</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>175</th>\n",
              "      <td>Etonogestrel</td>\n",
              "      <td>birth control</td>\n",
              "      <td>10.0</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>182</th>\n",
              "      <td>Etonogestrel</td>\n",
              "      <td>birth control</td>\n",
              "      <td>3.0</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>184</th>\n",
              "      <td>Etonogestrel</td>\n",
              "      <td>birth control</td>\n",
              "      <td>10.0</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>198</th>\n",
              "      <td>Etonogestrel</td>\n",
              "      <td>birth control</td>\n",
              "      <td>3.0</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>220</th>\n",
              "      <td>Etonogestrel</td>\n",
              "      <td>birth control</td>\n",
              "      <td>6.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>288</th>\n",
              "      <td>Etonogestrel</td>\n",
              "      <td>birth control</td>\n",
              "      <td>7.0</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>389</th>\n",
              "      <td>Etonogestrel</td>\n",
              "      <td>birth control</td>\n",
              "      <td>2.0</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>426</th>\n",
              "      <td>Etonogestrel</td>\n",
              "      <td>birth control</td>\n",
              "      <td>3.0</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>468</th>\n",
              "      <td>Etonogestrel</td>\n",
              "      <td>birth control</td>\n",
              "      <td>3.0</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>481</th>\n",
              "      <td>Etonogestrel</td>\n",
              "      <td>birth control</td>\n",
              "      <td>9.0</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>550</th>\n",
              "      <td>Etonogestrel</td>\n",
              "      <td>birth control</td>\n",
              "      <td>5.0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>574</th>\n",
              "      <td>Etonogestrel</td>\n",
              "      <td>birth control</td>\n",
              "      <td>9.0</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>597</th>\n",
              "      <td>Etonogestrel</td>\n",
              "      <td>birth control</td>\n",
              "      <td>2.0</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>630</th>\n",
              "      <td>Etonogestrel</td>\n",
              "      <td>birth control</td>\n",
              "      <td>9.0</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>638</th>\n",
              "      <td>Etonogestrel</td>\n",
              "      <td>birth control</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>664</th>\n",
              "      <td>Etonogestrel</td>\n",
              "      <td>birth control</td>\n",
              "      <td>9.0</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>685</th>\n",
              "      <td>Etonogestrel</td>\n",
              "      <td>birth control</td>\n",
              "      <td>3.0</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>743</th>\n",
              "      <td>Etonogestrel</td>\n",
              "      <td>birth control</td>\n",
              "      <td>3.0</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>781</th>\n",
              "      <td>Etonogestrel</td>\n",
              "      <td>birth control</td>\n",
              "      <td>10.0</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>784</th>\n",
              "      <td>Etonogestrel</td>\n",
              "      <td>birth control</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>799</th>\n",
              "      <td>Etonogestrel</td>\n",
              "      <td>birth control</td>\n",
              "      <td>2.0</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>807</th>\n",
              "      <td>Etonogestrel</td>\n",
              "      <td>birth control</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>836</th>\n",
              "      <td>Etonogestrel</td>\n",
              "      <td>birth control</td>\n",
              "      <td>10.0</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>904</th>\n",
              "      <td>Etonogestrel</td>\n",
              "      <td>birth control</td>\n",
              "      <td>10.0</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2344ac60-df9b-46ef-9cc2-cd66fc59e9b5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2344ac60-df9b-46ef-9cc2-cd66fc59e9b5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2344ac60-df9b-46ef-9cc2-cd66fc59e9b5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-762809a0-a695-4eb7-aa94-221589da53e8\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-762809a0-a695-4eb7-aa94-221589da53e8')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-762809a0-a695-4eb7-aa94-221589da53e8 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"#df_review_count\",\n  \"rows\": 29,\n  \"fields\": [\n    {\n      \"column\": \"drug\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Etonogestrel\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Disease\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"birth control\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rating\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.2721394456416646,\n        \"min\": 1.0,\n        \"max\": 10.0,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"review_count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 1,\n        \"max\": 7,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Group ratings by drug\n",
        "grouped = df_review_count.groupby('drug')"
      ],
      "metadata": {
        "id": "lzZJFdwmtINt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "grouped.head(2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "XCnXWjXXtLhF",
        "outputId": "eb9953dc-0635-4087-b2b8-c2ff93d03f09"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                 drug        Disease  rating  review_count\n",
              "0        Etonogestrel  birth control     7.0             7\n",
              "1            Implanon  birth control     1.0             4\n",
              "2        Tri-Sprintec  birth control     2.0             1\n",
              "3              Mirena  birth control     1.0             5\n",
              "4              Lutera  birth control     1.0             3\n",
              "..                ...            ...     ...           ...\n",
              "953  Ortho Tri-Cyclen  birth control     9.0             1\n",
              "956         Mononessa  birth control    10.0             1\n",
              "977             Errin  birth control    10.0             1\n",
              "992           Jolessa  birth control     7.0             1\n",
              "996            Gianvi  birth control     9.0             2\n",
              "\n",
              "[169 rows x 4 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6c8d9f7a-1f69-44a3-817a-e91fb18f8553\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>drug</th>\n",
              "      <th>Disease</th>\n",
              "      <th>rating</th>\n",
              "      <th>review_count</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Etonogestrel</td>\n",
              "      <td>birth control</td>\n",
              "      <td>7.0</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Implanon</td>\n",
              "      <td>birth control</td>\n",
              "      <td>1.0</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Tri-Sprintec</td>\n",
              "      <td>birth control</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Mirena</td>\n",
              "      <td>birth control</td>\n",
              "      <td>1.0</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Lutera</td>\n",
              "      <td>birth control</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>953</th>\n",
              "      <td>Ortho Tri-Cyclen</td>\n",
              "      <td>birth control</td>\n",
              "      <td>9.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>956</th>\n",
              "      <td>Mononessa</td>\n",
              "      <td>birth control</td>\n",
              "      <td>10.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>977</th>\n",
              "      <td>Errin</td>\n",
              "      <td>birth control</td>\n",
              "      <td>10.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>992</th>\n",
              "      <td>Jolessa</td>\n",
              "      <td>birth control</td>\n",
              "      <td>7.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>996</th>\n",
              "      <td>Gianvi</td>\n",
              "      <td>birth control</td>\n",
              "      <td>9.0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>169 rows × 4 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6c8d9f7a-1f69-44a3-817a-e91fb18f8553')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6c8d9f7a-1f69-44a3-817a-e91fb18f8553 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6c8d9f7a-1f69-44a3-817a-e91fb18f8553');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-2431aa95-91ac-4d0c-8367-a532e3bddde5\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2431aa95-91ac-4d0c-8367-a532e3bddde5')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-2431aa95-91ac-4d0c-8367-a532e3bddde5 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"grouped\",\n  \"rows\": 169,\n  \"fields\": [\n    {\n      \"column\": \"drug\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 95,\n        \"samples\": [\n          \"Tri-Lo-Sprintec\",\n          \"Orsythia\",\n          \"Seasonale\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Disease\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"birth control\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rating\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.507117506403137,\n        \"min\": 1.0,\n        \"max\": 10.0,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          6.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"review_count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 1,\n        \"max\": 16,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          12\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#normalized rating"
      ],
      "metadata": {
        "id": "W3UYHkci-3y2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "def calculate_weighted_avg_rating_forall(df_rating_count):\n",
        "    # Group ratings by drug\n",
        "    grouped = df_rating_count.groupby(['drug','Disease'])\n",
        "\n",
        "    # Calculate weighted average rating for each drug\n",
        "    weighted_avg_ratings = []\n",
        "    for (drug, disease), group in grouped:\n",
        "        weighted_sum = (group['rating'] * group['record_count']).sum()\n",
        "        total_users = group['record_count'].sum()\n",
        "        # Get the disease value from the first row of the group\n",
        "        # disease = group['Disease'].iloc[0]  # Use this if 'Disease' is the column name\n",
        "        # disease = disease  # Use this if 'Disease' is a separate variable\n",
        "        # Adjust the weight by considering the total number of users\n",
        "        weighted_avg = (weighted_sum + total_users) / (total_users + 1)\n",
        "\n",
        "        weighted_avg_ratings.append({'Disease': disease, 'drug': drug, 'Weighted_Avg_Rating': weighted_avg, 'user_cnt': total_users})\n",
        "\n",
        "    # Convert result to DataFrame\n",
        "    result_df = pd.DataFrame(weighted_avg_ratings)\n",
        "\n",
        "    # Normalize ratings (optional)\n",
        "    # Example: Normalize ratings to a scale of 0 to 10\n",
        "    max_rating = result_df['Weighted_Avg_Rating'].max()\n",
        "    min_rating = result_df['Weighted_Avg_Rating'].min()\n",
        "    result_df['Rating'] = 10 * (result_df['Weighted_Avg_Rating'] - min_rating) / (max_rating - min_rating)\n",
        "\n",
        "    # Filter the DataFrame to include only the top drugs for the specified disease\n",
        "    #'top_drugs = result_df[result_df['Disease'] == disease].sort_values(by='Normalized_Rating', ascending=False).head(n)\n",
        "\n",
        "    return result_df\n"
      ],
      "metadata": {
        "id": "eCthuOe6s5Sf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_rating_count = df2.groupby(['Disease', 'drug', 'rating']).size().reset_index(name='record_count')"
      ],
      "metadata": {
        "id": "S5eeYV56_Yxz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "n=30\n",
        "disease='birth control'\n",
        "result_df=calculate_weighted_avg_rating_forall(df_rating_count)"
      ],
      "metadata": {
        "id": "BtvY-CLR_QCE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "result_df.head(2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 112
        },
        "id": "QoD8yq7j_q1l",
        "outputId": "81a38caa-86e6-4522-92b3-9ba1892ca57e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         Disease      drug  Weighted_Avg_Rating  user_cnt    Rating\n",
              "0  birth control    Alesse                  2.0         1  1.538462\n",
              "1  birth control  Altavera                  1.0         1  0.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-eb751da3-8041-4ad2-9449-f871f16b208f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Disease</th>\n",
              "      <th>drug</th>\n",
              "      <th>Weighted_Avg_Rating</th>\n",
              "      <th>user_cnt</th>\n",
              "      <th>Rating</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>birth control</td>\n",
              "      <td>Alesse</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1.538462</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>birth control</td>\n",
              "      <td>Altavera</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-eb751da3-8041-4ad2-9449-f871f16b208f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-eb751da3-8041-4ad2-9449-f871f16b208f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-eb751da3-8041-4ad2-9449-f871f16b208f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-49648ed1-34c8-4c53-8597-71f09c311041\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-49648ed1-34c8-4c53-8597-71f09c311041')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-49648ed1-34c8-4c53-8597-71f09c311041 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "result_df",
              "summary": "{\n  \"name\": \"result_df\",\n  \"rows\": 51,\n  \"fields\": [\n    {\n      \"column\": \"Disease\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"birth control\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"drug\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 51,\n        \"samples\": [\n          \"Tarina Fe 1 / 20\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Weighted_Avg_Rating\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.121367646948618,\n        \"min\": 1.0,\n        \"max\": 7.5,\n        \"num_unique_values\": 33,\n        \"samples\": [\n          2.3333333333333335\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"user_cnt\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 1,\n        \"max\": 29,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Rating\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.2636425337671056,\n        \"min\": 0.0,\n        \"max\": 10.0,\n        \"num_unique_values\": 33,\n        \"samples\": [\n          2.0512820512820515\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 59
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#plotting user reviews"
      ],
      "metadata": {
        "id": "yrRaT025_6QF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "def plot_stacked_bar_chart(df, top_10_drugs,disease):\n",
        "    # Define colors for different review ratings\n",
        "    colors = {'Negative': 'red', 'Neutral': 'orange','Positive': 'green'}\n",
        "\n",
        "    # Filter the DataFrame to include only the top 15 drugs\n",
        "    top_15_drugs_df = df[df['Disease'] == disease]\n",
        "    top_15_drugs_df = top_15_drugs_df[top_15_drugs_df['drug'].isin(top_10_drugs['drug'])]\n",
        "\n",
        "\n",
        "    # Group by 'drug' and 'rating_category' and count occurrences\n",
        "    grouped_df = top_15_drugs_df.groupby(['drug', 'rating_category']).size().unstack(fill_value=0)\n",
        "\n",
        "    # Plot stacked bar chart\n",
        "    ax = grouped_df.plot(kind='bar', stacked=True, figsize=(12, 8), color=[colors.get(col, 'blue') for col in grouped_df.columns])\n",
        "\n",
        "    # Add count annotations to each bar\n",
        "    for p in ax.patches:\n",
        "        ax.annotate(str(p.get_height()), (p.get_x() + p.get_width() / 2., p.get_height()), ha='center', va='center', xytext=(0, 5), textcoords='offset points')\n",
        "\n",
        "    # Add total count annotations at the top of each stacked bar\n",
        "    for i, drug in enumerate(grouped_df.index):\n",
        "        total_count = grouped_df.iloc[i].sum()\n",
        "        ax.text(i, total_count , f'{total_count}', ha='center')\n",
        "\n",
        "    plt.title('Distribution of Review Ratings for Top 15 Drugs')\n",
        "    plt.xlabel('Drug')\n",
        "    plt.ylabel('Count')\n",
        "    plt.xticks(rotation=45)\n",
        "    plt.legend(title='Review Rating')\n",
        "    plt.show()\n"
      ],
      "metadata": {
        "id": "VNdLHQYr_9aX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "##review based on drug and disease\n",
        "def top_drugs_by_disease(result_df, disease,n):\n",
        "    # Filter the DataFrame to include only the top drugs for the specified disease\n",
        "    top_drugs = result_df[(result_df['Disease'] == disease)].sort_values(by='Rating', ascending=False).head(n)\n",
        "    return top_drugs\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GNTA57fZAIed",
        "outputId": "67163660-320f-4ecf-b7a1-3a19783ccb48"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Empty DataFrame\n",
            "Columns: [Disease, drug, Weighted_Avg_Rating, user_cnt, Rating]\n",
            "Index: []\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "n=30\n",
        "disease='birth control'\n",
        "# Example usage\n",
        "top_10_drugs = top_drugs_by_disease(result_df, disease,n)\n",
        "#print(top_10_drugs)"
      ],
      "metadata": {
        "id": "gZI889W9CzeO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head(1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 81
        },
        "id": "uTpgU0CsDqGc",
        "outputId": "c46203a5-9b90-441a-825d-178482eb8e9e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           drug                     Disease  \\\n",
              "0  Cyclosporine  keratoconjunctivitis sicca   \n",
              "\n",
              "                                              review  rating rating_category  \n",
              "0  \"I have used Restasis for about a year now and...     2.0        Negative  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5131bd43-f524-4e92-a150-8e1c62d3c813\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>drug</th>\n",
              "      <th>Disease</th>\n",
              "      <th>review</th>\n",
              "      <th>rating</th>\n",
              "      <th>rating_category</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Cyclosporine</td>\n",
              "      <td>keratoconjunctivitis sicca</td>\n",
              "      <td>\"I have used Restasis for about a year now and...</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Negative</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5131bd43-f524-4e92-a150-8e1c62d3c813')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-5131bd43-f524-4e92-a150-8e1c62d3c813 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-5131bd43-f524-4e92-a150-8e1c62d3c813');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 1000,\n  \"fields\": [\n    {\n      \"column\": \"drug\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 444,\n        \"samples\": [\n          \"Mefenamic acid\",\n          \"Campral\",\n          \"Ciprofloxacin\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Disease\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 172,\n        \"samples\": [\n          \"deep vein thrombosis\",\n          \"hypogonadism, male\",\n          \"crohn's disease\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"review\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 994,\n        \"samples\": [\n          \"\\\"I have been taking BuSpar for 8 plus years.  I still have some side effects of dizziness if taken on an empty stomach and coffee but I think that is asking for trouble.  I can honestly say it saved my marriage and family life.  High stressed medical position always being on call which increased my anxiety. Anxiety was at such a level that no one could stand to be around me.  I take 10mg once in the morning which lowers my anxiety to a tolerable level for the day.  When I feel extra stress coming on I take 10mg in the morning and 10mg at night.  It does not work for everyone as many have mentioned but it has given me a second wind to enjoy life to the fullest.\\\"\",\n          \"\\\"After upping dosage to 20 mg my vision started messing up. We lowered it and are titrating off of it now. My vision is still messed up. I can no longer see through my glasses very well. I'm seeing a specialist next week. My head throbs as wee and nausea. My vision better return or someone will be in trouble.\\\"\",\n          \"\\\"I was prescribed a 5 day Z-Pak to treat a Streptococcal pharyngitis infection.  After the second day, the medication reduced the swelling and throat pain, but began to cause stomach cramping and pain.  By the end of the third day the stomach pain was severe and Doctor recommended to discontinue use.  This is the only antibiotic I have used that has caused an allergic reaction.\\\"\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rating\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.2464811164766743,\n        \"min\": 1.0,\n        \"max\": 10.0,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          6.0,\n          7.0,\n          8.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rating_category\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Negative\",\n          \"Positive\",\n          \"Neutral\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 72
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plot_stacked_bar_chart(df, top_10_drugs,disease)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 878
        },
        "id": "K_ugumEHDZHW",
        "outputId": "7093a9ae-ddc2-447b-e32c-be801ece7af7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 1 Axes>"
            ],
            "image/png": "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qXv37vYyd3f3DD1Z0q+Qr1y5UufPn89zTOlWr16tS5cuafjw4Q6D+j300EPy8fHRsmXLHOrn9rubldzu8z179lS1atXs0zfeeKNuuummAj0GPProo5o2bZr69eunXr16acqUKZo7d64OHDhQIGMVpA88d/XxtVevXnkeLG/79u36+++/9dBDDzmMFRIZGZmhh0i5cuX0xx9/aNu2bXlqCwDyiwQdAPIgISHBIRm+Wp8+fdS6dWs9+OCD8vf31z333KNPP/00V8l6tWrVcjUIUt26dR2mbTab6tSpU+iPaDp69KiqVq2aYXukd6s+evSoQ3lmCWr58uUd7uPOqp26detmGPU8q3Zy46abbtKqVau0YsUKvfbaaypXrpzOnDnjsP0PHDiguLg4Va5c2Z7Mp78SEhLsg4tJaZ//77//bn9M2aFDh7Rjxw716dMn2zgOHDigFStWZFh/WFiYpP8GMPP391fdunXtyfjGjRvVpk0btW3bVn/++ad+++03bd68WampqTlO0AcNGqRVq1bpf//7n0aMGKELFy4oJSUlQ73NmzcrLCxMnp6eKleunPz8/Oz3WOcnQa9evXqGcRyu3i+OHj2q2rVrZ6h39WjrwcHBGjlypN59911VqlRJ4eHhmjFjRp7jS9+36tWr51Du6uqqWrVqZdj3cvvdza7d3OzzVx8DJOm6664r9GNAv379FBAQoNWrV+d7XQkJCZKU4XgSHByc53Wmb6er9xNnZ+cM994/9dRT8vLy0o033qi6desqOjrafmsSABQF7kEHgFz6448/FBcXl+0jmDw8PLRhwwZ98803WrZsmVasWKFPPvlEHTt21Ndff52jRxLl5r7xnLo6sUmXkpKSq8ck5UdW7RgFNNhUXlSqVMmeBIeHh6t+/frq2rWr3njjDY0cOVJS2gBxlStX1rx58zJdx5VX97p166ayZcvq008/VatWrfTpp5/KyclJvXv3zjaO1NRU3XbbbXryyScznX/dddfZ/3/LLbdozZo1unDhgnbs2KEXXnhBjRs3Vrly5bRx40b9+uuv8vLyUvPmzXO0DerWrWvfBl27dlWZMmX09NNPq0OHDvaB7Q4dOqRbb71V9evX1+TJkxUYGChXV1ctX75cr7/+er4ev1fQ+8WkSZMUFRWlL7/8Ul9//bWGDRummJgYffvttw73HBeGwvjuWl1gYKD++eeffK8nfVC7q4+vmW3T7I5nedWgQQPt27dPS5cu1YoVK/T555/rzTff1AsvvKCxY8fmeb0AkFNcQQeAXEp/dnF4eHi29ZycnHTrrbdq8uTJ2rNnj8aPH6+1a9fau0Jn9eMyrw4cOOAwbRiGDh486HCFqHz58hlGnZYyXonLTWw1a9bUn3/+maFL6t69e+3zC0LNmjV14MCBDElgQbcjSV26dFG7du00YcIEJSYmSpJq166tv//+W61bt1ZYWFiGV9OmTe3Le3p6qmvXrlq4cKFSU1P1ySefqE2bNqpatWq27dauXVsJCQmZrj8sLMyh90GbNm107NgxLViwQCkpKWrVqpWcnJx0yy23aOPGjdq4caNatWqV5z+8PPvss/L29tZzzz1nL/vf//6npKQkLVmyRIMHD9btt9+usLCwXCVP+VGzZk0dOnQoQ9J+8ODBTOuHhIToueee04YNG7Rx40YdP35cs2bNylO7Utpz66906dIlHT58uED3vavbzc0+f/UxQJL279+f6xHac8swDB05ciTfz2tPSEjQokWLFBgYmKOBDdO7p199TLv6eJa+na7eTy5fvpxp7wJPT0/16dNHs2fP1rFjx9SlSxeNHz9eFy9ezMW7AYC8IUEHgFxYu3atxo0bp+DgYEVGRmZZL7MrSc2aNZMkJSUlSUr7EShl/HGZV+kjOKf77LPPdOLECfsI2FJaAvjtt9/q0qVL9rKlS5dmeBxbbmK7/fbblZKSounTpzuUv/7667LZbA7t58ftt9+ukydP6pNPPrGXXb58WdOmTZOXl5fatWtXIO2ke+qpp/T333/rnXfekSTdfffdSklJ0bhx4zLUvXz5coZt1adPH/35559699139eOPP16ze3t6G1u3btXKlSszzDt79qwuX75sn07vuj5x4kQ1adLEft91mzZttGbNGm3fvj3H3dszU65cOQ0ePFgrV67Url27JP13lfvKBDkuLk6zZ8/OsLynp2eB7dvpwsPDdfz4cS1ZssRedvHiRftnlC4+Pt5hW0lpybqTk5P9+5cbYWFhcnV11dSpUx3e+3vvvae4uDh16dIl1+vMidzu84sXL9bx48ft099//72+++67AvsOStLp06czlM2cOVOnT59W586d87zeCxcu6L777tM///yjZ599Nkd/4EkfyyJ9LAYp7er522+/7VDvhhtuUMWKFfXOO+847Bfz5s3LcGvN33//7TDt6uqqhg0byjAMJScn5/p9AUBu0cUdALLw1Vdfae/evbp8+bJOnTqltWvXatWqVapZs6aWLFkid3f3LJd98cUXtWHDBnXp0kU1a9ZUbGys3nzzTVWvXl233HKLpLQfl+XKldOsWbPk7e0tT09P3XTTTXm+17JChQq65ZZbNGDAAJ06dUpTpkxRnTp1HAbQevDBB/XZZ5+pc+fOuvvuu3Xo0CF99NFHDoO25Ta2bt26qUOHDnr22Wd15MgRNW3aVF9//bW+/PJLDR8+PMO682rQoEF66623FBUVpR07digoKEifffaZNm/erClTpmQ7JkBeREREqHHjxpo8ebKio6PVrl07DR48WDExMdq1a5c6deokFxcXHThwQAsXLtQbb7zhMKDa7bffLm9vbz3++OMqU6aMevXqdc02n3jiCS1ZskRdu3ZVVFSUWrRoocTERP3888/67LPPdOTIEVWqVElSWhfggIAA7du3T4888oh9HW3bttVTTz0lSflK0KW0AcGmTJmil19+WQsWLFCnTp3k6uqqbt26afDgwUpISNA777yjypUr68SJEw7LtmjRQjNnztRLL72kOnXqqHLlyurYsWO+4hk8eLCmT5+uvn376tFHH1WVKlU0b948+3cxPalbu3athg4dqt69e+u6667T5cuX9eGHH+b4c7ian5+fRo0apbFjx6pz587q3r279u3bpzfffFMtW7Z0GNyuIOV2n69Tp45uueUWDRkyRElJSZoyZYoqVqyY5S0TV/rwww919OhR+6B6GzZs0EsvvSQp7dGS6Veha9asqT59+igkJETu7u7atGmTFixYoGbNmmnw4ME5el/Hjx/XRx99JCntqvmePXu0cOFCnTx5Uo899liO19OoUSPdfPPNGjVqlP755x9VqFBBCxYsyPDHGVdXV40ZM0aPPPKIOnbsqLvvvltHjhzRnDlzMoxp0KlTJwUEBKh169by9/fXr7/+qunTp6tLly4FfowBgEyZNXw8AFhV+qN70l+urq5GQECAcdtttxlvvPGGw+O80l39mLU1a9YYPXr0MKpWrWq4uroaVatWNfr27Zvh8Vlffvml0bBhQ8PZ2dnhsWbt2rXL8lE/WT1m7eOPPzZGjRplVK5c2fDw8DC6dOni8EivdJMmTTKqVatmuLm5Ga1btza2b9+e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3nvvZTvf3d1dM2bM0IwZM4ooIgAAAACwjs6dO2v27NlKTk7Wjh071L9/f9lsNk2cOLHA2shujK/C8tBDD+nFF19UUlKS1q5dq0GDBqlcuXIaMmRIvtbr4eFhH2G9OLLcPegAAAAAgDRubm4KCAhQYGCgevbsqbCwMK1atco+PzU1VTExMQoODpaHh4eaNm2qzz77zD6vevXqmjlzpsM6d+7cKScnJx09elRSxi7uv//+u+6++26VK1dOFSpUUI8ePXTkyBFJ0u7du+Xk5KTTp09Lkv755x85OTnpnnvusS//0ksv6ZZbbsn2fZUtW1YBAQGqWbOmBgwYoCZNmji8r0OHDqlHjx7y9/eXl5eXWrZsqdWrV9vnt2/fXkePHtWIESPsV+OljF3cx4wZo2bNmunDDz9UUFCQfH19dc899+jcuXP2OufOnVNkZKQ8PT1VpUoVvf7662rfvr2GDx+e7XsoDCToAAAAAFAM7N69W1u2bJGrq6u9LCYmRh988IFmzZqlX375RSNGjNC9996r9evXy8nJSX379tX8+fMd1jNv3jy1bt1aNWvWzNBGcnKywsPD5e3trY0bN2rz5s3y8vJS586ddenSJTVq1EgVK1bU+vXrJUkbN250mJak9evXq3379jl6T4ZhaOPGjdq7d6/D+0pISNDtt9+uNWvWaOfOnercubO6deumY8eOSZK++OILVa9eXS+++KJOnDihEydOZNnGoUOHtHjxYi1dulRLly7V+vXr9fLLL9vnjxw5Ups3b9aSJUu0atUqbdy4UT/88EOO4i9oJOgAAAAAYFFLly6Vl5eX3N3dFRISotjYWD3xxBOSpKSkJE2YMEHvv/++wsPDVatWLUVFRenee+/VW2+9JUmKjIzU5s2b7YltamqqFixYoMjIyEzb++STT5Samqp3331XISEhatCggWbPnq1jx45p3bp1stlsatu2rdatWydJWrdunQYMGKCkpCTt3btXycnJ2rJli9q1a5ft+3rzzTfl5eUlNzc3tW3bVqmpqRo2bJh9ftOmTTV48GA1btxYdevW1bhx41S7dm0tWbJEklShQgWVKVNG3t7eCggIyLabfmpqqubMmaPGjRurTZs2uu++++xPCzt37pzmzp2r1157TbfeeqsaN26s2bNnKyUlJQefTsEz/TnoAAAAAIDMdejQQTNnzlRiYqJef/11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1uzZs5WUlKTly5crOjpaLi4uGjVqVJ7X6erqqoCAgGvW8/Pzy3MbVkcXdwAAAABArri5uSkgIEA1a9bUkCFDFBYWpiVLlujMmTO6//77Vb58eZUtW1YRERE6cOCAfbmjR4+qW7duKl++vDw9PdWoUSMtX75ckmMX93Xr1mnAgAGKi4uTzWaTzWbTmDFjJDl2ce/Xr5/69OnjEFtycrIqVaqkDz74QJKUmpqqmJgYBQcHy8PDQ02bNtVnn31W+BspD7iCDgAAAADIFw8PD/3999+KiorSgQMHtGTJEvn4+Oipp57S7bffrj179sjFxUXR0dG6dOmSNmzYIE9PT+3Zs0deXl4Z1teqVStNmTJFL7zwgvbt2ydJmdaLjIxU7969lZCQYJ+/cuVKnT9/XnfccYckKSYmRh999JFmzZqlunXrasOGDbr33nvl5+endu3aFeJWyT0SdAAAAABAnhiGoTVr1mjlypWKiIjQ4sWLtXnzZrVq1UqSNG/ePAUGBmrx4sXq3bu3jh07pl69eikkJESSVKtWrUzX6+rqKl9fX9lstmy7vYeHh8vT01OLFi3SfffdJ0maP3++unfvLm9vbyUlJWnChAlavXq1QkND7W1u2rRJb731Fgk6AAAAAKB4W7p0qby8vJScnKzU1FT169dPd955p5YuXaqbbrrJXq9ixYqqV6+efv31V0nSsGHDNGTIEH399dcKCwtTr1691KRJkzzH4ezsrLvvvlvz5s3Tfffdp8TERH355ZdasGCBJOngwYM6f/68brvtNoflLl26pObNm+e53cLCPegAAAAAgFzp0KGDdu3apQMHDujChQuaO3eubLZrjz7/4IMP6rffftN9992nn3/+WTfccIOmTZuWr1giIyO1Zs0axcbGavHixfLw8FDnzp0lSQkJCZKkZcuWadeuXfbXnj17LHkfOgk6AAAAACBXPD09VadOHdWoUcP+aLUGDRro8uXL+u677+z1/v77b+3bt08NGza0lwUGBurhhx/WF198occee0zvvPNOpm24uroqJSXlmrG0atVKgYGB+uSTTzRv3jz17t1bLi4ukqSGDRvKzc1Nx44dU506dRxegYGB+dkEhYIu7gAAAACAfKtbt6569Oihhx56SG+99Za8vb319NNPq1q1aurRo4ckafjw4YqIiNB1112nM2fO6JtvvlGDBg0yXV9Q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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#another visualization"
      ],
      "metadata": {
        "id": "NckplVWkEOoD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import plotly.express as px\n",
        "import pandas as pd\n",
        "\n",
        "def plot_stacked_bar_chart2(df, top_10_drugs, disease):\n",
        "    # Filter the DataFrame to include only the top 10 drugs and the specified disease\n",
        "    top_15_drugs_df = df[df['Disease'] == disease]\n",
        "    top_15_drugs_df = top_15_drugs_df[top_15_drugs_df['drug'].isin(top_10_drugs['drug'])]\n",
        "\n",
        "    # Group by 'drug' and 'rating_category' and count occurrences\n",
        "    grouped_df = top_15_drugs_df.groupby(['drug', 'rating_category']).size().unstack(fill_value=0)\n",
        "\n",
        "    # Reset index to make 'drug' a separate column\n",
        "    grouped_df = grouped_df.reset_index()\n",
        "\n",
        "    # Calculate total count for each drug\n",
        "    grouped_df['Total'] = grouped_df[['Positive', 'Negative', 'Neutral']].sum(axis=1)\n",
        "\n",
        "    # Melt the DataFrame for Plotly\n",
        "    df_melted = grouped_df.melt(id_vars=['drug', 'Total'], value_vars=['Positive', 'Negative', 'Neutral'],\n",
        "                                var_name='Sentiment', value_name='Count')\n",
        "\n",
        "    # Plot with Plotly Express (zoomable by default)\n",
        "    fig = px.bar(df_melted, x='Count', y='drug', color='Sentiment', orientation='h',\n",
        "                 height=800, width=1000, title=f'Sentiment Counts by Drug for {disease}',\n",
        "                 color_discrete_map={'Negative': 'red', 'Neutral': 'orange', 'Positive': 'green'},\n",
        "                 labels={'Count': 'Count per Sentiment'})\n",
        "\n",
        "    # Add total count annotations at the end of each bar\n",
        "    for i, row in grouped_df.iterrows():\n",
        "        fig.add_annotation(x=row['Total'], y=row['drug'], text=f'{row[\"Total\"]}', showarrow=False,\n",
        "                           font=dict(color='black', size=12))\n",
        "\n",
        "    # Update layout for better spacing and legend background color\n",
        "    fig.update_layout(barmode='stack', yaxis={'categoryorder': 'total ascending'},\n",
        "                      legend=dict(bgcolor='black', bordercolor='black', borderwidth=1))\n",
        "\n",
        "    # Show the zoomable plot\n",
        "    fig.show()\n",
        "\n"
      ],
      "metadata": {
        "id": "PBUtfMlpERAB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "disease='birth control'\n",
        "plot_stacked_bar_chart2(df, top_10_drugs,disease)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 817
        },
        "id": "a2vUAhzlGcGb",
        "outputId": "7d85f0e2-d5df-4ca4-9e93-348c08871e9f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.35.2.min.js\"></script>                <div id=\"15fd5946-5344-4281-82ec-25f560c16500\" class=\"plotly-graph-div\" style=\"height:800px; width:1000px;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"15fd5946-5344-4281-82ec-25f560c16500\")) {                    Plotly.newPlot(                        \"15fd5946-5344-4281-82ec-25f560c16500\",                        [{\"alignmentgroup\":\"True\",\"hovertemplate\":\"Sentiment=Positive\\u003cbr\\u003eCount per Sentiment=%{x}\\u003cbr\\u003edrug=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"Positive\",\"marker\":{\"color\":\"green\",\"pattern\":{\"shape\":\"\"}},\"name\":\"Positive\",\"offsetgroup\":\"Positive\",\"orientation\":\"h\",\"showlegend\":true,\"textposition\":\"auto\",\"x\":[2,2,5,3,1,2,4,5,3,8,6,14,4,1,1,4,1,2,2,1,3,7,1,3,1,2,3,4,4,2],\"xaxis\":\"x\",\"y\":[\"Aviane\",\"Chateal\",\"Copper\",\"Depo-Provera\",\"Desogestrel \\u002f ethinyl estradiol\",\"Drospirenone \\u002f ethinyl estradiol\",\"Ethinyl estradiol \\u002f etonogestrel\",\"Ethinyl estradiol \\u002f levonorgestrel\",\"Ethinyl estradiol \\u002f norelgestromin\",\"Ethinyl estradiol \\u002f norethindrone\",\"Ethinyl estradiol \\u002f norgestimate\",\"Etonogestrel\",\"Implanon\",\"Kyleena\",\"Levlen\",\"Levonorgestrel\",\"Liletta\",\"Lo Loestrin Fe\",\"Medroxyprogesterone\",\"Microgestin 1 \\u002f 20\",\"Mirena\",\"Nexplanon\",\"Orsythia\",\"Ortho Micronor\",\"Ortho Tri-Cyclen Lo\",\"ParaGard\",\"Skyla\",\"Sprintec\",\"Xulane\",\"Zarah\"],\"yaxis\":\"y\",\"type\":\"bar\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"Sentiment=Negative\\u003cbr\\u003eCount per Sentiment=%{x}\\u003cbr\\u003edrug=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"Negative\",\"marker\":{\"color\":\"red\",\"pattern\":{\"shape\":\"\"}},\"name\":\"Negative\",\"offsetgroup\":\"Negative\",\"orientation\":\"h\",\"showlegend\":true,\"textposition\":\"auto\",\"x\":[1,0,2,1,0,0,3,2,0,6,3,12,3,0,0,2,1,1,1,0,3,8,0,0,0,0,1,2,0,0],\"xaxis\":\"x\",\"y\":[\"Aviane\",\"Chateal\",\"Copper\",\"Depo-Provera\",\"Desogestrel \\u002f ethinyl estradiol\",\"Drospirenone \\u002f ethinyl estradiol\",\"Ethinyl estradiol \\u002f etonogestrel\",\"Ethinyl estradiol \\u002f levonorgestrel\",\"Ethinyl estradiol \\u002f norelgestromin\",\"Ethinyl estradiol \\u002f norethindrone\",\"Ethinyl estradiol \\u002f norgestimate\",\"Etonogestrel\",\"Implanon\",\"Kyleena\",\"Levlen\",\"Levonorgestrel\",\"Liletta\",\"Lo Loestrin Fe\",\"Medroxyprogesterone\",\"Microgestin 1 \\u002f 20\",\"Mirena\",\"Nexplanon\",\"Orsythia\",\"Ortho Micronor\",\"Ortho Tri-Cyclen Lo\",\"ParaGard\",\"Skyla\",\"Sprintec\",\"Xulane\",\"Zarah\"],\"yaxis\":\"y\",\"type\":\"bar\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"Sentiment=Neutral\\u003cbr\\u003eCount per Sentiment=%{x}\\u003cbr\\u003edrug=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"Neutral\",\"marker\":{\"color\":\"orange\",\"pattern\":{\"shape\":\"\"}},\"name\":\"Neutral\",\"offsetgroup\":\"Neutral\",\"orientation\":\"h\",\"showlegend\":true,\"textposition\":\"auto\",\"x\":[0,0,1,0,1,1,1,3,0,1,4,3,0,0,0,3,0,1,0,0,0,3,0,0,0,0,0,1,0,0],\"xaxis\":\"x\",\"y\":[\"Aviane\",\"Chateal\",\"Copper\",\"Depo-Provera\",\"Desogestrel \\u002f ethinyl estradiol\",\"Drospirenone \\u002f ethinyl estradiol\",\"Ethinyl estradiol \\u002f etonogestrel\",\"Ethinyl estradiol \\u002f levonorgestrel\",\"Ethinyl estradiol \\u002f norelgestromin\",\"Ethinyl estradiol \\u002f norethindrone\",\"Ethinyl estradiol \\u002f norgestimate\",\"Etonogestrel\",\"Implanon\",\"Kyleena\",\"Levlen\",\"Levonorgestrel\",\"Liletta\",\"Lo Loestrin Fe\",\"Medroxyprogesterone\",\"Microgestin 1 \\u002f 20\",\"Mirena\",\"Nexplanon\",\"Orsythia\",\"Ortho Micronor\",\"Ortho Tri-Cyclen Lo\",\"ParaGard\",\"Skyla\",\"Sprintec\",\"Xulane\",\"Zarah\"],\"yaxis\":\"y\",\"type\":\"bar\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Count per Sentiment\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"drug\"},\"categoryorder\":\"total ascending\"},\"legend\":{\"title\":{\"text\":\"Sentiment\"},\"tracegroupgap\":0,\"bgcolor\":\"black\",\"bordercolor\":\"black\",\"borderwidth\":1},\"title\":{\"text\":\"Sentiment Counts by Drug for birth control\"},\"barmode\":\"stack\",\"height\":800,\"width\":1000,\"annotations\":[{\"font\":{\"color\":\"black\",\"size\":12},\"showarrow\":false,\"text\":\"3\",\"x\":3,\"y\":\"Aviane\"},{\"font\":{\"color\":\"black\",\"size\":12},\"showarrow\":false,\"text\":\"2\",\"x\":2,\"y\":\"Chateal\"},{\"font\":{\"color\":\"black\",\"size\":12},\"showarrow\":false,\"text\":\"8\",\"x\":8,\"y\":\"Copper\"},{\"font\":{\"color\":\"black\",\"size\":12},\"showarrow\":false,\"text\":\"4\",\"x\":4,\"y\":\"Depo-Provera\"},{\"font\":{\"color\":\"black\",\"size\":12},\"showarrow\":false,\"text\":\"2\",\"x\":2,\"y\":\"Desogestrel \\u002f ethinyl estradiol\"},{\"font\":{\"color\":\"black\",\"size\":12},\"showarrow\":false,\"text\":\"3\",\"x\":3,\"y\":\"Drospirenone \\u002f ethinyl estradiol\"},{\"font\":{\"color\":\"black\",\"size\":12},\"showarrow\":false,\"text\":\"8\",\"x\":8,\"y\":\"Ethinyl estradiol \\u002f etonogestrel\"},{\"font\":{\"color\":\"black\",\"size\":12},\"showarrow\":false,\"text\":\"10\",\"x\":10,\"y\":\"Ethinyl estradiol \\u002f levonorgestrel\"},{\"font\":{\"color\":\"black\",\"size\":12},\"showarrow\":false,\"text\":\"3\",\"x\":3,\"y\":\"Ethinyl estradiol \\u002f norelgestromin\"},{\"font\":{\"color\":\"black\",\"size\":12},\"showarrow\":false,\"text\":\"15\",\"x\":15,\"y\":\"Ethinyl estradiol \\u002f norethindrone\"},{\"font\":{\"color\":\"black\",\"size\":12},\"showarrow\":false,\"text\":\"13\",\"x\":13,\"y\":\"Ethinyl estradiol \\u002f norgestimate\"},{\"font\":{\"color\":\"black\",\"size\":12},\"showarrow\":false,\"text\":\"29\",\"x\":29,\"y\":\"Etonogestrel\"},{\"font\":{\"color\":\"black\",\"size\":12},\"showarrow\":false,\"text\":\"7\",\"x\":7,\"y\":\"Implanon\"},{\"font\":{\"color\":\"black\",\"size\":12},\"showarrow\":false,\"text\":\"1\",\"x\":1,\"y\":\"Kyleena\"},{\"font\":{\"color\":\"black\",\"size\":12},\"showarrow\":false,\"text\":\"1\",\"x\":1,\"y\":\"Levlen\"},{\"font\":{\"color\":\"black\",\"size\":12},\"showarrow\":false,\"text\":\"9\",\"x\":9,\"y\":\"Levonorgestrel\"},{\"font\":{\"color\":\"black\",\"size\":12},\"showarrow\":false,\"text\":\"2\",\"x\":2,\"y\":\"Liletta\"},{\"font\":{\"color\":\"black\",\"size\":12},\"showarrow\":false,\"text\":\"4\",\"x\":4,\"y\":\"Lo Loestrin Fe\"},{\"font\":{\"color\":\"black\",\"size\":12},\"showarrow\":false,\"text\":\"3\",\"x\":3,\"y\":\"Medroxyprogesterone\"},{\"font\":{\"color\":\"black\",\"size\":12},\"showarrow\":false,\"text\":\"1\",\"x\":1,\"y\":\"Microgestin 1 \\u002f 20\"},{\"font\":{\"color\":\"black\",\"size\":12},\"showarrow\":false,\"text\":\"6\",\"x\":6,\"y\":\"Mirena\"},{\"font\":{\"color\":\"black\",\"size\":12},\"showarrow\":false,\"text\":\"18\",\"x\":18,\"y\":\"Nexplanon\"},{\"font\":{\"color\":\"black\",\"size\":12},\"showarrow\":false,\"text\":\"1\",\"x\":1,\"y\":\"Orsythia\"},{\"font\":{\"color\":\"black\",\"size\":12},\"showarrow\":false,\"text\":\"3\",\"x\":3,\"y\":\"Ortho Micronor\"},{\"font\":{\"color\":\"black\",\"size\":12},\"showarrow\":false,\"text\":\"1\",\"x\":1,\"y\":\"Ortho Tri-Cyclen Lo\"},{\"font\":{\"color\":\"black\",\"size\":12},\"showarrow\":false,\"text\":\"2\",\"x\":2,\"y\":\"ParaGard\"},{\"font\":{\"color\":\"black\",\"size\":12},\"showarrow\":false,\"text\":\"4\",\"x\":4,\"y\":\"Skyla\"},{\"font\":{\"color\":\"black\",\"size\":12},\"showarrow\":false,\"text\":\"7\",\"x\":7,\"y\":\"Sprintec\"},{\"font\":{\"color\":\"black\",\"size\":12},\"showarrow\":false,\"text\":\"4\",\"x\":4,\"y\":\"Xulane\"},{\"font\":{\"color\":\"black\",\"size\":12},\"showarrow\":false,\"text\":\"2\",\"x\":2,\"y\":\"Zarah\"}]},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('15fd5946-5344-4281-82ec-25f560c16500');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#wordcloudmap"
      ],
      "metadata": {
        "id": "RP6AddNmA382"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def analyze_reviews(df, result_df, n, disease):\n",
        "    # Filter the DataFrame to include only the top N drugs for the specified disease\n",
        "    top_drugs = result_df[result_df['Disease'] == disease].sort_values(by='Rating', ascending=False).head(n)\n",
        "    disease_drugs_df = df[(df['Disease'] == disease) & (df['drug'].isin(top_drugs['drug']))]\n",
        "\n",
        "    def preprocess_text2(text):\n",
        "        # Tokenization\n",
        "        tokens = word_tokenize(text.lower())\n",
        "\n",
        "        # Remove punctuation and stopwords\n",
        "        stop_words = set(stopwords.words('english') + list(string.punctuation))\n",
        "        tokens = [token for token in tokens if token not in stop_words]\n",
        "\n",
        "        # Lemmatization\n",
        "        lemmatizer = WordNetLemmatizer()\n",
        "        tokens = [lemmatizer.lemmatize(token) for token in tokens]\n",
        "\n",
        "        return tokens\n",
        "\n",
        "    # Preprocess the reviews\n",
        "    disease_drugs_df['processed_reviews'] = disease_drugs_df['review'].apply(preprocess_text2)\n",
        "\n",
        "    # Create a dictionary mapping of words to their integer ids\n",
        "    dictionary = corpora.Dictionary(disease_drugs_df['processed_reviews'])\n",
        "\n",
        "    # Convert the reviews into bag of words representation\n",
        "    bow_corpus = [dictionary.doc2bow(review) for review in disease_drugs_df['processed_reviews']]\n",
        "\n",
        "    # Train LDA model\n",
        "    lda_model = LdaModel(bow_corpus, num_topics=20, id2word=dictionary, passes=10)\n",
        "\n",
        "    # Print the topics and associated words\n",
        "    #for topic_id, topic_words in lda_model.print_topics():\n",
        "        #print(f\"Topic {topic_id}: {topic_words}\")\n",
        "\n",
        "    # Initialize an empty list to store all words\n",
        "    all_words = []\n",
        "\n",
        "    # Iterate over each topic\n",
        "    for topic_id in range(lda_model.num_topics):\n",
        "        # Get the words associated with the current topic\n",
        "        topic_words = lda_model.show_topic(topic_id, topn=10)  # Adjust topn as needed\n",
        "        # Extract words and append to the list\n",
        "        words = [word for word, _ in topic_words]\n",
        "        all_words.extend(words)\n",
        "\n",
        "    # Initialize a word frequency dictionary\n",
        "    word_freq = {}\n",
        "\n",
        "    # Count the frequency of each word\n",
        "    for word in all_words:\n",
        "        word_freq[word] = word_freq.get(word, 0) + 1\n",
        "\n",
        "    # Generate word cloud\n",
        "    wordcloud = WordCloud(width=800, height=400, background_color='white').generate_from_frequencies(word_freq)\n",
        "\n",
        "    # Display the word cloud\n",
        "    plt.figure(figsize=(10, 6))\n",
        "    plt.imshow(wordcloud, interpolation='bilinear')\n",
        "    plt.axis('off')\n",
        "    plt.show()\n"
      ],
      "metadata": {
        "id": "IOaEbGOFA5aU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "n=40\n",
        "disease='birth control'\n",
        "analyze_reviews(df2,result_df,n,disease)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 569
        },
        "id": "cpiOcR13BB4a",
        "outputId": "fb3be563-14d7-4de2-da14-3cce6643014a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-114-133b00482630>:21: SettingWithCopyWarning:\n",
            "\n",
            "\n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}